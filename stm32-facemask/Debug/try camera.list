
try camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006980  08006980  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006988  08006988  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000198  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da43  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002599  00000000  00000000  0002dae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00030080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aff  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcc1  00000000  00000000  0005422f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c947f  00000000  00000000  00063ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d36f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c4  00000000  00000000  0012d3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800683c 	.word	0x0800683c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800683c 	.word	0x0800683c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fedd 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f821 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f907 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 f8e5 	bl	8000754 <MX_DMA_Init>
  MX_DCMI_Init();
 800058a:	f000 f88d 	bl	80006a8 <MX_DCMI_Init>
  MX_FSMC_Init();
 800058e:	f000 f9a3 	bl	80008d8 <MX_FSMC_Init>
  MX_I2C2_Init();
 8000592:	f000 f8b1 	bl	80006f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1289();
 8000596:	f000 fbb1 	bl	8000cfc <Init_SSD1289>
  uint16_t* p_lcdData;
  p_lcdData = getDrawAddress();
 800059a:	f000 fb6d 	bl	8000c78 <getDrawAddress>
 800059e:	6078      	str	r0, [r7, #4]
  ov7670_init(&hdcmi, &hdcmi, &hi2c2);
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <main+0x48>)
 80005a2:	4907      	ldr	r1, [pc, #28]	; (80005c0 <main+0x4c>)
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x4c>)
 80005a6:	f000 f9fd 	bl	80009a4 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fa40 	bl	8000a30 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, p_lcdData);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fa6b 	bl	8000a90 <ov7670_startCap>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x46>
 80005bc:	2000012c 	.word	0x2000012c
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f99c 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <SystemClock_Config+0xdc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <SystemClock_Config+0xe0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fb2a 	bl	8004ca4 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000656:	f000 f99f 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fd8b 	bl	8005194 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000684:	f000 f988 	bl	8000998 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000688:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800068c:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000690:	2000      	movs	r0, #0
 8000692:	f004 fe65 	bl	8005360 <HAL_RCC_MCOConfig>
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_DCMI_Init+0x4c>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006ba:	2220      	movs	r2, #32
 80006bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_DCMI_Init+0x48>)
 80006de:	f001 fa0d 	bl	8001afc <HAL_DCMI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80006e8:	f000 f956 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	50050000 	.word	0x50050000

080006f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C2_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C2_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C2_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C2_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C2_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C2_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C2_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C2_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C2_Init+0x50>)
 8000736:	f003 f98f 	bl	8003a58 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f92a 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000012c 	.word	0x2000012c
 800074c:	40005800 	.word	0x40005800
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x3c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_DMA_Init+0x3c>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x3c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2039      	movs	r0, #57	; 0x39
 800077c:	f000 ff4d 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000780:	2039      	movs	r0, #57	; 0x39
 8000782:	f000 ff66 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a45      	ldr	r2, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a3e      	ldr	r2, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a37      	ldr	r2, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a30      	ldr	r2, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2108      	movs	r1, #8
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <MX_GPIO_Init+0x138>)
 8000858:	f003 f8e4 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2120      	movs	r1, #32
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <MX_GPIO_Init+0x13c>)
 8000862:	f003 f8df 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_GPIO_Init+0x138>)
 800087e:	f002 ff35 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	2301      	movs	r3, #1
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_GPIO_Init+0x13c>)
 800089a:	f002 ff27 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_GPIO_Init+0x140>)
 80008bc:	f002 ff16 	bl	80036ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3730      	adds	r7, #48	; 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_FSMC_Init+0xb8>)
 80008f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80008f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_FSMC_Init+0xb8>)
 80008fa:	4a26      	ldr	r2, [pc, #152]	; (8000994 <MX_FSMC_Init+0xbc>)
 80008fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_FSMC_Init+0xb8>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000912:	2210      	movs	r2, #16
 8000914:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_FSMC_Init+0xb8>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_FSMC_Init+0xb8>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_FSMC_Init+0xb8>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_FSMC_Init+0xb8>)
 800094a:	2200      	movs	r2, #0
 800094c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000958:	230f      	movs	r3, #15
 800095a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 800095c:	2308      	movs	r3, #8
 800095e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000964:	2310      	movs	r3, #16
 8000966:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000968:	2311      	movs	r3, #17
 800096a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_FSMC_Init+0xb8>)
 8000978:	f004 fe80 	bl	800567c <HAL_SRAM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000982:	f000 f809 	bl	8000998 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000180 	.word	0x20000180
 8000994:	a0000104 	.word	0xa0000104

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <ov7670_init+0x74>)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <ov7670_init+0x78>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <ov7670_init+0x7c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <ov7670_init+0x80>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <ov7670_init+0x84>)
 80009ce:	f003 f829 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f000 fd22 	bl	800141c <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <ov7670_init+0x84>)
 80009de:	f003 f821 	bl	8003a24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f000 fd1a 	bl	800141c <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	2012      	movs	r0, #18
 80009ec:	f000 f8c6 	bl	8000b7c <ov7670_write>
  HAL_Delay(30);
 80009f0:	201e      	movs	r0, #30
 80009f2:	f000 fd13 	bl	800141c <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	200b      	movs	r0, #11
 80009fe:	f000 f8dd 	bl	8000bbc <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000a02:	7d3b      	ldrb	r3, [r7, #20]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <ov7670_init+0x88>)
 8000a08:	f004 ff8a 	bl	8005920 <iprintf>


  return RET_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001d0 	.word	0x200001d0
 8000a1c:	200001d4 	.word	0x200001d4
 8000a20:	200001d8 	.word	0x200001d8
 8000a24:	200001dc 	.word	0x200001dc
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	08006854 	.word	0x08006854

08000a30 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000a38:	f000 f858 	bl	8000aec <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	2012      	movs	r0, #18
 8000a40:	f000 f89c 	bl	8000b7c <ov7670_write>
  HAL_Delay(30);
 8000a44:	201e      	movs	r0, #30
 8000a46:	f000 fce9 	bl	800141c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e012      	b.n	8000a76 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <ov7670_config+0x5c>)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <ov7670_config+0x5c>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	440b      	add	r3, r1
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4610      	mov	r0, r2
 8000a66:	f000 f889 	bl	8000b7c <ov7670_write>
    HAL_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fcd6 	bl	800141c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <ov7670_config+0x5c>)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000a7e:	2bff      	cmp	r3, #255	; 0xff
 8000a80:	d1e6      	bne.n	8000a50 <ov7670_config+0x20>
  }
  return RET_OK;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800686c 	.word	0x0800686c

08000a90 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8000a9a:	f000 f827 	bl	8000aec <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10b      	bne.n	8000abc <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <ov7670_startCap+0x54>)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <ov7670_startCap+0x58>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f000 fde7 	bl	8001688 <HAL_DCMI_Start_DMA>
 8000aba:	e00d      	b.n	8000ad8 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10a      	bne.n	8000ad8 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <ov7670_startCap+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <ov7670_startCap+0x58>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	f000 fdd8 	bl	8001688 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001dc 	.word	0x200001dc
 8000ae8:	200001d0 	.word	0x200001d0

08000aec <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <ov7670_stopCap+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fe67 	bl	80017c8 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001d0 	.word	0x200001d0

08000b04 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_DCMI_FrameEventCallback+0x54>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <HAL_DCMI_FrameEventCallback+0x1c>
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_DCMI_FrameEventCallback+0x54>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_DCMI_FrameEventCallback+0x58>)
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3328      	adds	r3, #40	; 0x28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b3c:	f001 f8fa 	bl	8001d34 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_DCMI_FrameEventCallback+0x58>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_DCMI_FrameEventCallback+0x58>)
 8000b48:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_DCMI_FrameEventCallback+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001e0 	.word	0x200001e0
 8000b5c:	200001e8 	.word	0x200001e8
 8000b60:	200001dc 	.word	0x200001dc
 8000b64:	200001e4 	.word	0x200001e4

08000b68 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <ov7670_write+0x3c>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2142      	movs	r1, #66	; 0x42
 8000ba4:	f003 fbc0 	bl	8004328 <HAL_I2C_Mem_Write>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001d8 	.word	0x200001d8

08000bbc <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <ov7670_read+0x48>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	1dfa      	adds	r2, r7, #7
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2142      	movs	r1, #66	; 0x42
 8000bd6:	f003 f883 	bl	8003ce0 <HAL_I2C_Master_Transmit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <ov7670_read+0x48>)
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	2142      	movs	r1, #66	; 0x42
 8000bec:	f003 f976 	bl	8003edc <HAL_I2C_Master_Receive>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001d8 	.word	0x200001d8

08000c08 <Lcd_Write_Index>:
    uint32_t i;
    for(i = 0; i < delayTime; i++);
}


void Lcd_Write_Index(uint16_t cmd) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	LCD_REG = cmd;
 8000c12:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	8013      	strh	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <Lcd_Write_Data>:

void Lcd_Write_Data(uint16_t data) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]
	LCD_DATA = data;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <Lcd_Write_Data+0x1c>)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	8013      	strh	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	60020000 	.word	0x60020000

08000c48 <Lcd_Write_Reg>:

void Lcd_Write_Reg(uint16_t reg,uint16_t value)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	80fb      	strh	r3, [r7, #6]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80bb      	strh	r3, [r7, #4]
	LCD_REG = reg;
 8000c58:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	8013      	strh	r3, [r2, #0]
	LCD_DATA = value;
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <Lcd_Write_Reg+0x2c>)
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	8013      	strh	r3, [r2, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	60020000 	.word	0x60020000

08000c78 <getDrawAddress>:


inline uint16_t* getDrawAddress()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return (uint16_t*)LCD_DATA_ADDR;
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <getDrawAddress+0x10>)
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	60020000 	.word	0x60020000

08000c8c <Set_Cursor>:


void Set_Cursor(uint16_t x_kur, uint16_t y_kur)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Reg(0x004e,x_kur);
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	204e      	movs	r0, #78	; 0x4e
 8000ca2:	f7ff ffd1 	bl	8000c48 <Lcd_Write_Reg>
	Lcd_Write_Reg(0x004f,y_kur);
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	204f      	movs	r0, #79	; 0x4f
 8000cac:	f7ff ffcc 	bl	8000c48 <Lcd_Write_Reg>
	Lcd_Write_Index(0x0022);
 8000cb0:	2022      	movs	r0, #34	; 0x22
 8000cb2:	f7ff ffa9 	bl	8000c08 <Lcd_Write_Index>

}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <Lcd_Clear>:
    // row address set
void Lcd_Clear(uint16_t color)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

	Set_Cursor(0,0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ffdc 	bl	8000c8c <Set_Cursor>

	  for(index=0;index < 76800;index++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e006      	b.n	8000ce8 <Lcd_Clear+0x2a>
	  {
		  Lcd_Write_Data(color);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffa3 	bl	8000c28 <Lcd_Write_Data>
	  for(index=0;index < 76800;index++)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000cee:	d3f4      	bcc.n	8000cda <Lcd_Clear+0x1c>
	  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <Init_SSD1289>:

void Init_SSD1289()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	 // Reset Ð´Ð¸ÑÐ¿Ð»ÐµÑ
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <Init_SSD1289+0x84>)
 8000d06:	f002 fe8d 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 fb86 	bl	800141c <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2108      	movs	r1, #8
 8000d14:	481a      	ldr	r0, [pc, #104]	; (8000d80 <Init_SSD1289+0x84>)
 8000d16:	f002 fe85 	bl	8003a24 <HAL_GPIO_WritePin>
    HAL_Delay(15);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 fb7e 	bl	800141c <HAL_Delay>

    //delay(10);

    Lcd_Write_Reg(0x0007,0x0021);
 8000d20:	2121      	movs	r1, #33	; 0x21
 8000d22:	2007      	movs	r0, #7
 8000d24:	f7ff ff90 	bl	8000c48 <Lcd_Write_Reg>
    Lcd_Write_Reg(0x0000,0x0001);
 8000d28:	2101      	movs	r1, #1
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ff8c 	bl	8000c48 <Lcd_Write_Reg>
    Lcd_Write_Reg(0x0007,0x0023);
 8000d30:	2123      	movs	r1, #35	; 0x23
 8000d32:	2007      	movs	r0, #7
 8000d34:	f7ff ff88 	bl	8000c48 <Lcd_Write_Reg>
    Lcd_Write_Reg(0x0010,0x0000);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f7ff ff84 	bl	8000c48 <Lcd_Write_Reg>

    HAL_Delay(300);
 8000d40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d44:	f000 fb6a 	bl	800141c <HAL_Delay>
    Lcd_Write_Reg(0x007,0x0033);
 8000d48:	2133      	movs	r1, #51	; 0x33
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f7ff ff7c 	bl	8000c48 <Lcd_Write_Reg>
    Lcd_Write_Reg(0x0011,0x6838);
 8000d50:	f646 0138 	movw	r1, #26680	; 0x6838
 8000d54:	2011      	movs	r0, #17
 8000d56:	f7ff ff77 	bl	8000c48 <Lcd_Write_Reg>
    Lcd_Write_Reg(0x0002,0x0600);
 8000d5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff ff72 	bl	8000c48 <Lcd_Write_Reg>

	  Lcd_Clear(white);
 8000d64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d68:	f7ff ffa9 	bl	8000cbe <Lcd_Clear>
	  Set_Work_Area(0, 0, 319, 239);
 8000d6c:	23ef      	movs	r3, #239	; 0xef
 8000d6e:	f240 123f 	movw	r2, #319	; 0x13f
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 f805 	bl	8000d84 <Set_Work_Area>

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <Set_Work_Area>:
	}
}
////////////////////////////////////
//ô-öèß îïðåäåëßåò ðàáî÷óþ îáëàñòü
void Set_Work_Area(uint16_t y1, uint16_t x1, uint16_t y2, uint16_t x2)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	4603      	mov	r3, r0
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	807b      	strh	r3, [r7, #2]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	803b      	strh	r3, [r7, #0]

	Lcd_Write_Reg(0x0044,((x2 << 8) | x1));
 8000da2:	883b      	ldrh	r3, [r7, #0]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	2044      	movs	r0, #68	; 0x44
 8000db6:	f7ff ff47 	bl	8000c48 <Lcd_Write_Reg>
	Lcd_Write_Reg(0x0045,y1);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2045      	movs	r0, #69	; 0x45
 8000dc0:	f7ff ff42 	bl	8000c48 <Lcd_Write_Reg>
	Lcd_Write_Reg(0x0046,y2);
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2046      	movs	r0, #70	; 0x46
 8000dca:	f7ff ff3d 	bl	8000c48 <Lcd_Write_Reg>
	Set_Cursor(x1, y1);
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff59 	bl	8000c8c <Set_Cursor>
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 fbee 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <HAL_DCMI_MspInit+0x170>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 80a1 	bne.w	8000f9a <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e60:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6353      	str	r3, [r2, #52]	; 0x34
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a3c      	ldr	r2, [pc, #240]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_DCMI_MspInit+0x174>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ec8:	2350      	movs	r3, #80	; 0x50
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ed8:	230d      	movs	r3, #13
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4832      	ldr	r0, [pc, #200]	; (8000fac <HAL_DCMI_MspInit+0x178>)
 8000ee4:	f002 fc02 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000ee8:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8000eec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000efa:	230d      	movs	r3, #13
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	482a      	ldr	r0, [pc, #168]	; (8000fb0 <HAL_DCMI_MspInit+0x17c>)
 8000f06:	f002 fbf1 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f14:	2302      	movs	r3, #2
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f1c:	230d      	movs	r3, #13
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <HAL_DCMI_MspInit+0x180>)
 8000f28:	f002 fbe0 	bl	80036ec <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f2e:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <HAL_DCMI_MspInit+0x188>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f38:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f6e:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f70:	f000 fe32 	bl	8001bd8 <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 8000f7a:	f7ff fd0d 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_DCMI_MspInit+0x184>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	204e      	movs	r0, #78	; 0x4e
 8000f90:	f000 fb43 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f94:	204e      	movs	r0, #78	; 0x4e
 8000f96:	f000 fb5c 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	50050000 	.word	0x50050000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	200000cc 	.word	0x200000cc
 8000fbc:	40026428 	.word	0x40026428

08000fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_I2C_MspInit+0x84>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12c      	bne.n	800103c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ffe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <HAL_I2C_MspInit+0x8c>)
 800101c:	f002 fb66 	bl	80036ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_I2C_MspInit+0x88>)
 800102a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_I2C_MspInit+0x88>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005800 	.word	0x40005800
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_FSMC_MspInit+0x88>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d131      	bne.n	80010d0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_FSMC_MspInit+0x88>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_FSMC_MspInit+0x8c>)
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_FSMC_MspInit+0x8c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6393      	str	r3, [r2, #56]	; 0x38
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_FSMC_MspInit+0x8c>)
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800108e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001092:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010a0:	230c      	movs	r3, #12
 80010a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_FSMC_MspInit+0x90>)
 80010aa:	f002 fb1f 	bl	80036ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010ae:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80010b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010c0:	230c      	movs	r3, #12
 80010c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_FSMC_MspInit+0x94>)
 80010ca:	f002 fb0f 	bl	80036ec <HAL_GPIO_Init>
 80010ce:	e000      	b.n	80010d2 <HAL_FSMC_MspInit+0x82>
    return;
 80010d0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001ec 	.word	0x200001ec
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80010f0:	f7ff ffae 	bl	8001050 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f948 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA2_Stream1_IRQHandler+0x10>)
 8001156:	f000 fed7 	bl	8001f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000cc 	.word	0x200000cc

08001164 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DCMI_IRQHandler+0x10>)
 800116a:	f000 fb89 	bl	8001880 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000008c 	.word	0x2000008c

08001178 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800118a:	f3af 8000 	nop.w
 800118e:	4601      	mov	r1, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf0      	blt.n	800118a <_read+0x12>
	}

return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e009      	b.n	80011d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf1      	blt.n	80011c4 <_write+0x12>
	}
	return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_close>:

int _close(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	605a      	str	r2, [r3, #4]
	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_isatty>:

int _isatty(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f004 fb1a 	bl	80058bc <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20020000 	.word	0x20020000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	200001f0 	.word	0x200001f0
 80012bc:	20000208 	.word	0x20000208

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff ffd7 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f004 fad9 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f92d 	bl	8000574 <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800131c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001328:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 800132c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001330:	20000208 	.word	0x20000208

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f94f 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fd3a 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f967 	bl	800166e <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b8:	f000 f92f 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	200001f4 	.word	0x200001f4

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200001f4 	.word	0x200001f4

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_DCMI_Start_DMA+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e086      	b.n	80017b6 <HAL_DCMI_Start_DMA+0x12e>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0202 	bic.w	r2, r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_DCMI_Start_DMA+0x138>)
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <HAL_DCMI_Start_DMA+0x13c>)
 80016f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	2200      	movs	r2, #0
 80016fe:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001712:	d20a      	bcs.n	800172a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3328      	adds	r3, #40	; 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	f000 fb06 	bl	8001d34 <HAL_DMA_Start_IT>
 8001728:	e038      	b.n	800179c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <HAL_DCMI_Start_DMA+0x138>)
 8001730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001744:	e009      	b.n	800175a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	085a      	lsrs	r2, r3, #1
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	005a      	lsls	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d2f0      	bcs.n	8001746 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	1e9a      	subs	r2, r3, #2
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3328      	adds	r3, #40	; 0x28
 800178c:	4619      	mov	r1, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	f000 fe20 	bl	80023dc <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080019a5 	.word	0x080019a5
 80017c4:	08001acf 	.word	0x08001acf

080017c8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_DCMI_Stop+0xb0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <HAL_DCMI_Stop+0xb4>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_DCMI_Stop+0x2a>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e03e      	b.n	8001870 <HAL_DCMI_Stop+0xa8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2202      	movs	r2, #2
 80017fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d108      	bne.n	800182e <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	f043 0220 	orr.w	r2, r3, #32
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	73fb      	strb	r3, [r7, #15]
      break;
 800182c:	e006      	b.n	800183c <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ea      	bne.n	8001812 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800184a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fac7 	bl	8001de4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	92492493 	.word	0x92492493

08001880 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2204      	movs	r2, #4
 80018b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <HAL_DCMI_IRQHandler+0xf8>)
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fafe 	bl	8001ec4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2202      	movs	r2, #2
 80018d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_DCMI_IRQHandler+0xf8>)
 80018f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fae2 	bl	8001ec4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f83c 	bl	8001990 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2208      	movs	r2, #8
 8001928:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff f91c 	bl	8000b68 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 021e 	bic.w	r2, r2, #30
 8001956:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff f8cb 	bl	8000b04 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	08001acf 	.word	0x08001acf

0800197c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d043      	beq.n	8001a46 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ca:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d118      	bne.n	8001a0a <DCMI_DMAXferCplt+0x66>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	00da      	lsls	r2, r3, #3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	f001 fe37 	bl	800366c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
 8001a08:	e044      	b.n	8001a94 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	00da      	lsls	r2, r3, #3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	2201      	movs	r2, #1
 8001a34:	4619      	mov	r1, r3
 8001a36:	f001 fe19 	bl	800366c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
 8001a44:	e026      	b.n	8001a94 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	e017      	b.n	8001a94 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	0099      	lsls	r1, r3, #2
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	440a      	add	r2, r1
 8001a8a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d112      	bne.n	8001ac6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d003      	beq.n	8001aee <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff ff44 	bl	800197c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e05f      	b.n	8001bce <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff f986 	bl	8000e34 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff f983 	bl	8000e34 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b44:	f023 0308 	bic.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b5e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b6a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b76:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d112      	bne.n	8001bae <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7f1b      	ldrb	r3, [r3, #28]
 8001b8c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7f5b      	ldrb	r3, [r3, #29]
 8001b92:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b94:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7f9b      	ldrb	r3, [r3, #30]
 8001b9a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001b9c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7fdb      	ldrb	r3, [r3, #31]
 8001ba4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001baa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001bac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 021e 	orr.w	r2, r2, #30
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fc0e 	bl	8001404 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e099      	b.n	8001d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	e00f      	b.n	8001c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c16:	f7ff fbf5 	bl	8001404 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d908      	bls.n	8001c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e078      	b.n	8001d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e8      	bne.n	8001c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_DMA_Init+0x158>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f023 0307 	bic.w	r3, r3, #7
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d117      	bne.n	8001cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00e      	beq.n	8001cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fb01 	bl	80022e4 <DMA_CheckFifoParam>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e016      	b.n	8001d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fab8 	bl	8002278 <DMA_CalcBaseAndBitshift>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	223f      	movs	r2, #63	; 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	f010803f 	.word	0xf010803f

08001d34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_DMA_Start_IT+0x26>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e040      	b.n	8001ddc <HAL_DMA_Start_IT+0xa8>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12f      	bne.n	8001dce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fa4a 	bl	800221c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	223f      	movs	r2, #63	; 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0216 	orr.w	r2, r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0208 	orr.w	r2, r2, #8
 8001dba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e005      	b.n	8001dda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001df2:	f7ff fb07 	bl	8001404 <HAL_GetTick>
 8001df6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e052      	b.n	8001ebc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0216 	bic.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_DMA_Abort+0x62>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e66:	e013      	b.n	8001e90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e68:	f7ff facc 	bl	8001404 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d90c      	bls.n	8001e90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e015      	b.n	8001ebc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e4      	bne.n	8001e68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	223f      	movs	r2, #63	; 0x3f
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00c      	b.n	8001efc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f14:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_DMA_IRQHandler+0x248>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a8e      	ldr	r2, [pc, #568]	; (8002154 <HAL_DMA_IRQHandler+0x24c>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0a9b      	lsrs	r3, r3, #10
 8001f20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	2208      	movs	r2, #8
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01a      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2208      	movs	r2, #8
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2201      	movs	r2, #1
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2204      	movs	r2, #4
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2204      	movs	r2, #4
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0204 	orr.w	r2, r3, #4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d043      	beq.n	8002078 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03c      	beq.n	8002078 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2210      	movs	r2, #16
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d018      	beq.n	800204a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d108      	bne.n	8002038 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d024      	beq.n	8002078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
 8002036:	e01f      	b.n	8002078 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
 8002048:	e016      	b.n	8002078 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0208 	bic.w	r2, r2, #8
 8002066:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2220      	movs	r2, #32
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 808f 	beq.w	80021a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8087 	beq.w	80021a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2220      	movs	r2, #32
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d136      	bne.n	8002120 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0216 	bic.w	r2, r2, #22
 80020c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_DMA_IRQHandler+0x1da>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0208 	bic.w	r2, r2, #8
 80020f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	223f      	movs	r2, #63	; 0x3f
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002112:	2b00      	cmp	r3, #0
 8002114:	d07e      	beq.n	8002214 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
        }
        return;
 800211e:	e079      	b.n	8002214 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01d      	beq.n	800216a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10d      	bne.n	8002158 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	2b00      	cmp	r3, #0
 8002142:	d031      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
 800214c:	e02c      	b.n	80021a8 <HAL_DMA_IRQHandler+0x2a0>
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e01e      	b.n	80021a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10f      	bne.n	8002198 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0210 	bic.w	r2, r2, #16
 8002186:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d032      	beq.n	8002216 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2205      	movs	r2, #5
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d307      	bcc.n	80021f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f2      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x2cc>
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
 8002212:	e000      	b.n	8002216 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002214:	bf00      	nop
    }
  }
}
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002238:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d108      	bne.n	800225c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800225a:	e007      	b.n	800226c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	60da      	str	r2, [r3, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3b10      	subs	r3, #16
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <DMA_CalcBaseAndBitshift+0x64>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d909      	bls.n	80022ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	659a      	str	r2, [r3, #88]	; 0x58
 80022b8:	e007      	b.n	80022ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	aaaaaaab 	.word	0xaaaaaaab
 80022e0:	080068e0 	.word	0x080068e0

080022e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11f      	bne.n	800233e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d856      	bhi.n	80023b2 <DMA_CheckFifoParam+0xce>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <DMA_CheckFifoParam+0x28>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	0800231d 	.word	0x0800231d
 8002310:	0800232f 	.word	0x0800232f
 8002314:	0800231d 	.word	0x0800231d
 8002318:	080023b3 	.word	0x080023b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d046      	beq.n	80023b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232c:	e043      	b.n	80023b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002336:	d140      	bne.n	80023ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233c:	e03d      	b.n	80023ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	d121      	bne.n	800238c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d837      	bhi.n	80023be <DMA_CheckFifoParam+0xda>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <DMA_CheckFifoParam+0x70>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	0800236b 	.word	0x0800236b
 800235c:	08002365 	.word	0x08002365
 8002360:	0800237d 	.word	0x0800237d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e030      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d025      	beq.n	80023c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e022      	b.n	80023c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800238a:	e01c      	b.n	80023c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d903      	bls.n	800239a <DMA_CheckFifoParam+0xb6>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d003      	beq.n	80023a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002398:	e018      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      break;
 800239e:	e015      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00e      	beq.n	80023ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e00b      	b.n	80023ca <DMA_CheckFifoParam+0xe6>
      break;
 80023b2:	bf00      	nop
 80023b4:	e00a      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;
 80023b6:	bf00      	nop
 80023b8:	e008      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;
 80023ba:	bf00      	nop
 80023bc:	e006      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
 80023c0:	e004      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e002      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;   
 80023c6:	bf00      	nop
 80023c8:	e000      	b.n	80023cc <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
    }
  } 
  
  return status; 
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	d106      	bne.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f001 b911 	b.w	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f001 b8ff 	b.w	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002432:	2302      	movs	r3, #2
 8002434:	f001 b8f7 	b.w	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	f041 80e5 	bne.w	8003618 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800246a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f001 f910 	bl	80036a0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b8d      	ldr	r3, [pc, #564]	; (80026bc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002488:	429a      	cmp	r2, r3
 800248a:	d960      	bls.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a8b      	ldr	r2, [pc, #556]	; (80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d057      	beq.n	8002546 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8a      	ldr	r2, [pc, #552]	; (80026c4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d050      	beq.n	8002542 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a88      	ldr	r2, [pc, #544]	; (80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d049      	beq.n	800253e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a87      	ldr	r2, [pc, #540]	; (80026cc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d042      	beq.n	800253a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a85      	ldr	r2, [pc, #532]	; (80026d0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d03a      	beq.n	8002534 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a84      	ldr	r2, [pc, #528]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d032      	beq.n	800252e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a82      	ldr	r2, [pc, #520]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02a      	beq.n	8002528 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a81      	ldr	r2, [pc, #516]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7f      	ldr	r2, [pc, #508]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01a      	beq.n	800251c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7e      	ldr	r2, [pc, #504]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d012      	beq.n	8002516 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00a      	beq.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7b      	ldr	r2, [pc, #492]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d102      	bne.n	800250a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002504:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002508:	e01e      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800250a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800250e:	e01b      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002514:	e018      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002516:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800251a:	e015      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800251c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002520:	e012      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002526:	e00f      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800252c:	e00c      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800252e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002532:	e009      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002538:	e006      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800253a:	2320      	movs	r3, #32
 800253c:	e004      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800253e:	2320      	movs	r3, #32
 8002540:	e002      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002542:	2320      	movs	r3, #32
 8002544:	e000      	b.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002546:	2320      	movs	r3, #32
 8002548:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800254a:	60d3      	str	r3, [r2, #12]
 800254c:	e14f      	b.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002556:	429a      	cmp	r2, r3
 8002558:	d960      	bls.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d057      	beq.n	8002614 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a56      	ldr	r2, [pc, #344]	; (80026c4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d050      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d049      	beq.n	800260c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a53      	ldr	r2, [pc, #332]	; (80026cc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d042      	beq.n	8002608 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03a      	beq.n	8002602 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a50      	ldr	r2, [pc, #320]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d032      	beq.n	80025fc <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d02a      	beq.n	80025f6 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01a      	beq.n	80025ea <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d012      	beq.n	80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00a      	beq.n	80025de <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d102      	bne.n	80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80025d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d6:	e01e      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025dc:	e01b      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025e2:	e018      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025e8:	e015      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ee:	e012      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f4:	e00f      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025fa:	e00c      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002600:	e009      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002606:	e006      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002608:	2320      	movs	r3, #32
 800260a:	e004      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800260c:	2320      	movs	r3, #32
 800260e:	e002      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002610:	2320      	movs	r3, #32
 8002612:	e000      	b.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002614:	2320      	movs	r3, #32
 8002616:	4a36      	ldr	r2, [pc, #216]	; (80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002618:	6093      	str	r3, [r2, #8]
 800261a:	e0e8      	b.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002624:	429a      	cmp	r2, r3
 8002626:	f240 8082 	bls.w	800272e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d078      	beq.n	8002726 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d071      	beq.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d06a      	beq.n	800271e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d063      	beq.n	800271a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05b      	beq.n	8002714 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d053      	beq.n	800270e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04b      	beq.n	8002708 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d043      	beq.n	8002702 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d03b      	beq.n	80026fc <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d012      	beq.n	80026b4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00a      	beq.n	80026ae <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d102      	bne.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80026a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026a6:	e03f      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026ac:	e03c      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026b2:	e039      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026b8:	e036      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026ba:	bf00      	nop
 80026bc:	40026458 	.word	0x40026458
 80026c0:	40026010 	.word	0x40026010
 80026c4:	40026410 	.word	0x40026410
 80026c8:	40026070 	.word	0x40026070
 80026cc:	40026470 	.word	0x40026470
 80026d0:	40026028 	.word	0x40026028
 80026d4:	40026428 	.word	0x40026428
 80026d8:	40026088 	.word	0x40026088
 80026dc:	40026488 	.word	0x40026488
 80026e0:	40026040 	.word	0x40026040
 80026e4:	40026440 	.word	0x40026440
 80026e8:	400260a0 	.word	0x400260a0
 80026ec:	400264a0 	.word	0x400264a0
 80026f0:	40026400 	.word	0x40026400
 80026f4:	400260b8 	.word	0x400260b8
 80026f8:	40026058 	.word	0x40026058
 80026fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002700:	e012      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002706:	e00f      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800270c:	e00c      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800270e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002712:	e009      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002714:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002718:	e006      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800271a:	2320      	movs	r3, #32
 800271c:	e004      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800271e:	2320      	movs	r3, #32
 8002720:	e002      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002722:	2320      	movs	r3, #32
 8002724:	e000      	b.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002726:	2320      	movs	r3, #32
 8002728:	4a8c      	ldr	r2, [pc, #560]	; (800295c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e05f      	b.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a8b      	ldr	r2, [pc, #556]	; (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d057      	beq.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a89      	ldr	r2, [pc, #548]	; (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d050      	beq.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a88      	ldr	r2, [pc, #544]	; (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d049      	beq.n	80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a86      	ldr	r2, [pc, #536]	; (800296c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d042      	beq.n	80027dc <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a85      	ldr	r2, [pc, #532]	; (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d03a      	beq.n	80027d6 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a83      	ldr	r2, [pc, #524]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d032      	beq.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a82      	ldr	r2, [pc, #520]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02a      	beq.n	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a80      	ldr	r2, [pc, #512]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7f      	ldr	r2, [pc, #508]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01a      	beq.n	80027be <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a7d      	ldr	r2, [pc, #500]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d012      	beq.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00a      	beq.n	80027b2 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d102      	bne.n	80027ac <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80027a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027aa:	e01e      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027b0:	e01b      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027b6:	e018      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027bc:	e015      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027c2:	e012      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027c8:	e00f      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ce:	e00c      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d4:	e009      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027da:	e006      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027dc:	2320      	movs	r3, #32
 80027de:	e004      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027e0:	2320      	movs	r3, #32
 80027e2:	e002      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027e4:	2320      	movs	r3, #32
 80027e6:	e000      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027e8:	2320      	movs	r3, #32
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80027ec:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d960      	bls.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d057      	beq.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a56      	ldr	r2, [pc, #344]	; (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d050      	beq.n	80028b0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a55      	ldr	r2, [pc, #340]	; (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d049      	beq.n	80028ac <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a53      	ldr	r2, [pc, #332]	; (800296c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d042      	beq.n	80028a8 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03a      	beq.n	80028a2 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d032      	beq.n	800289c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d02a      	beq.n	8002896 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4d      	ldr	r2, [pc, #308]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d022      	beq.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01a      	beq.n	800288a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d012      	beq.n	8002884 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a49      	ldr	r2, [pc, #292]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00a      	beq.n	800287e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002872:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002876:	e01e      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800287c:	e01b      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800287e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002882:	e018      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002888:	e015      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800288a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800288e:	e012      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002894:	e00f      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	e00c      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800289c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a0:	e009      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a6:	e006      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028a8:	2310      	movs	r3, #16
 80028aa:	e004      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028ac:	2310      	movs	r3, #16
 80028ae:	e002      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028b0:	2310      	movs	r3, #16
 80028b2:	e000      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028b4:	2310      	movs	r3, #16
 80028b6:	4a37      	ldr	r2, [pc, #220]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80028b8:	60d3      	str	r3, [r2, #12]
 80028ba:	e14f      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f240 8082 	bls.w	80029ce <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d078      	beq.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d071      	beq.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d06a      	beq.n	80029be <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d063      	beq.n	80029ba <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d05b      	beq.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d053      	beq.n	80029ae <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04b      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d043      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d03b      	beq.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d012      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00a      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002942:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002946:	e03f      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800294c:	e03c      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800294e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002952:	e039      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002958:	e036      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800295a:	bf00      	nop
 800295c:	40026000 	.word	0x40026000
 8002960:	40026010 	.word	0x40026010
 8002964:	40026410 	.word	0x40026410
 8002968:	40026070 	.word	0x40026070
 800296c:	40026470 	.word	0x40026470
 8002970:	40026028 	.word	0x40026028
 8002974:	40026428 	.word	0x40026428
 8002978:	40026088 	.word	0x40026088
 800297c:	40026488 	.word	0x40026488
 8002980:	40026040 	.word	0x40026040
 8002984:	40026440 	.word	0x40026440
 8002988:	400260a0 	.word	0x400260a0
 800298c:	400264a0 	.word	0x400264a0
 8002990:	40026458 	.word	0x40026458
 8002994:	40026400 	.word	0x40026400
 8002998:	400260b8 	.word	0x400260b8
 800299c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029a0:	e012      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a6:	e00f      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	e00c      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b2:	e009      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b8:	e006      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029ba:	2310      	movs	r3, #16
 80029bc:	e004      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029be:	2310      	movs	r3, #16
 80029c0:	e002      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029c2:	2310      	movs	r3, #16
 80029c4:	e000      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029c6:	2310      	movs	r3, #16
 80029c8:	4a8c      	ldr	r2, [pc, #560]	; (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	e0c6      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d960      	bls.n	8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a89      	ldr	r2, [pc, #548]	; (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d057      	beq.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a87      	ldr	r2, [pc, #540]	; (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d050      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a86      	ldr	r2, [pc, #536]	; (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d049      	beq.n	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a84      	ldr	r2, [pc, #528]	; (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d042      	beq.n	8002a88 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d03a      	beq.n	8002a82 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a81      	ldr	r2, [pc, #516]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d032      	beq.n	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02a      	beq.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a7e      	ldr	r2, [pc, #504]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d022      	beq.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d01a      	beq.n	8002a6a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7b      	ldr	r2, [pc, #492]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d012      	beq.n	8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00a      	beq.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d102      	bne.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a56:	e01e      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a5c:	e01b      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a62:	e018      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a68:	e015      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a6e:	e012      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a74:	e00f      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7a:	e00c      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a80:	e009      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a86:	e006      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a88:	2310      	movs	r3, #16
 8002a8a:	e004      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	e002      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a90:	2310      	movs	r3, #16
 8002a92:	e000      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a94:	2310      	movs	r3, #16
 8002a96:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e05f      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d057      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d050      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d049      	beq.n	8002b4e <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d042      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d03a      	beq.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d032      	beq.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02a      	beq.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01a      	beq.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d012      	beq.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a49      	ldr	r2, [pc, #292]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00a      	beq.n	8002b20 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a48      	ldr	r2, [pc, #288]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002b14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b18:	e01e      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b1e:	e01b      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b24:	e018      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b2a:	e015      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b30:	e012      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	e00f      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3c:	e00c      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b42:	e009      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b48:	e006      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	e004      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b4e:	2310      	movs	r3, #16
 8002b50:	e002      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b52:	2310      	movs	r3, #16
 8002b54:	e000      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b56:	2310      	movs	r3, #16
 8002b58:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002b5a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f240 8082 	bls.w	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d078      	beq.n	8002c66 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d071      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d06a      	beq.n	8002c5e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d063      	beq.n	8002c5a <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d05b      	beq.n	8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d053      	beq.n	8002c4e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04b      	beq.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d043      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d012      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00a      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d102      	bne.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002be2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002be6:	e03f      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	e03c      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002bee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bf2:	e039      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002bf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bf8:	e036      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002bfa:	bf00      	nop
 8002bfc:	40026400 	.word	0x40026400
 8002c00:	40026058 	.word	0x40026058
 8002c04:	40026010 	.word	0x40026010
 8002c08:	40026410 	.word	0x40026410
 8002c0c:	40026070 	.word	0x40026070
 8002c10:	40026470 	.word	0x40026470
 8002c14:	40026028 	.word	0x40026028
 8002c18:	40026428 	.word	0x40026428
 8002c1c:	40026088 	.word	0x40026088
 8002c20:	40026488 	.word	0x40026488
 8002c24:	40026040 	.word	0x40026040
 8002c28:	40026440 	.word	0x40026440
 8002c2c:	400260a0 	.word	0x400260a0
 8002c30:	400264a0 	.word	0x400264a0
 8002c34:	40026000 	.word	0x40026000
 8002c38:	40026458 	.word	0x40026458
 8002c3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c40:	e012      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c46:	e00f      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4c:	e00c      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c52:	e009      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	e006      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e004      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	e002      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e000      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c66:	2308      	movs	r3, #8
 8002c68:	4a8c      	ldr	r2, [pc, #560]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002c6a:	60d3      	str	r3, [r2, #12]
 8002c6c:	e14e      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d960      	bls.n	8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a89      	ldr	r2, [pc, #548]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d057      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a87      	ldr	r2, [pc, #540]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d050      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a86      	ldr	r2, [pc, #536]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d049      	beq.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a84      	ldr	r2, [pc, #528]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d042      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a83      	ldr	r2, [pc, #524]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d03a      	beq.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a81      	ldr	r2, [pc, #516]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d032      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02a      	beq.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7e      	ldr	r2, [pc, #504]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7d      	ldr	r2, [pc, #500]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01a      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7b      	ldr	r2, [pc, #492]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d012      	beq.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00a      	beq.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a78      	ldr	r2, [pc, #480]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d102      	bne.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cf6:	e01e      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfc:	e01b      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d02:	e018      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d08:	e015      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d0e:	e012      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d14:	e00f      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d1a:	e00c      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d20:	e009      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d26:	e006      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	e004      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	e002      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d30:	2308      	movs	r3, #8
 8002d32:	e000      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d34:	2308      	movs	r3, #8
 8002d36:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	e0e7      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b64      	ldr	r3, [pc, #400]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d960      	bls.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a55      	ldr	r2, [pc, #340]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d057      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d050      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d049      	beq.n	8002dfa <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d042      	beq.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d03a      	beq.n	8002df0 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d032      	beq.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02a      	beq.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01a      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d012      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a46      	ldr	r2, [pc, #280]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00a      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a45      	ldr	r2, [pc, #276]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002dc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dc4:	e01e      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dca:	e01b      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dd0:	e018      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dd6:	e015      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ddc:	e012      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de2:	e00f      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de8:	e00c      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dee:	e009      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df4:	e006      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002df6:	2308      	movs	r3, #8
 8002df8:	e004      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	e002      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e000      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e02:	2308      	movs	r3, #8
 8002e04:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002e06:	60d3      	str	r3, [r2, #12]
 8002e08:	e080      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d078      	beq.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d071      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d06a      	beq.n	8002efe <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d063      	beq.n	8002efa <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d05b      	beq.n	8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d053      	beq.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04b      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d043      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d012      	beq.n	8002e94 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00a      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d102      	bne.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002e82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e86:	e03f      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8c:	e03c      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002e8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e92:	e039      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002e94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e98:	e036      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002e9a:	bf00      	nop
 8002e9c:	40026400 	.word	0x40026400
 8002ea0:	400260b8 	.word	0x400260b8
 8002ea4:	40026010 	.word	0x40026010
 8002ea8:	40026410 	.word	0x40026410
 8002eac:	40026070 	.word	0x40026070
 8002eb0:	40026470 	.word	0x40026470
 8002eb4:	40026028 	.word	0x40026028
 8002eb8:	40026428 	.word	0x40026428
 8002ebc:	40026088 	.word	0x40026088
 8002ec0:	40026488 	.word	0x40026488
 8002ec4:	40026040 	.word	0x40026040
 8002ec8:	40026440 	.word	0x40026440
 8002ecc:	400260a0 	.word	0x400260a0
 8002ed0:	400264a0 	.word	0x400264a0
 8002ed4:	40026058 	.word	0x40026058
 8002ed8:	40026000 	.word	0x40026000
 8002edc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ee0:	e012      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee6:	e00f      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eec:	e00c      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef2:	e009      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef8:	e006      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002efa:	2308      	movs	r3, #8
 8002efc:	e004      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002efe:	2308      	movs	r3, #8
 8002f00:	e002      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e000      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f06:	2308      	movs	r3, #8
 8002f08:	4a8a      	ldr	r2, [pc, #552]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002f0a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d960      	bls.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a87      	ldr	r2, [pc, #540]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d057      	beq.n	8002fd2 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a86      	ldr	r2, [pc, #536]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d050      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a84      	ldr	r2, [pc, #528]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d049      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a83      	ldr	r2, [pc, #524]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d042      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a81      	ldr	r2, [pc, #516]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03a      	beq.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d032      	beq.n	8002fba <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7e      	ldr	r2, [pc, #504]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02a      	beq.n	8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7d      	ldr	r2, [pc, #500]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01a      	beq.n	8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7a      	ldr	r2, [pc, #488]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d012      	beq.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a78      	ldr	r2, [pc, #480]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00a      	beq.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f94:	e01e      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9a:	e01b      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa0:	e018      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa6:	e015      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fac:	e012      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	e00f      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb8:	e00c      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	e009      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc4:	e006      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e004      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e002      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	4a65      	ldr	r2, [pc, #404]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e150      	b.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d960      	bls.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d057      	beq.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d050      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a51      	ldr	r2, [pc, #324]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d049      	beq.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d042      	beq.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4e      	ldr	r2, [pc, #312]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03a      	beq.n	800308e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d032      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4b      	ldr	r2, [pc, #300]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d02a      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01a      	beq.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d012      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00a      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d102      	bne.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800305e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003062:	e01e      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003068:	e01b      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800306a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800306e:	e018      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003070:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003074:	e015      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003076:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800307a:	e012      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800307c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003080:	e00f      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003086:	e00c      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308c:	e009      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800308e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003092:	e006      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003094:	2304      	movs	r3, #4
 8003096:	e004      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003098:	2304      	movs	r3, #4
 800309a:	e002      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800309c:	2304      	movs	r3, #4
 800309e:	e000      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030a0:	2304      	movs	r3, #4
 80030a2:	4a32      	ldr	r2, [pc, #200]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	e0e9      	b.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f240 8083 	bls.w	80031bc <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a20      	ldr	r2, [pc, #128]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d079      	beq.n	80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d072      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d06b      	beq.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d064      	beq.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d05c      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d054      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04c      	beq.n	8003196 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d044      	beq.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03c      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a12      	ldr	r2, [pc, #72]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d034      	beq.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d124      	bne.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800312e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003132:	e040      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003134:	40026000 	.word	0x40026000
 8003138:	40026458 	.word	0x40026458
 800313c:	40026010 	.word	0x40026010
 8003140:	40026410 	.word	0x40026410
 8003144:	40026070 	.word	0x40026070
 8003148:	40026470 	.word	0x40026470
 800314c:	40026028 	.word	0x40026028
 8003150:	40026428 	.word	0x40026428
 8003154:	40026088 	.word	0x40026088
 8003158:	40026488 	.word	0x40026488
 800315c:	40026040 	.word	0x40026040
 8003160:	40026440 	.word	0x40026440
 8003164:	400260a0 	.word	0x400260a0
 8003168:	400264a0 	.word	0x400264a0
 800316c:	40026400 	.word	0x40026400
 8003170:	400260b8 	.word	0x400260b8
 8003174:	40026058 	.word	0x40026058
 8003178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317c:	e01b      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800317e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003182:	e018      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003188:	e015      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800318a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800318e:	e012      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003194:	e00f      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800319a:	e00c      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800319c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a0:	e009      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	e006      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e002      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e000      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031b4:	2304      	movs	r3, #4
 80031b6:	4a8b      	ldr	r2, [pc, #556]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80031b8:	60d3      	str	r3, [r2, #12]
 80031ba:	e05f      	b.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a89      	ldr	r2, [pc, #548]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d057      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a88      	ldr	r2, [pc, #544]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d050      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a86      	ldr	r2, [pc, #536]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d049      	beq.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a85      	ldr	r2, [pc, #532]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d042      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a83      	ldr	r2, [pc, #524]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03a      	beq.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a82      	ldr	r2, [pc, #520]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d032      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02a      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01a      	beq.n	800324c <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d012      	beq.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7a      	ldr	r2, [pc, #488]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00a      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a79      	ldr	r2, [pc, #484]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d102      	bne.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003238:	e01e      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800323a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323e:	e01b      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003240:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003244:	e018      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003246:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800324a:	e015      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800324c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003250:	e012      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003256:	e00f      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325c:	e00c      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	e009      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003268:	e006      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800326a:	2304      	movs	r3, #4
 800326c:	e004      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800326e:	2304      	movs	r3, #4
 8003270:	e002      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003272:	2304      	movs	r3, #4
 8003274:	e000      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003276:	2304      	movs	r3, #4
 8003278:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800327a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d95c      	bls.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a56      	ldr	r2, [pc, #344]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d053      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04c      	beq.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a53      	ldr	r2, [pc, #332]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d045      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d03e      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a50      	ldr	r2, [pc, #320]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d037      	beq.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d030      	beq.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4d      	ldr	r2, [pc, #308]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d029      	beq.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01a      	beq.n	8003318 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d012      	beq.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00a      	beq.n	800330c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a46      	ldr	r2, [pc, #280]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003304:	e01a      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330a:	e017      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800330c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003310:	e014      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003316:	e011      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331c:	e00e      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	e00c      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003322:	2340      	movs	r3, #64	; 0x40
 8003324:	e00a      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003326:	2340      	movs	r3, #64	; 0x40
 8003328:	e008      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800332a:	2340      	movs	r3, #64	; 0x40
 800332c:	e006      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800332e:	2301      	movs	r3, #1
 8003330:	e004      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003332:	2301      	movs	r3, #1
 8003334:	e002      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800333a:	2301      	movs	r3, #1
 800333c:	4a37      	ldr	r2, [pc, #220]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800333e:	60d3      	str	r3, [r2, #12]
 8003340:	e141      	b.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800334a:	429a      	cmp	r2, r3
 800334c:	d97c      	bls.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d073      	beq.n	8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a23      	ldr	r2, [pc, #140]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d06c      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d065      	beq.n	8003438 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d05e      	beq.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d057      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d050      	beq.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d049      	beq.n	8003428 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1a      	ldr	r2, [pc, #104]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d042      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a19      	ldr	r2, [pc, #100]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01a      	beq.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d012      	beq.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00a      	beq.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d102      	bne.n	80033cc <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80033c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ca:	e03a      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033d0:	e037      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d6:	e034      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033dc:	e031      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e2:	e02e      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033e4:	40026000 	.word	0x40026000
 80033e8:	40026010 	.word	0x40026010
 80033ec:	40026410 	.word	0x40026410
 80033f0:	40026070 	.word	0x40026070
 80033f4:	40026470 	.word	0x40026470
 80033f8:	40026028 	.word	0x40026028
 80033fc:	40026428 	.word	0x40026428
 8003400:	40026088 	.word	0x40026088
 8003404:	40026488 	.word	0x40026488
 8003408:	40026040 	.word	0x40026040
 800340c:	40026440 	.word	0x40026440
 8003410:	400260a0 	.word	0x400260a0
 8003414:	400264a0 	.word	0x400264a0
 8003418:	40026458 	.word	0x40026458
 800341c:	40026400 	.word	0x40026400
 8003420:	400260b8 	.word	0x400260b8
 8003424:	2340      	movs	r3, #64	; 0x40
 8003426:	e00c      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	e00a      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800342c:	2340      	movs	r3, #64	; 0x40
 800342e:	e008      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	e006      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003434:	2301      	movs	r3, #1
 8003436:	e004      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003438:	2301      	movs	r3, #1
 800343a:	e002      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003440:	2301      	movs	r3, #1
 8003442:	4a7b      	ldr	r2, [pc, #492]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e0be      	b.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d95c      	bls.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a77      	ldr	r2, [pc, #476]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d053      	beq.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a76      	ldr	r2, [pc, #472]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04c      	beq.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a74      	ldr	r2, [pc, #464]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03e      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a71      	ldr	r2, [pc, #452]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d037      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a70      	ldr	r2, [pc, #448]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d030      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d029      	beq.n	80034ee <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6d      	ldr	r2, [pc, #436]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6b      	ldr	r2, [pc, #428]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01a      	beq.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d012      	beq.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00a      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a67      	ldr	r2, [pc, #412]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80034cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d0:	e01a      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d6:	e017      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034dc:	e014      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034e2:	e011      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034e8:	e00e      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034ea:	2340      	movs	r3, #64	; 0x40
 80034ec:	e00c      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	e00a      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034f2:	2340      	movs	r3, #64	; 0x40
 80034f4:	e008      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034f6:	2340      	movs	r3, #64	; 0x40
 80034f8:	e006      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e004      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034fe:	2301      	movs	r3, #1
 8003500:	e002      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003506:	2301      	movs	r3, #1
 8003508:	4a57      	ldr	r2, [pc, #348]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800350a:	60d3      	str	r3, [r2, #12]
 800350c:	e05b      	b.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a49      	ldr	r2, [pc, #292]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d053      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a47      	ldr	r2, [pc, #284]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04c      	beq.n	80035bc <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a46      	ldr	r2, [pc, #280]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d045      	beq.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a44      	ldr	r2, [pc, #272]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03e      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a43      	ldr	r2, [pc, #268]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d037      	beq.n	80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d030      	beq.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a40      	ldr	r2, [pc, #256]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d029      	beq.n	80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3e      	ldr	r2, [pc, #248]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3d      	ldr	r2, [pc, #244]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01a      	beq.n	800359e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d012      	beq.n	8003598 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3a      	ldr	r2, [pc, #232]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00a      	beq.n	8003592 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a38      	ldr	r2, [pc, #224]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d102      	bne.n	800358c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358a:	e01a      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800358c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003590:	e017      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003596:	e014      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800359c:	e011      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800359e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a2:	e00e      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035a4:	2340      	movs	r3, #64	; 0x40
 80035a6:	e00c      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035a8:	2340      	movs	r3, #64	; 0x40
 80035aa:	e00a      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	e008      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035b0:	2340      	movs	r3, #64	; 0x40
 80035b2:	e006      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e004      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e002      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80035c4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0216 	orr.w	r2, r2, #22
 80035d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e005      	b.n	8003624 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40026400 	.word	0x40026400
 8003634:	40026058 	.word	0x40026058
 8003638:	40026010 	.word	0x40026010
 800363c:	40026410 	.word	0x40026410
 8003640:	40026070 	.word	0x40026070
 8003644:	40026470 	.word	0x40026470
 8003648:	40026028 	.word	0x40026028
 800364c:	40026428 	.word	0x40026428
 8003650:	40026088 	.word	0x40026088
 8003654:	40026488 	.word	0x40026488
 8003658:	40026040 	.word	0x40026040
 800365c:	40026440 	.word	0x40026440
 8003660:	400260a0 	.word	0x400260a0
 8003664:	400264a0 	.word	0x400264a0
 8003668:	40026000 	.word	0x40026000

0800366c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	e003      	b.n	8003692 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d108      	bne.n	80036d0 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ce:	e007      	b.n	80036e0 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e16b      	b.n	80039e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	f040 815a 	bne.w	80039da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d005      	beq.n	800373e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	2b02      	cmp	r3, #2
 800373c:	d130      	bne.n	80037a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0201 	and.w	r2, r3, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d017      	beq.n	80037dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d123      	bne.n	8003830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80b4 	beq.w	80039da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a5f      	ldr	r2, [pc, #380]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_GPIO_Init+0x310>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <HAL_GPIO_Init+0x226>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a51      	ldr	r2, [pc, #324]	; (8003a04 <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x222>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a50      	ldr	r2, [pc, #320]	; (8003a08 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x21e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4f      	ldr	r2, [pc, #316]	; (8003a0c <HAL_GPIO_Init+0x320>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x21a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_GPIO_Init+0x324>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x216>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <HAL_GPIO_Init+0x328>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x212>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_GPIO_Init+0x32c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x20e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <HAL_GPIO_Init+0x330>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x20a>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e00e      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038f6:	2308      	movs	r3, #8
 80038f8:	e00c      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038fa:	2306      	movs	r3, #6
 80038fc:	e00a      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038fe:	2305      	movs	r3, #5
 8003900:	e008      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003902:	2304      	movs	r3, #4
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003906:	2303      	movs	r3, #3
 8003908:	e004      	b.n	8003914 <HAL_GPIO_Init+0x228>
 800390a:	2302      	movs	r3, #2
 800390c:	e002      	b.n	8003914 <HAL_GPIO_Init+0x228>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003912:	2300      	movs	r3, #0
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	f002 0203 	and.w	r2, r2, #3
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	4093      	lsls	r3, r2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003924:	4935      	ldr	r1, [pc, #212]	; (80039fc <HAL_GPIO_Init+0x310>)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003956:	4a32      	ldr	r2, [pc, #200]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_GPIO_Init+0x334>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039aa:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	f67f ae90 	bls.w	8003708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020c00 	.word	0x40020c00
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40021400 	.word	0x40021400
 8003a18:	40021800 	.word	0x40021800
 8003a1c:	40021c00 	.word	0x40021c00
 8003a20:	40013c00 	.word	0x40013c00

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a40:	e003      	b.n	8003a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	619a      	str	r2, [r3, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e12b      	b.n	8003cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fa9e 	bl	8000fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003abc:	f001 fdca 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a81      	ldr	r2, [pc, #516]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d807      	bhi.n	8003adc <HAL_I2C_Init+0x84>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a80      	ldr	r2, [pc, #512]	; (8003cd0 <HAL_I2C_Init+0x278>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e006      	b.n	8003aea <HAL_I2C_Init+0x92>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a7d      	ldr	r2, [pc, #500]	; (8003cd4 <HAL_I2C_Init+0x27c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0e7      	b.n	8003cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a78      	ldr	r2, [pc, #480]	; (8003cd8 <HAL_I2C_Init+0x280>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a6a      	ldr	r2, [pc, #424]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d802      	bhi.n	8003b2c <HAL_I2C_Init+0xd4>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	e009      	b.n	8003b40 <HAL_I2C_Init+0xe8>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	4a69      	ldr	r2, [pc, #420]	; (8003cdc <HAL_I2C_Init+0x284>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	3301      	adds	r3, #1
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	495c      	ldr	r1, [pc, #368]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	d819      	bhi.n	8003b94 <HAL_I2C_Init+0x13c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e59      	subs	r1, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b74:	400b      	ands	r3, r1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_I2C_Init+0x138>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1e59      	subs	r1, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8e:	e051      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003b90:	2304      	movs	r3, #4
 8003b92:	e04f      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <HAL_I2C_Init+0x168>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e58      	subs	r0, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e012      	b.n	8003be6 <HAL_I2C_Init+0x18e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	0099      	lsls	r1, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_I2C_Init+0x196>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e022      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10e      	bne.n	8003c14 <HAL_I2C_Init+0x1bc>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e58      	subs	r0, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	440b      	add	r3, r1
 8003c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	6809      	ldr	r1, [r1, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6911      	ldr	r1, [r2, #16]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	000186a0 	.word	0x000186a0
 8003cd0:	001e847f 	.word	0x001e847f
 8003cd4:	003d08ff 	.word	0x003d08ff
 8003cd8:	431bde83 	.word	0x431bde83
 8003cdc:	10624dd3 	.word	0x10624dd3

08003ce0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	461a      	mov	r2, r3
 8003cec:	460b      	mov	r3, r1
 8003cee:	817b      	strh	r3, [r7, #10]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7fd fb86 	bl	8001404 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	f040 80e0 	bne.w	8003ec8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2319      	movs	r3, #25
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4970      	ldr	r1, [pc, #448]	; (8003ed4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fde8 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0d3      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x50>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0cc      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d007      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2221      	movs	r2, #33	; 0x21
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2210      	movs	r2, #16
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	893a      	ldrh	r2, [r7, #8]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a50      	ldr	r2, [pc, #320]	; (8003ed8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fbbc 	bl	800451c <I2C_MasterRequestWrite>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e08d      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dc4:	e066      	b.n	8003e94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fe62 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_I2C_Master_Transmit+0x188>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	6a39      	ldr	r1, [r7, #32]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fe52 	bl	8004b16 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d107      	bne.n	8003e90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e01a      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d194      	bne.n	8003dc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	00100002 	.word	0x00100002
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	; 0x30
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	460b      	mov	r3, r1
 8003eea:	817b      	strh	r3, [r7, #10]
 8003eec:	4613      	mov	r3, r2
 8003eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef0:	f7fd fa88 	bl	8001404 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	f040 820b 	bne.w	800431a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2319      	movs	r3, #25
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	497c      	ldr	r1, [pc, #496]	; (8004100 <HAL_I2C_Master_Receive+0x224>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fcea 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e1fe      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_I2C_Master_Receive+0x50>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e1f7      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d007      	beq.n	8003f52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2222      	movs	r2, #34	; 0x22
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	893a      	ldrh	r2, [r7, #8]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a5c      	ldr	r2, [pc, #368]	; (8004104 <HAL_I2C_Master_Receive+0x228>)
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fb40 	bl	8004620 <I2C_MasterRequestRead>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1b8      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e18c      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d11b      	bne.n	800401a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e16c      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	e14c      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004080:	e138      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b03      	cmp	r3, #3
 8004088:	f200 80f1 	bhi.w	800426e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	2b01      	cmp	r3, #1
 8004092:	d123      	bne.n	80040dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fd7d 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e139      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040da:	e10b      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d14e      	bne.n	8004182 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <HAL_I2C_Master_Receive+0x22c>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fbfa 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e10e      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
 80040fe:	bf00      	nop
 8004100:	00100002 	.word	0x00100002
 8004104:	ffff0000 	.word	0xffff0000
 8004108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004180:	e0b8      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	2200      	movs	r2, #0
 800418a:	4966      	ldr	r1, [pc, #408]	; (8004324 <HAL_I2C_Master_Receive+0x448>)
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fbab 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0bf      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2200      	movs	r2, #0
 80041e6:	494f      	ldr	r1, [pc, #316]	; (8004324 <HAL_I2C_Master_Receive+0x448>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb7d 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e091      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426c:	e042      	b.n	80042f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fc90 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e04c      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d118      	bne.n	80042f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f aec2 	bne.w	8004082 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010004 	.word	0x00010004

08004328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004342:	f7fd f85f 	bl	8001404 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	f040 80d9 	bne.w	8004508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2319      	movs	r3, #25
 800435c:	2201      	movs	r2, #1
 800435e:	496d      	ldr	r1, [pc, #436]	; (8004514 <HAL_I2C_Mem_Write+0x1ec>)
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fac1 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
 800436e:	e0cc      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_I2C_Mem_Write+0x56>
 800437a:	2302      	movs	r3, #2
 800437c:	e0c5      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d007      	beq.n	80043a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2221      	movs	r2, #33	; 0x21
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2240      	movs	r2, #64	; 0x40
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a4d      	ldr	r2, [pc, #308]	; (8004518 <HAL_I2C_Mem_Write+0x1f0>)
 80043e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043e6:	88f8      	ldrh	r0, [r7, #6]
 80043e8:	893a      	ldrh	r2, [r7, #8]
 80043ea:	8979      	ldrh	r1, [r7, #10]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4603      	mov	r3, r0
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f9e0 	bl	80047bc <I2C_RequestMemoryWrite>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d052      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e081      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fb42 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b04      	cmp	r3, #4
 800441c:	d107      	bne.n	800442e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e06b      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_I2C_Mem_Write+0x180>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d017      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1aa      	bne.n	8004406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fb2e 	bl	8004b16 <I2C_WaitOnBTFFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00d      	beq.n	80044dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d107      	bne.n	80044d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e016      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	00100002 	.word	0x00100002
 8004518:	ffff0000 	.word	0xffff0000

0800451c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d006      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d003      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004544:	d108      	bne.n	8004558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e00b      	b.n	8004570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b12      	cmp	r3, #18
 800455e:	d107      	bne.n	8004570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9b3 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004596:	d103      	bne.n	80045a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e035      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e01b      	b.n	80045f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	11db      	asrs	r3, r3, #7
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 030f 	orn	r3, r3, #15
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <I2C_MasterRequestWrite+0xfc>)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f9d9 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e010      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4907      	ldr	r1, [pc, #28]	; (800461c <I2C_MasterRequestWrite+0x100>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f9c9 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	00010008 	.word	0x00010008
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004644:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d006      	beq.n	800465a <I2C_MasterRequestRead+0x3a>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d003      	beq.n	800465a <I2C_MasterRequestRead+0x3a>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004658:	d108      	bne.n	800466c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e00b      	b.n	8004684 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b11      	cmp	r3, #17
 8004672:	d107      	bne.n	8004684 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f929 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d103      	bne.n	80046b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e079      	b.n	80047ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c0:	d108      	bne.n	80046d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c2:	897b      	ldrh	r3, [r7, #10]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]
 80046d2:	e05f      	b.n	8004794 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046d4:	897b      	ldrh	r3, [r7, #10]
 80046d6:	11db      	asrs	r3, r3, #7
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0306 	and.w	r3, r3, #6
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f063 030f 	orn	r3, r3, #15
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4930      	ldr	r1, [pc, #192]	; (80047b4 <I2C_MasterRequestRead+0x194>)
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f94f 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e054      	b.n	80047ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4929      	ldr	r1, [pc, #164]	; (80047b8 <I2C_MasterRequestRead+0x198>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f93f 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e044      	b.n	80047ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004746:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f8c7 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476e:	d103      	bne.n	8004778 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e017      	b.n	80047ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800477c:	897b      	ldrh	r3, [r7, #10]
 800477e:	11db      	asrs	r3, r3, #7
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0306 	and.w	r3, r3, #6
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f063 030e 	orn	r3, r3, #14
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <I2C_MasterRequestRead+0x198>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f8fb 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00010008 	.word	0x00010008
 80047b8:	00010002 	.word	0x00010002

080047bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f878 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480c:	d103      	bne.n	8004816 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e05f      	b.n	80048da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	492d      	ldr	r1, [pc, #180]	; (80048e4 <I2C_RequestMemoryWrite+0x128>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f8b0 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e04c      	b.n	80048da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f91a 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b04      	cmp	r3, #4
 800486c:	d107      	bne.n	800487e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e02b      	b.n	80048da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e021      	b.n	80048d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	b29b      	uxth	r3, r3
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8f4 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d107      	bne.n	80048ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e005      	b.n	80048da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ce:	893b      	ldrh	r3, [r7, #8]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	00010002 	.word	0x00010002

080048e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f8:	e025      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d021      	beq.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fc fd7f 	bl	8001404 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e023      	b.n	800498e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10d      	bne.n	800496c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	43da      	mvns	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	e00c      	b.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d0b6      	beq.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a4:	e051      	b.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b4:	d123      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e046      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a04:	d021      	beq.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fc fcfd 	bl	8001404 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e020      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10c      	bne.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e00b      	b.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d18d      	bne.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa0:	e02d      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8ce 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab8:	d021      	beq.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fc fca3 	bl	8001404 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e007      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d1ca      	bne.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b22:	e02d      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f88d 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e02d      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3a:	d021      	beq.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3c:	f7fc fc62 	bl	8001404 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d116      	bne.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d1ca      	bne.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba4:	e042      	b.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d119      	bne.n	8004be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0210 	mvn.w	r2, #16
 8004bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e029      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fc fc0c 	bl	8001404 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d1b5      	bne.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d11b      	bne.n	8004c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e267      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d075      	beq.n	8004dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cda:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b7e      	ldr	r3, [pc, #504]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_RCC_OscConfig+0x108>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d157      	bne.n	8004dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e242      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x74>
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x98>
 8004d22:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6f      	ldr	r2, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6c      	ldr	r2, [pc, #432]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b66      	ldr	r3, [pc, #408]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a65      	ldr	r2, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fc fb52 	bl	8001404 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fc fb4e 	bl	8001404 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e207      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b5b      	ldr	r3, [pc, #364]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xc0>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fc fb3e 	bl	8001404 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fc fb3a 	bl	8001404 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1f3      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0xe8>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd2:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1c7      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4937      	ldr	r1, [pc, #220]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fc faf3 	bl	8001404 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fc faef 	bl	8001404 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1a8      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4925      	ldr	r1, [pc, #148]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_RCC_OscConfig+0x244>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fad2 	bl	8001404 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fc face 	bl	8001404 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e187      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d036      	beq.n	8004efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fc fab2 	bl	8001404 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fc faae 	bl	8001404 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e167      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x200>
 8004ec2:	e01b      	b.n	8004efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_OscConfig+0x248>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fc fa9b 	bl	8001404 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fc fa97 	bl	8001404 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d907      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e150      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	42470000 	.word	0x42470000
 8004eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ea      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8097 	beq.w	8005038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	4a7c      	ldr	r2, [pc, #496]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	4b77      	ldr	r3, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d118      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a73      	ldr	r2, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f52:	f7fc fa57 	bl	8001404 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fc fa53 	bl	8001404 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e10c      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCC_OscConfig+0x474>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x2ea>
 8004f80:	4b64      	ldr	r3, [pc, #400]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a63      	ldr	r2, [pc, #396]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e01c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x30c>
 8004f96:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a5e      	ldr	r2, [pc, #376]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x324>
 8004fb0:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a54      	ldr	r2, [pc, #336]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fc fa18 	bl	8001404 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fc fa14 	bl	8001404 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0cb      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fee:	4b49      	ldr	r3, [pc, #292]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0ee      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x334>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fa02 	bl	8001404 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	e00a      	b.n	800501a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fc f9fe 	bl	8001404 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0b5      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501a:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ee      	bne.n	8005004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	4a38      	ldr	r2, [pc, #224]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80a1 	beq.w	8005184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b08      	cmp	r3, #8
 800504c:	d05c      	beq.n	8005108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d141      	bne.n	80050da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCC_OscConfig+0x478>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fc f9d2 	bl	8001404 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005064:	f7fc f9ce 	bl	8001404 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e087      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	3b01      	subs	r3, #1
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	491b      	ldr	r1, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fc f9a7 	bl	8001404 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fc f9a3 	bl	8001404 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e05c      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x416>
 80050d8:	e054      	b.n	8005184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCC_OscConfig+0x478>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fc f990 	bl	8001404 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fc f98c 	bl	8001404 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e045      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCC_OscConfig+0x470>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x444>
 8005106:	e03d      	b.n	8005184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e038      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005120:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x4ec>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d028      	beq.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d121      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11a      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	4293      	cmp	r3, r2
 800515a:	d111      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d107      	bne.n	8005180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800

08005194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0cc      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b68      	ldr	r3, [pc, #416]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d90c      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d044      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d119      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524e:	2b03      	cmp	r3, #3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e067      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4934      	ldr	r1, [pc, #208]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005284:	f7fc f8be 	bl	8001404 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fc f8ba 	bl	8001404 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e04f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20c      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f889 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1c8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc f81e 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	080068c8 	.word	0x080068c8
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d129      	bne.n	80053c6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6313      	str	r3, [r2, #48]	; 0x30
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800538e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005398:	2303      	movs	r3, #3
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053a0:	2300      	movs	r3, #0
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80053a4:	f107 031c 	add.w	r3, r7, #28
 80053a8:	4619      	mov	r1, r3
 80053aa:	481f      	ldr	r0, [pc, #124]	; (8005428 <HAL_RCC_MCOConfig+0xc8>)
 80053ac:	f7fe f99e 	bl	80036ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80053b0:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	430b      	orrs	r3, r1
 80053be:	4919      	ldr	r1, [pc, #100]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80053c4:	e029      	b.n	800541a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80053e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ec:	2303      	movs	r3, #3
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80053f8:	f107 031c 	add.w	r3, r7, #28
 80053fc:	4619      	mov	r1, r3
 80053fe:	480b      	ldr	r0, [pc, #44]	; (800542c <HAL_RCC_MCOConfig+0xcc>)
 8005400:	f7fe f974 	bl	80036ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	00d9      	lsls	r1, r3, #3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	430b      	orrs	r3, r1
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_MCOConfig+0xc4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
}
 800541a:	bf00      	nop
 800541c:	3730      	adds	r7, #48	; 0x30
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	40020000 	.word	0x40020000
 800542c:	40020800 	.word	0x40020800

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b094      	sub	sp, #80	; 0x50
 8005436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	647b      	str	r3, [r7, #68]	; 0x44
 800543c:	2300      	movs	r3, #0
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	2300      	movs	r3, #0
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005448:	4b79      	ldr	r3, [pc, #484]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00d      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x40>
 8005454:	2b08      	cmp	r3, #8
 8005456:	f200 80e1 	bhi.w	800561c <HAL_RCC_GetSysClockFreq+0x1ec>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x34>
 800545e:	2b04      	cmp	r3, #4
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x3a>
 8005462:	e0db      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b73      	ldr	r3, [pc, #460]	; (8005634 <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005468:	e0db      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800546a:	4b73      	ldr	r3, [pc, #460]	; (8005638 <HAL_RCC_GetSysClockFreq+0x208>)
 800546c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800546e:	e0d8      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005470:	4b6f      	ldr	r3, [pc, #444]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005478:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800547a:	4b6d      	ldr	r3, [pc, #436]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005486:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	2200      	movs	r2, #0
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005490:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	633b      	str	r3, [r7, #48]	; 0x30
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	0159      	lsls	r1, r3, #5
 80054b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b4:	0150      	lsls	r0, r2, #5
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4621      	mov	r1, r4
 80054bc:	1a51      	subs	r1, r2, r1
 80054be:	6139      	str	r1, [r7, #16]
 80054c0:	4629      	mov	r1, r5
 80054c2:	eb63 0301 	sbc.w	r3, r3, r1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d4:	4659      	mov	r1, fp
 80054d6:	018b      	lsls	r3, r1, #6
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054de:	4651      	mov	r1, sl
 80054e0:	018a      	lsls	r2, r1, #6
 80054e2:	4651      	mov	r1, sl
 80054e4:	ebb2 0801 	subs.w	r8, r2, r1
 80054e8:	4659      	mov	r1, fp
 80054ea:	eb63 0901 	sbc.w	r9, r3, r1
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005502:	4690      	mov	r8, r2
 8005504:	4699      	mov	r9, r3
 8005506:	4623      	mov	r3, r4
 8005508:	eb18 0303 	adds.w	r3, r8, r3
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	462b      	mov	r3, r5
 8005510:	eb49 0303 	adc.w	r3, r9, r3
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005522:	4629      	mov	r1, r5
 8005524:	024b      	lsls	r3, r1, #9
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800552c:	4621      	mov	r1, r4
 800552e:	024a      	lsls	r2, r1, #9
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005536:	2200      	movs	r2, #0
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
 800553a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005540:	f7fa fe96 	bl	8000270 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	e058      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	2200      	movs	r2, #0
 8005556:	4618      	mov	r0, r3
 8005558:	4611      	mov	r1, r2
 800555a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	2300      	movs	r3, #0
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	0159      	lsls	r1, r3, #5
 8005576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557a:	0150      	lsls	r0, r2, #5
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4641      	mov	r1, r8
 8005582:	ebb2 0a01 	subs.w	sl, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb63 0b01 	sbc.w	fp, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800559c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055a0:	ebb2 040a 	subs.w	r4, r2, sl
 80055a4:	eb63 050b 	sbc.w	r5, r3, fp
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	00eb      	lsls	r3, r5, #3
 80055b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b6:	00e2      	lsls	r2, r4, #3
 80055b8:	4614      	mov	r4, r2
 80055ba:	461d      	mov	r5, r3
 80055bc:	4643      	mov	r3, r8
 80055be:	18e3      	adds	r3, r4, r3
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	464b      	mov	r3, r9
 80055c4:	eb45 0303 	adc.w	r3, r5, r3
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055d6:	4629      	mov	r1, r5
 80055d8:	028b      	lsls	r3, r1, #10
 80055da:	4621      	mov	r1, r4
 80055dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055e0:	4621      	mov	r1, r4
 80055e2:	028a      	lsls	r2, r1, #10
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ea:	2200      	movs	r2, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	61fa      	str	r2, [r7, #28]
 80055f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f4:	f7fa fe3c 	bl	8000270 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800561a:	e002      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetSysClockFreq+0x204>)
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005624:	4618      	mov	r0, r3
 8005626:	3750      	adds	r7, #80	; 0x50
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200

0800563c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_RCC_GetHCLKFreq+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000000 	.word	0x20000000

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005658:	f7ff fff0 	bl	800563c <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	080068d8 	.word	0x080068d8

0800567c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e038      	b.n	8005704 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7fb fd1e 	bl	80010e8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3308      	adds	r3, #8
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 f828 	bl	800570c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f000 f88a 	bl	80057e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6858      	ldr	r0, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	f000 f8b7 	bl	800584c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	6892      	ldr	r2, [r2, #8]
 80056f2:	f041 0101 	orr.w	r1, r1, #1
 80056f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f023 0101 	bic.w	r1, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d102      	bne.n	800573c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e001      	b.n	8005740 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800574c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005752:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005758:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800575e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005764:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800576a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005770:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005776:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800577c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <FSMC_NORSRAM_Init+0xd0>)
 800579c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057a4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80057ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	ea02 0103 	and.w	r1, r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4319      	orrs	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	0008fb7f 	.word	0x0008fb7f

080057e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	431a      	orrs	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	431a      	orrs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	3b01      	subs	r3, #1
 800581c:	051b      	lsls	r3, r3, #20
 800581e:	431a      	orrs	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	3b02      	subs	r3, #2
 8005826:	061b      	lsls	r3, r3, #24
 8005828:	431a      	orrs	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	3201      	adds	r2, #1
 8005834:	4319      	orrs	r1, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005860:	d11d      	bne.n	800589e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800586a:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800586c:	4013      	ands	r3, r2
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	6811      	ldr	r1, [r2, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	6852      	ldr	r2, [r2, #4]
 8005876:	0112      	lsls	r2, r2, #4
 8005878:	4311      	orrs	r1, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	0212      	lsls	r2, r2, #8
 8005880:	4311      	orrs	r1, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	6992      	ldr	r2, [r2, #24]
 8005886:	4311      	orrs	r1, r2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	68d2      	ldr	r2, [r2, #12]
 800588c:	0412      	lsls	r2, r2, #16
 800588e:	430a      	orrs	r2, r1
 8005890:	ea43 0102 	orr.w	r1, r3, r2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800589c:	e005      	b.n	80058aa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80058a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	cff00000 	.word	0xcff00000

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000000c 	.word	0x2000000c

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	; (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	; (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	; (800590c <__libc_init_array+0x44>)
 80058dc:	f000 ffae 	bl	800683c <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08006988 	.word	0x08006988
 8005904:	08006988 	.word	0x08006988
 8005908:	08006988 	.word	0x08006988
 800590c:	0800698c 	.word	0x0800698c

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <iprintf>:
 8005920:	b40f      	push	{r0, r1, r2, r3}
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <iprintf+0x2c>)
 8005924:	b513      	push	{r0, r1, r4, lr}
 8005926:	681c      	ldr	r4, [r3, #0]
 8005928:	b124      	cbz	r4, 8005934 <iprintf+0x14>
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	b913      	cbnz	r3, 8005934 <iprintf+0x14>
 800592e:	4620      	mov	r0, r4
 8005930:	f000 f866 	bl	8005a00 <__sinit>
 8005934:	ab05      	add	r3, sp, #20
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	68a1      	ldr	r1, [r4, #8]
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f9bd 	bl	8005cbc <_vfiprintf_r>
 8005942:	b002      	add	sp, #8
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	b004      	add	sp, #16
 800594a:	4770      	bx	lr
 800594c:	2000000c 	.word	0x2000000c

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f7ff ffcf 	bl	8005910 <memset>
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x38>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x3c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x40>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x44>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6323      	str	r3, [r4, #48]	; 0x30
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08006265 	.word	0x08006265
 800598c:	08006287 	.word	0x08006287
 8005990:	080062bf 	.word	0x080062bf
 8005994:	080062e3 	.word	0x080062e3

08005998 <_cleanup_r>:
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <_cleanup_r+0x8>)
 800599a:	f000 b8af 	b.w	8005afc <_fwalk_reent>
 800599e:	bf00      	nop
 80059a0:	080065bd 	.word	0x080065bd

080059a4 <__sfmoreglue>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	2268      	movs	r2, #104	; 0x68
 80059a8:	1e4d      	subs	r5, r1, #1
 80059aa:	4355      	muls	r5, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b2:	f000 f8e5 	bl	8005b80 <_malloc_r>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b140      	cbz	r0, 80059cc <__sfmoreglue+0x28>
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9c0 1600 	strd	r1, r6, [r0]
 80059c0:	300c      	adds	r0, #12
 80059c2:	60a0      	str	r0, [r4, #8]
 80059c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c8:	f7ff ffa2 	bl	8005910 <memset>
 80059cc:	4620      	mov	r0, r4
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__sfp_lock_acquire>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sfp_lock_acquire+0x8>)
 80059d2:	f000 b8b3 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	200001f9 	.word	0x200001f9

080059dc <__sfp_lock_release>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_release+0x8>)
 80059de:	f000 b8ae 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	200001f9 	.word	0x200001f9

080059e8 <__sinit_lock_acquire>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sinit_lock_acquire+0x8>)
 80059ea:	f000 b8a7 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059ee:	bf00      	nop
 80059f0:	200001fa 	.word	0x200001fa

080059f4 <__sinit_lock_release>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sinit_lock_release+0x8>)
 80059f6:	f000 b8a2 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059fa:	bf00      	nop
 80059fc:	200001fa 	.word	0x200001fa

08005a00 <__sinit>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	f7ff fff0 	bl	80059e8 <__sinit_lock_acquire>
 8005a08:	69a3      	ldr	r3, [r4, #24]
 8005a0a:	b11b      	cbz	r3, 8005a14 <__sinit+0x14>
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a10:	f7ff bff0 	b.w	80059f4 <__sinit_lock_release>
 8005a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a18:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <__sinit+0x68>)
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <__sinit+0x6c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	bf04      	itt	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	61a3      	streq	r3, [r4, #24]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f820 	bl	8005a70 <__sfp>
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f81c 	bl	8005a70 <__sfp>
 8005a38:	60a0      	str	r0, [r4, #8]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f818 	bl	8005a70 <__sfp>
 8005a40:	2200      	movs	r2, #0
 8005a42:	60e0      	str	r0, [r4, #12]
 8005a44:	2104      	movs	r1, #4
 8005a46:	6860      	ldr	r0, [r4, #4]
 8005a48:	f7ff ff82 	bl	8005950 <std>
 8005a4c:	68a0      	ldr	r0, [r4, #8]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2109      	movs	r1, #9
 8005a52:	f7ff ff7d 	bl	8005950 <std>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff ff78 	bl	8005950 <std>
 8005a60:	2301      	movs	r3, #1
 8005a62:	61a3      	str	r3, [r4, #24]
 8005a64:	e7d2      	b.n	8005a0c <__sinit+0xc>
 8005a66:	bf00      	nop
 8005a68:	080068e8 	.word	0x080068e8
 8005a6c:	08005999 	.word	0x08005999

08005a70 <__sfp>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	4607      	mov	r7, r0
 8005a74:	f7ff ffac 	bl	80059d0 <__sfp_lock_acquire>
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <__sfp+0x84>)
 8005a7a:	681e      	ldr	r6, [r3, #0]
 8005a7c:	69b3      	ldr	r3, [r6, #24]
 8005a7e:	b913      	cbnz	r3, 8005a86 <__sfp+0x16>
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbd 	bl	8005a00 <__sinit>
 8005a86:	3648      	adds	r6, #72	; 0x48
 8005a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	d503      	bpl.n	8005a98 <__sfp+0x28>
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	b30b      	cbz	r3, 8005ad8 <__sfp+0x68>
 8005a94:	6836      	ldr	r6, [r6, #0]
 8005a96:	e7f7      	b.n	8005a88 <__sfp+0x18>
 8005a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a9c:	b9d5      	cbnz	r5, 8005ad4 <__sfp+0x64>
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <__sfp+0x88>)
 8005aa0:	60e3      	str	r3, [r4, #12]
 8005aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa8:	f000 f847 	bl	8005b3a <__retarget_lock_init_recursive>
 8005aac:	f7ff ff96 	bl	80059dc <__sfp_lock_release>
 8005ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	61a5      	str	r5, [r4, #24]
 8005abc:	2208      	movs	r2, #8
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac4:	f7ff ff24 	bl	8005910 <memset>
 8005ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad4:	3468      	adds	r4, #104	; 0x68
 8005ad6:	e7d9      	b.n	8005a8c <__sfp+0x1c>
 8005ad8:	2104      	movs	r1, #4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff62 	bl	80059a4 <__sfmoreglue>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	6030      	str	r0, [r6, #0]
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1d5      	bne.n	8005a94 <__sfp+0x24>
 8005ae8:	f7ff ff78 	bl	80059dc <__sfp_lock_release>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	e7ee      	b.n	8005ad0 <__sfp+0x60>
 8005af2:	bf00      	nop
 8005af4:	080068e8 	.word	0x080068e8
 8005af8:	ffff0001 	.word	0xffff0001

08005afc <_fwalk_reent>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b08:	2700      	movs	r7, #0
 8005b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b12:	d505      	bpl.n	8005b20 <_fwalk_reent+0x24>
 8005b14:	6824      	ldr	r4, [r4, #0]
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d1f7      	bne.n	8005b0a <_fwalk_reent+0xe>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d907      	bls.n	8005b36 <_fwalk_reent+0x3a>
 8005b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	d003      	beq.n	8005b36 <_fwalk_reent+0x3a>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	4307      	orrs	r7, r0
 8005b36:	3568      	adds	r5, #104	; 0x68
 8005b38:	e7e9      	b.n	8005b0e <_fwalk_reent+0x12>

08005b3a <__retarget_lock_init_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <__retarget_lock_acquire_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_release_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <sbrk_aligned>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4e0e      	ldr	r6, [pc, #56]	; (8005b7c <sbrk_aligned+0x3c>)
 8005b44:	460c      	mov	r4, r1
 8005b46:	6831      	ldr	r1, [r6, #0]
 8005b48:	4605      	mov	r5, r0
 8005b4a:	b911      	cbnz	r1, 8005b52 <sbrk_aligned+0x12>
 8005b4c:	f000 fb7a 	bl	8006244 <_sbrk_r>
 8005b50:	6030      	str	r0, [r6, #0]
 8005b52:	4621      	mov	r1, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	f000 fb75 	bl	8006244 <_sbrk_r>
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	d00a      	beq.n	8005b74 <sbrk_aligned+0x34>
 8005b5e:	1cc4      	adds	r4, r0, #3
 8005b60:	f024 0403 	bic.w	r4, r4, #3
 8005b64:	42a0      	cmp	r0, r4
 8005b66:	d007      	beq.n	8005b78 <sbrk_aligned+0x38>
 8005b68:	1a21      	subs	r1, r4, r0
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 fb6a 	bl	8006244 <_sbrk_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d101      	bne.n	8005b78 <sbrk_aligned+0x38>
 8005b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b78:	4620      	mov	r0, r4
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	20000200 	.word	0x20000200

08005b80 <_malloc_r>:
 8005b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b84:	1ccd      	adds	r5, r1, #3
 8005b86:	f025 0503 	bic.w	r5, r5, #3
 8005b8a:	3508      	adds	r5, #8
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	bf38      	it	cc
 8005b90:	250c      	movcc	r5, #12
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	4607      	mov	r7, r0
 8005b96:	db01      	blt.n	8005b9c <_malloc_r+0x1c>
 8005b98:	42a9      	cmp	r1, r5
 8005b9a:	d905      	bls.n	8005ba8 <_malloc_r+0x28>
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	2600      	movs	r6, #0
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	4e2e      	ldr	r6, [pc, #184]	; (8005c64 <_malloc_r+0xe4>)
 8005baa:	f000 fdbb 	bl	8006724 <__malloc_lock>
 8005bae:	6833      	ldr	r3, [r6, #0]
 8005bb0:	461c      	mov	r4, r3
 8005bb2:	bb34      	cbnz	r4, 8005c02 <_malloc_r+0x82>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f7ff ffc2 	bl	8005b40 <sbrk_aligned>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	d14d      	bne.n	8005c5e <_malloc_r+0xde>
 8005bc2:	6834      	ldr	r4, [r6, #0]
 8005bc4:	4626      	mov	r6, r4
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	d140      	bne.n	8005c4c <_malloc_r+0xcc>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4638      	mov	r0, r7
 8005bd0:	eb04 0803 	add.w	r8, r4, r3
 8005bd4:	f000 fb36 	bl	8006244 <_sbrk_r>
 8005bd8:	4580      	cmp	r8, r0
 8005bda:	d13a      	bne.n	8005c52 <_malloc_r+0xd2>
 8005bdc:	6821      	ldr	r1, [r4, #0]
 8005bde:	3503      	adds	r5, #3
 8005be0:	1a6d      	subs	r5, r5, r1
 8005be2:	f025 0503 	bic.w	r5, r5, #3
 8005be6:	3508      	adds	r5, #8
 8005be8:	2d0c      	cmp	r5, #12
 8005bea:	bf38      	it	cc
 8005bec:	250c      	movcc	r5, #12
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f7ff ffa5 	bl	8005b40 <sbrk_aligned>
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d02b      	beq.n	8005c52 <_malloc_r+0xd2>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	442b      	add	r3, r5
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	e00e      	b.n	8005c20 <_malloc_r+0xa0>
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	1b52      	subs	r2, r2, r5
 8005c06:	d41e      	bmi.n	8005c46 <_malloc_r+0xc6>
 8005c08:	2a0b      	cmp	r2, #11
 8005c0a:	d916      	bls.n	8005c3a <_malloc_r+0xba>
 8005c0c:	1961      	adds	r1, r4, r5
 8005c0e:	42a3      	cmp	r3, r4
 8005c10:	6025      	str	r5, [r4, #0]
 8005c12:	bf18      	it	ne
 8005c14:	6059      	strne	r1, [r3, #4]
 8005c16:	6863      	ldr	r3, [r4, #4]
 8005c18:	bf08      	it	eq
 8005c1a:	6031      	streq	r1, [r6, #0]
 8005c1c:	5162      	str	r2, [r4, r5]
 8005c1e:	604b      	str	r3, [r1, #4]
 8005c20:	4638      	mov	r0, r7
 8005c22:	f104 060b 	add.w	r6, r4, #11
 8005c26:	f000 fd83 	bl	8006730 <__malloc_unlock>
 8005c2a:	f026 0607 	bic.w	r6, r6, #7
 8005c2e:	1d23      	adds	r3, r4, #4
 8005c30:	1af2      	subs	r2, r6, r3
 8005c32:	d0b6      	beq.n	8005ba2 <_malloc_r+0x22>
 8005c34:	1b9b      	subs	r3, r3, r6
 8005c36:	50a3      	str	r3, [r4, r2]
 8005c38:	e7b3      	b.n	8005ba2 <_malloc_r+0x22>
 8005c3a:	6862      	ldr	r2, [r4, #4]
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	bf0c      	ite	eq
 8005c40:	6032      	streq	r2, [r6, #0]
 8005c42:	605a      	strne	r2, [r3, #4]
 8005c44:	e7ec      	b.n	8005c20 <_malloc_r+0xa0>
 8005c46:	4623      	mov	r3, r4
 8005c48:	6864      	ldr	r4, [r4, #4]
 8005c4a:	e7b2      	b.n	8005bb2 <_malloc_r+0x32>
 8005c4c:	4634      	mov	r4, r6
 8005c4e:	6876      	ldr	r6, [r6, #4]
 8005c50:	e7b9      	b.n	8005bc6 <_malloc_r+0x46>
 8005c52:	230c      	movs	r3, #12
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4638      	mov	r0, r7
 8005c58:	f000 fd6a 	bl	8006730 <__malloc_unlock>
 8005c5c:	e7a1      	b.n	8005ba2 <_malloc_r+0x22>
 8005c5e:	6025      	str	r5, [r4, #0]
 8005c60:	e7de      	b.n	8005c20 <_malloc_r+0xa0>
 8005c62:	bf00      	nop
 8005c64:	200001fc 	.word	0x200001fc

08005c68 <__sfputc_r>:
 8005c68:	6893      	ldr	r3, [r2, #8]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	b410      	push	{r4}
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	da08      	bge.n	8005c86 <__sfputc_r+0x1e>
 8005c74:	6994      	ldr	r4, [r2, #24]
 8005c76:	42a3      	cmp	r3, r4
 8005c78:	db01      	blt.n	8005c7e <__sfputc_r+0x16>
 8005c7a:	290a      	cmp	r1, #10
 8005c7c:	d103      	bne.n	8005c86 <__sfputc_r+0x1e>
 8005c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c82:	f000 bb33 	b.w	80062ec <__swbuf_r>
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	1c58      	adds	r0, r3, #1
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	7019      	strb	r1, [r3, #0]
 8005c8e:	4608      	mov	r0, r1
 8005c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <__sfputs_r>:
 8005c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	18d5      	adds	r5, r2, r3
 8005ca0:	42ac      	cmp	r4, r5
 8005ca2:	d101      	bne.n	8005ca8 <__sfputs_r+0x12>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e007      	b.n	8005cb8 <__sfputs_r+0x22>
 8005ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cac:	463a      	mov	r2, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ffda 	bl	8005c68 <__sfputc_r>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d1f3      	bne.n	8005ca0 <__sfputs_r+0xa>
 8005cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cbc <_vfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	b09d      	sub	sp, #116	; 0x74
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	4606      	mov	r6, r0
 8005cca:	b118      	cbz	r0, 8005cd4 <_vfiprintf_r+0x18>
 8005ccc:	6983      	ldr	r3, [r0, #24]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x18>
 8005cd0:	f7ff fe96 	bl	8005a00 <__sinit>
 8005cd4:	4b89      	ldr	r3, [pc, #548]	; (8005efc <_vfiprintf_r+0x240>)
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	d11b      	bne.n	8005d12 <_vfiprintf_r+0x56>
 8005cda:	6875      	ldr	r5, [r6, #4]
 8005cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	059a      	lsls	r2, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cea:	f7ff ff27 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	071b      	lsls	r3, r3, #28
 8005cf2:	d501      	bpl.n	8005cf8 <_vfiprintf_r+0x3c>
 8005cf4:	692b      	ldr	r3, [r5, #16]
 8005cf6:	b9eb      	cbnz	r3, 8005d34 <_vfiprintf_r+0x78>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 fb5a 	bl	80063b4 <__swsetup_r>
 8005d00:	b1c0      	cbz	r0, 8005d34 <_vfiprintf_r+0x78>
 8005d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d04:	07dc      	lsls	r4, r3, #31
 8005d06:	d50e      	bpl.n	8005d26 <_vfiprintf_r+0x6a>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0c:	b01d      	add	sp, #116	; 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <_vfiprintf_r+0x244>)
 8005d14:	429d      	cmp	r5, r3
 8005d16:	d101      	bne.n	8005d1c <_vfiprintf_r+0x60>
 8005d18:	68b5      	ldr	r5, [r6, #8]
 8005d1a:	e7df      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d1c:	4b79      	ldr	r3, [pc, #484]	; (8005f04 <_vfiprintf_r+0x248>)
 8005d1e:	429d      	cmp	r5, r3
 8005d20:	bf08      	it	eq
 8005d22:	68f5      	ldreq	r5, [r6, #12]
 8005d24:	e7da      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	0598      	lsls	r0, r3, #22
 8005d2a:	d4ed      	bmi.n	8005d08 <_vfiprintf_r+0x4c>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2e:	f7ff ff06 	bl	8005b3e <__retarget_lock_release_recursive>
 8005d32:	e7e9      	b.n	8005d08 <_vfiprintf_r+0x4c>
 8005d34:	2300      	movs	r3, #0
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d42:	2330      	movs	r3, #48	; 0x30
 8005d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f08 <_vfiprintf_r+0x24c>
 8005d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d4c:	f04f 0901 	mov.w	r9, #1
 8005d50:	4623      	mov	r3, r4
 8005d52:	469a      	mov	sl, r3
 8005d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d58:	b10a      	cbz	r2, 8005d5e <_vfiprintf_r+0xa2>
 8005d5a:	2a25      	cmp	r2, #37	; 0x25
 8005d5c:	d1f9      	bne.n	8005d52 <_vfiprintf_r+0x96>
 8005d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d62:	d00b      	beq.n	8005d7c <_vfiprintf_r+0xc0>
 8005d64:	465b      	mov	r3, fp
 8005d66:	4622      	mov	r2, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff93 	bl	8005c96 <__sfputs_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f000 80aa 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d78:	445a      	add	r2, fp
 8005d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a2 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d9e:	4654      	mov	r4, sl
 8005da0:	2205      	movs	r2, #5
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4858      	ldr	r0, [pc, #352]	; (8005f08 <_vfiprintf_r+0x24c>)
 8005da8:	f7fa fa12 	bl	80001d0 <memchr>
 8005dac:	9a04      	ldr	r2, [sp, #16]
 8005dae:	b9d8      	cbnz	r0, 8005de8 <_vfiprintf_r+0x12c>
 8005db0:	06d1      	lsls	r1, r2, #27
 8005db2:	bf44      	itt	mi
 8005db4:	2320      	movmi	r3, #32
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dba:	0713      	lsls	r3, r2, #28
 8005dbc:	bf44      	itt	mi
 8005dbe:	232b      	movmi	r3, #43	; 0x2b
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d015      	beq.n	8005df8 <_vfiprintf_r+0x13c>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ddc:	3b30      	subs	r3, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d94e      	bls.n	8005e80 <_vfiprintf_r+0x1c4>
 8005de2:	b1b0      	cbz	r0, 8005e12 <_vfiprintf_r+0x156>
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	e014      	b.n	8005e12 <_vfiprintf_r+0x156>
 8005de8:	eba0 0308 	sub.w	r3, r0, r8
 8005dec:	fa09 f303 	lsl.w	r3, r9, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	46a2      	mov	sl, r4
 8005df6:	e7d2      	b.n	8005d9e <_vfiprintf_r+0xe2>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9103      	str	r1, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfbb      	ittet	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0a:	9307      	strge	r3, [sp, #28]
 8005e0c:	9307      	strlt	r3, [sp, #28]
 8005e0e:	bfb8      	it	lt
 8005e10:	9204      	strlt	r2, [sp, #16]
 8005e12:	7823      	ldrb	r3, [r4, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10c      	bne.n	8005e32 <_vfiprintf_r+0x176>
 8005e18:	7863      	ldrb	r3, [r4, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d135      	bne.n	8005e8a <_vfiprintf_r+0x1ce>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	9203      	str	r2, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e2e:	3402      	adds	r4, #2
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f18 <_vfiprintf_r+0x25c>
 8005e36:	7821      	ldrb	r1, [r4, #0]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9c8 	bl	80001d0 <memchr>
 8005e40:	b140      	cbz	r0, 8005e54 <_vfiprintf_r+0x198>
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	eba0 000a 	sub.w	r0, r0, sl
 8005e48:	fa03 f000 	lsl.w	r0, r3, r0
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4303      	orrs	r3, r0
 8005e50:	3401      	adds	r4, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	482c      	ldr	r0, [pc, #176]	; (8005f0c <_vfiprintf_r+0x250>)
 8005e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e5e:	2206      	movs	r2, #6
 8005e60:	f7fa f9b6 	bl	80001d0 <memchr>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d03f      	beq.n	8005ee8 <_vfiprintf_r+0x22c>
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <_vfiprintf_r+0x254>)
 8005e6a:	bb1b      	cbnz	r3, 8005eb4 <_vfiprintf_r+0x1f8>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	3307      	adds	r3, #7
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	3308      	adds	r3, #8
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7a:	443b      	add	r3, r7
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	e767      	b.n	8005d50 <_vfiprintf_r+0x94>
 8005e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e84:	460c      	mov	r4, r1
 8005e86:	2001      	movs	r0, #1
 8005e88:	e7a5      	b.n	8005dd6 <_vfiprintf_r+0x11a>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4620      	mov	r0, r4
 8005e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9c:	3a30      	subs	r2, #48	; 0x30
 8005e9e:	2a09      	cmp	r2, #9
 8005ea0:	d903      	bls.n	8005eaa <_vfiprintf_r+0x1ee>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0c5      	beq.n	8005e32 <_vfiprintf_r+0x176>
 8005ea6:	9105      	str	r1, [sp, #20]
 8005ea8:	e7c3      	b.n	8005e32 <_vfiprintf_r+0x176>
 8005eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7f0      	b.n	8005e96 <_vfiprintf_r+0x1da>
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f3af 8000 	nop.w
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	1c78      	adds	r0, r7, #1
 8005ec8:	d1d6      	bne.n	8005e78 <_vfiprintf_r+0x1bc>
 8005eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	d405      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed0:	89ab      	ldrh	r3, [r5, #12]
 8005ed2:	059a      	lsls	r2, r3, #22
 8005ed4:	d402      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed8:	f7ff fe31 	bl	8005b3e <__retarget_lock_release_recursive>
 8005edc:	89ab      	ldrh	r3, [r5, #12]
 8005ede:	065b      	lsls	r3, r3, #25
 8005ee0:	f53f af12 	bmi.w	8005d08 <_vfiprintf_r+0x4c>
 8005ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee6:	e711      	b.n	8005d0c <_vfiprintf_r+0x50>
 8005ee8:	ab03      	add	r3, sp, #12
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ef0:	a904      	add	r1, sp, #16
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f000 f880 	bl	8005ff8 <_printf_i>
 8005ef8:	e7e4      	b.n	8005ec4 <_vfiprintf_r+0x208>
 8005efa:	bf00      	nop
 8005efc:	0800690c 	.word	0x0800690c
 8005f00:	0800692c 	.word	0x0800692c
 8005f04:	080068ec 	.word	0x080068ec
 8005f08:	0800694c 	.word	0x0800694c
 8005f0c:	08006956 	.word	0x08006956
 8005f10:	00000000 	.word	0x00000000
 8005f14:	08005c97 	.word	0x08005c97
 8005f18:	08006952 	.word	0x08006952

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4616      	mov	r6, r2
 8005f22:	4699      	mov	r9, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f38:	4607      	mov	r7, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_printf_common+0x26>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0699      	lsls	r1, r3, #26
 8005f46:	bf42      	ittt	mi
 8005f48:	6833      	ldrmi	r3, [r6, #0]
 8005f4a:	3302      	addmi	r3, #2
 8005f4c:	6033      	strmi	r3, [r6, #0]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	f015 0506 	ands.w	r5, r5, #6
 8005f54:	d106      	bne.n	8005f64 <_printf_common+0x48>
 8005f56:	f104 0a19 	add.w	sl, r4, #25
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	6832      	ldr	r2, [r6, #0]
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dc26      	bgt.n	8005fb2 <_printf_common+0x96>
 8005f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f68:	1e13      	subs	r3, r2, #0
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	bf18      	it	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	0692      	lsls	r2, r2, #26
 8005f72:	d42b      	bmi.n	8005fcc <_printf_common+0xb0>
 8005f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c0      	blx	r8
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d01e      	beq.n	8005fc0 <_printf_common+0xa4>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	68e5      	ldr	r5, [r4, #12]
 8005f86:	6832      	ldr	r2, [r6, #0]
 8005f88:	f003 0306 	and.w	r3, r3, #6
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	bf08      	it	eq
 8005f90:	1aad      	subeq	r5, r5, r2
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	bf0c      	ite	eq
 8005f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f9c:	2500      	movne	r5, #0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bfc4      	itt	gt
 8005fa2:	1a9b      	subgt	r3, r3, r2
 8005fa4:	18ed      	addgt	r5, r5, r3
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	341a      	adds	r4, #26
 8005faa:	42b5      	cmp	r5, r6
 8005fac:	d11a      	bne.n	8005fe4 <_printf_common+0xc8>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e008      	b.n	8005fc4 <_printf_common+0xa8>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4638      	mov	r0, r7
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d103      	bne.n	8005fc8 <_printf_common+0xac>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7c6      	b.n	8005f5a <_printf_common+0x3e>
 8005fcc:	18e1      	adds	r1, r4, r3
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	2030      	movs	r0, #48	; 0x30
 8005fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fd6:	4422      	add	r2, r4
 8005fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	e7c7      	b.n	8005f74 <_printf_common+0x58>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0e6      	beq.n	8005fc0 <_printf_common+0xa4>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7d9      	b.n	8005faa <_printf_common+0x8e>
	...

08005ff8 <_printf_i>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	7e0f      	ldrb	r7, [r1, #24]
 8005ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006000:	2f78      	cmp	r7, #120	; 0x78
 8006002:	4691      	mov	r9, r2
 8006004:	4680      	mov	r8, r0
 8006006:	460c      	mov	r4, r1
 8006008:	469a      	mov	sl, r3
 800600a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800600e:	d807      	bhi.n	8006020 <_printf_i+0x28>
 8006010:	2f62      	cmp	r7, #98	; 0x62
 8006012:	d80a      	bhi.n	800602a <_printf_i+0x32>
 8006014:	2f00      	cmp	r7, #0
 8006016:	f000 80d8 	beq.w	80061ca <_printf_i+0x1d2>
 800601a:	2f58      	cmp	r7, #88	; 0x58
 800601c:	f000 80a3 	beq.w	8006166 <_printf_i+0x16e>
 8006020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006028:	e03a      	b.n	80060a0 <_printf_i+0xa8>
 800602a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800602e:	2b15      	cmp	r3, #21
 8006030:	d8f6      	bhi.n	8006020 <_printf_i+0x28>
 8006032:	a101      	add	r1, pc, #4	; (adr r1, 8006038 <_printf_i+0x40>)
 8006034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006038:	08006091 	.word	0x08006091
 800603c:	080060a5 	.word	0x080060a5
 8006040:	08006021 	.word	0x08006021
 8006044:	08006021 	.word	0x08006021
 8006048:	08006021 	.word	0x08006021
 800604c:	08006021 	.word	0x08006021
 8006050:	080060a5 	.word	0x080060a5
 8006054:	08006021 	.word	0x08006021
 8006058:	08006021 	.word	0x08006021
 800605c:	08006021 	.word	0x08006021
 8006060:	08006021 	.word	0x08006021
 8006064:	080061b1 	.word	0x080061b1
 8006068:	080060d5 	.word	0x080060d5
 800606c:	08006193 	.word	0x08006193
 8006070:	08006021 	.word	0x08006021
 8006074:	08006021 	.word	0x08006021
 8006078:	080061d3 	.word	0x080061d3
 800607c:	08006021 	.word	0x08006021
 8006080:	080060d5 	.word	0x080060d5
 8006084:	08006021 	.word	0x08006021
 8006088:	08006021 	.word	0x08006021
 800608c:	0800619b 	.word	0x0800619b
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	602a      	str	r2, [r5, #0]
 8006098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800609c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0a3      	b.n	80061ec <_printf_i+0x1f4>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	6829      	ldr	r1, [r5, #0]
 80060a8:	0606      	lsls	r6, r0, #24
 80060aa:	f101 0304 	add.w	r3, r1, #4
 80060ae:	d50a      	bpl.n	80060c6 <_printf_i+0xce>
 80060b0:	680e      	ldr	r6, [r1, #0]
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	2e00      	cmp	r6, #0
 80060b6:	da03      	bge.n	80060c0 <_printf_i+0xc8>
 80060b8:	232d      	movs	r3, #45	; 0x2d
 80060ba:	4276      	negs	r6, r6
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c0:	485e      	ldr	r0, [pc, #376]	; (800623c <_printf_i+0x244>)
 80060c2:	230a      	movs	r3, #10
 80060c4:	e019      	b.n	80060fa <_printf_i+0x102>
 80060c6:	680e      	ldr	r6, [r1, #0]
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ce:	bf18      	it	ne
 80060d0:	b236      	sxthne	r6, r6
 80060d2:	e7ef      	b.n	80060b4 <_printf_i+0xbc>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	6029      	str	r1, [r5, #0]
 80060dc:	0601      	lsls	r1, r0, #24
 80060de:	d501      	bpl.n	80060e4 <_printf_i+0xec>
 80060e0:	681e      	ldr	r6, [r3, #0]
 80060e2:	e002      	b.n	80060ea <_printf_i+0xf2>
 80060e4:	0646      	lsls	r6, r0, #25
 80060e6:	d5fb      	bpl.n	80060e0 <_printf_i+0xe8>
 80060e8:	881e      	ldrh	r6, [r3, #0]
 80060ea:	4854      	ldr	r0, [pc, #336]	; (800623c <_printf_i+0x244>)
 80060ec:	2f6f      	cmp	r7, #111	; 0x6f
 80060ee:	bf0c      	ite	eq
 80060f0:	2308      	moveq	r3, #8
 80060f2:	230a      	movne	r3, #10
 80060f4:	2100      	movs	r1, #0
 80060f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060fa:	6865      	ldr	r5, [r4, #4]
 80060fc:	60a5      	str	r5, [r4, #8]
 80060fe:	2d00      	cmp	r5, #0
 8006100:	bfa2      	ittt	ge
 8006102:	6821      	ldrge	r1, [r4, #0]
 8006104:	f021 0104 	bicge.w	r1, r1, #4
 8006108:	6021      	strge	r1, [r4, #0]
 800610a:	b90e      	cbnz	r6, 8006110 <_printf_i+0x118>
 800610c:	2d00      	cmp	r5, #0
 800610e:	d04d      	beq.n	80061ac <_printf_i+0x1b4>
 8006110:	4615      	mov	r5, r2
 8006112:	fbb6 f1f3 	udiv	r1, r6, r3
 8006116:	fb03 6711 	mls	r7, r3, r1, r6
 800611a:	5dc7      	ldrb	r7, [r0, r7]
 800611c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006120:	4637      	mov	r7, r6
 8006122:	42bb      	cmp	r3, r7
 8006124:	460e      	mov	r6, r1
 8006126:	d9f4      	bls.n	8006112 <_printf_i+0x11a>
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10b      	bne.n	8006144 <_printf_i+0x14c>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07de      	lsls	r6, r3, #31
 8006130:	d508      	bpl.n	8006144 <_printf_i+0x14c>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4299      	cmp	r1, r3
 8006138:	bfde      	ittt	le
 800613a:	2330      	movle	r3, #48	; 0x30
 800613c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006140:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006144:	1b52      	subs	r2, r2, r5
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	464b      	mov	r3, r9
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fee2 	bl	8005f1c <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14c      	bne.n	80061f6 <_printf_i+0x1fe>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006160:	b004      	add	sp, #16
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	4835      	ldr	r0, [pc, #212]	; (800623c <_printf_i+0x244>)
 8006168:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800616c:	6829      	ldr	r1, [r5, #0]
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f851 6b04 	ldr.w	r6, [r1], #4
 8006174:	6029      	str	r1, [r5, #0]
 8006176:	061d      	lsls	r5, r3, #24
 8006178:	d514      	bpl.n	80061a4 <_printf_i+0x1ac>
 800617a:	07df      	lsls	r7, r3, #31
 800617c:	bf44      	itt	mi
 800617e:	f043 0320 	orrmi.w	r3, r3, #32
 8006182:	6023      	strmi	r3, [r4, #0]
 8006184:	b91e      	cbnz	r6, 800618e <_printf_i+0x196>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f023 0320 	bic.w	r3, r3, #32
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	2310      	movs	r3, #16
 8006190:	e7b0      	b.n	80060f4 <_printf_i+0xfc>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	2378      	movs	r3, #120	; 0x78
 800619c:	4828      	ldr	r0, [pc, #160]	; (8006240 <_printf_i+0x248>)
 800619e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061a2:	e7e3      	b.n	800616c <_printf_i+0x174>
 80061a4:	0659      	lsls	r1, r3, #25
 80061a6:	bf48      	it	mi
 80061a8:	b2b6      	uxthmi	r6, r6
 80061aa:	e7e6      	b.n	800617a <_printf_i+0x182>
 80061ac:	4615      	mov	r5, r2
 80061ae:	e7bb      	b.n	8006128 <_printf_i+0x130>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	6826      	ldr	r6, [r4, #0]
 80061b4:	6961      	ldr	r1, [r4, #20]
 80061b6:	1d18      	adds	r0, r3, #4
 80061b8:	6028      	str	r0, [r5, #0]
 80061ba:	0635      	lsls	r5, r6, #24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0x1cc>
 80061c0:	6019      	str	r1, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0x1d2>
 80061c4:	0670      	lsls	r0, r6, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0x1c8>
 80061c8:	8019      	strh	r1, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	4615      	mov	r5, r2
 80061d0:	e7ba      	b.n	8006148 <_printf_i+0x150>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	602a      	str	r2, [r5, #0]
 80061d8:	681d      	ldr	r5, [r3, #0]
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	2100      	movs	r1, #0
 80061de:	4628      	mov	r0, r5
 80061e0:	f7f9 fff6 	bl	80001d0 <memchr>
 80061e4:	b108      	cbz	r0, 80061ea <_printf_i+0x1f2>
 80061e6:	1b40      	subs	r0, r0, r5
 80061e8:	6060      	str	r0, [r4, #4]
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	2300      	movs	r3, #0
 80061f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f4:	e7a8      	b.n	8006148 <_printf_i+0x150>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	462a      	mov	r2, r5
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d0ab      	beq.n	800615c <_printf_i+0x164>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	079b      	lsls	r3, r3, #30
 8006208:	d413      	bmi.n	8006232 <_printf_i+0x23a>
 800620a:	68e0      	ldr	r0, [r4, #12]
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	4298      	cmp	r0, r3
 8006210:	bfb8      	it	lt
 8006212:	4618      	movlt	r0, r3
 8006214:	e7a4      	b.n	8006160 <_printf_i+0x168>
 8006216:	2301      	movs	r3, #1
 8006218:	4632      	mov	r2, r6
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d09b      	beq.n	800615c <_printf_i+0x164>
 8006224:	3501      	adds	r5, #1
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	9903      	ldr	r1, [sp, #12]
 800622a:	1a5b      	subs	r3, r3, r1
 800622c:	42ab      	cmp	r3, r5
 800622e:	dcf2      	bgt.n	8006216 <_printf_i+0x21e>
 8006230:	e7eb      	b.n	800620a <_printf_i+0x212>
 8006232:	2500      	movs	r5, #0
 8006234:	f104 0619 	add.w	r6, r4, #25
 8006238:	e7f5      	b.n	8006226 <_printf_i+0x22e>
 800623a:	bf00      	nop
 800623c:	0800695d 	.word	0x0800695d
 8006240:	0800696e 	.word	0x0800696e

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb f800 	bl	8001254 <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20000204 	.word	0x20000204

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 fab2 	bl	80067d4 <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	; 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__swrite>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	461f      	mov	r7, r3
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d505      	bpl.n	80062a4 <__swrite+0x1e>
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f000 f9c8 	bl	8006634 <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 b869 	b.w	8006390 <_write_r>

080062be <__sseek>:
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 f9b5 	bl	8006634 <_lseek_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	bf15      	itete	ne
 80062d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80062d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062da:	81a3      	strheq	r3, [r4, #12]
 80062dc:	bf18      	it	ne
 80062de:	81a3      	strhne	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__sclose>:
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 b8d3 	b.w	8006490 <_close_r>
	...

080062ec <__swbuf_r>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	460e      	mov	r6, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	4605      	mov	r5, r0
 80062f4:	b118      	cbz	r0, 80062fe <__swbuf_r+0x12>
 80062f6:	6983      	ldr	r3, [r0, #24]
 80062f8:	b90b      	cbnz	r3, 80062fe <__swbuf_r+0x12>
 80062fa:	f7ff fb81 	bl	8005a00 <__sinit>
 80062fe:	4b21      	ldr	r3, [pc, #132]	; (8006384 <__swbuf_r+0x98>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d12b      	bne.n	800635c <__swbuf_r+0x70>
 8006304:	686c      	ldr	r4, [r5, #4]
 8006306:	69a3      	ldr	r3, [r4, #24]
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	071a      	lsls	r2, r3, #28
 800630e:	d52f      	bpl.n	8006370 <__swbuf_r+0x84>
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	b36b      	cbz	r3, 8006370 <__swbuf_r+0x84>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	1ac0      	subs	r0, r0, r3
 800631a:	6963      	ldr	r3, [r4, #20]
 800631c:	b2f6      	uxtb	r6, r6
 800631e:	4283      	cmp	r3, r0
 8006320:	4637      	mov	r7, r6
 8006322:	dc04      	bgt.n	800632e <__swbuf_r+0x42>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f948 	bl	80065bc <_fflush_r>
 800632c:	bb30      	cbnz	r0, 800637c <__swbuf_r+0x90>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60a3      	str	r3, [r4, #8]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	701e      	strb	r6, [r3, #0]
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	3001      	adds	r0, #1
 8006340:	4283      	cmp	r3, r0
 8006342:	d004      	beq.n	800634e <__swbuf_r+0x62>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d506      	bpl.n	8006358 <__swbuf_r+0x6c>
 800634a:	2e0a      	cmp	r6, #10
 800634c:	d104      	bne.n	8006358 <__swbuf_r+0x6c>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 f933 	bl	80065bc <_fflush_r>
 8006356:	b988      	cbnz	r0, 800637c <__swbuf_r+0x90>
 8006358:	4638      	mov	r0, r7
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <__swbuf_r+0x9c>)
 800635e:	429c      	cmp	r4, r3
 8006360:	d101      	bne.n	8006366 <__swbuf_r+0x7a>
 8006362:	68ac      	ldr	r4, [r5, #8]
 8006364:	e7cf      	b.n	8006306 <__swbuf_r+0x1a>
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <__swbuf_r+0xa0>)
 8006368:	429c      	cmp	r4, r3
 800636a:	bf08      	it	eq
 800636c:	68ec      	ldreq	r4, [r5, #12]
 800636e:	e7ca      	b.n	8006306 <__swbuf_r+0x1a>
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f81e 	bl	80063b4 <__swsetup_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0cb      	beq.n	8006314 <__swbuf_r+0x28>
 800637c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006380:	e7ea      	b.n	8006358 <__swbuf_r+0x6c>
 8006382:	bf00      	nop
 8006384:	0800690c 	.word	0x0800690c
 8006388:	0800692c 	.word	0x0800692c
 800638c:	080068ec 	.word	0x080068ec

08006390 <_write_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_write_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa ff07 	bl	80011b2 <_write>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_write_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_write_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000204 	.word	0x20000204

080063b4 <__swsetup_r>:
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <__swsetup_r+0xcc>)
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	681d      	ldr	r5, [r3, #0]
 80063ba:	4606      	mov	r6, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	b125      	cbz	r5, 80063ca <__swsetup_r+0x16>
 80063c0:	69ab      	ldr	r3, [r5, #24]
 80063c2:	b913      	cbnz	r3, 80063ca <__swsetup_r+0x16>
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fb1b 	bl	8005a00 <__sinit>
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <__swsetup_r+0xd0>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d10f      	bne.n	80063f0 <__swsetup_r+0x3c>
 80063d0:	686c      	ldr	r4, [r5, #4]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d42c      	bmi.n	8006436 <__swsetup_r+0x82>
 80063dc:	06dd      	lsls	r5, r3, #27
 80063de:	d411      	bmi.n	8006404 <__swsetup_r+0x50>
 80063e0:	2309      	movs	r3, #9
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ee:	e03e      	b.n	800646e <__swsetup_r+0xba>
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <__swsetup_r+0xd4>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	d101      	bne.n	80063fa <__swsetup_r+0x46>
 80063f6:	68ac      	ldr	r4, [r5, #8]
 80063f8:	e7eb      	b.n	80063d2 <__swsetup_r+0x1e>
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <__swsetup_r+0xd8>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	bf08      	it	eq
 8006400:	68ec      	ldreq	r4, [r5, #12]
 8006402:	e7e6      	b.n	80063d2 <__swsetup_r+0x1e>
 8006404:	0758      	lsls	r0, r3, #29
 8006406:	d512      	bpl.n	800642e <__swsetup_r+0x7a>
 8006408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640a:	b141      	cbz	r1, 800641e <__swsetup_r+0x6a>
 800640c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <__swsetup_r+0x66>
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f991 	bl	800673c <_free_r>
 800641a:	2300      	movs	r3, #0
 800641c:	6363      	str	r3, [r4, #52]	; 0x34
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	2300      	movs	r3, #0
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f043 0308 	orr.w	r3, r3, #8
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	b94b      	cbnz	r3, 800644e <__swsetup_r+0x9a>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006444:	d003      	beq.n	800644e <__swsetup_r+0x9a>
 8006446:	4621      	mov	r1, r4
 8006448:	4630      	mov	r0, r6
 800644a:	f000 f92b 	bl	80066a4 <__smakebuf_r>
 800644e:	89a0      	ldrh	r0, [r4, #12]
 8006450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006454:	f010 0301 	ands.w	r3, r0, #1
 8006458:	d00a      	beq.n	8006470 <__swsetup_r+0xbc>
 800645a:	2300      	movs	r3, #0
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6963      	ldr	r3, [r4, #20]
 8006460:	425b      	negs	r3, r3
 8006462:	61a3      	str	r3, [r4, #24]
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	b943      	cbnz	r3, 800647a <__swsetup_r+0xc6>
 8006468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800646c:	d1ba      	bne.n	80063e4 <__swsetup_r+0x30>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	0781      	lsls	r1, r0, #30
 8006472:	bf58      	it	pl
 8006474:	6963      	ldrpl	r3, [r4, #20]
 8006476:	60a3      	str	r3, [r4, #8]
 8006478:	e7f4      	b.n	8006464 <__swsetup_r+0xb0>
 800647a:	2000      	movs	r0, #0
 800647c:	e7f7      	b.n	800646e <__swsetup_r+0xba>
 800647e:	bf00      	nop
 8006480:	2000000c 	.word	0x2000000c
 8006484:	0800690c 	.word	0x0800690c
 8006488:	0800692c 	.word	0x0800692c
 800648c:	080068ec 	.word	0x080068ec

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d06      	ldr	r5, [pc, #24]	; (80064ac <_close_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fa fea5 	bl	80011ea <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000204 	.word	0x20000204

080064b0 <__sflush_r>:
 80064b0:	898a      	ldrh	r2, [r1, #12]
 80064b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b6:	4605      	mov	r5, r0
 80064b8:	0710      	lsls	r0, r2, #28
 80064ba:	460c      	mov	r4, r1
 80064bc:	d458      	bmi.n	8006570 <__sflush_r+0xc0>
 80064be:	684b      	ldr	r3, [r1, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc05      	bgt.n	80064d0 <__sflush_r+0x20>
 80064c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc02      	bgt.n	80064d0 <__sflush_r+0x20>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d0f9      	beq.n	80064ca <__sflush_r+0x1a>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064dc:	682f      	ldr	r7, [r5, #0]
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	d032      	beq.n	8006548 <__sflush_r+0x98>
 80064e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	075a      	lsls	r2, r3, #29
 80064e8:	d505      	bpl.n	80064f6 <__sflush_r+0x46>
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	1ac0      	subs	r0, r0, r3
 80064ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064f0:	b10b      	cbz	r3, 80064f6 <__sflush_r+0x46>
 80064f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f4:	1ac0      	subs	r0, r0, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	4602      	mov	r2, r0
 80064fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064fc:	6a21      	ldr	r1, [r4, #32]
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	d106      	bne.n	8006516 <__sflush_r+0x66>
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	291d      	cmp	r1, #29
 800650c:	d82c      	bhi.n	8006568 <__sflush_r+0xb8>
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <__sflush_r+0x108>)
 8006510:	40ca      	lsrs	r2, r1
 8006512:	07d6      	lsls	r6, r2, #31
 8006514:	d528      	bpl.n	8006568 <__sflush_r+0xb8>
 8006516:	2200      	movs	r2, #0
 8006518:	6062      	str	r2, [r4, #4]
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	d504      	bpl.n	800652c <__sflush_r+0x7c>
 8006522:	1c42      	adds	r2, r0, #1
 8006524:	d101      	bne.n	800652a <__sflush_r+0x7a>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b903      	cbnz	r3, 800652c <__sflush_r+0x7c>
 800652a:	6560      	str	r0, [r4, #84]	; 0x54
 800652c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652e:	602f      	str	r7, [r5, #0]
 8006530:	2900      	cmp	r1, #0
 8006532:	d0ca      	beq.n	80064ca <__sflush_r+0x1a>
 8006534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006538:	4299      	cmp	r1, r3
 800653a:	d002      	beq.n	8006542 <__sflush_r+0x92>
 800653c:	4628      	mov	r0, r5
 800653e:	f000 f8fd 	bl	800673c <_free_r>
 8006542:	2000      	movs	r0, #0
 8006544:	6360      	str	r0, [r4, #52]	; 0x34
 8006546:	e7c1      	b.n	80064cc <__sflush_r+0x1c>
 8006548:	6a21      	ldr	r1, [r4, #32]
 800654a:	2301      	movs	r3, #1
 800654c:	4628      	mov	r0, r5
 800654e:	47b0      	blx	r6
 8006550:	1c41      	adds	r1, r0, #1
 8006552:	d1c7      	bne.n	80064e4 <__sflush_r+0x34>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0c4      	beq.n	80064e4 <__sflush_r+0x34>
 800655a:	2b1d      	cmp	r3, #29
 800655c:	d001      	beq.n	8006562 <__sflush_r+0xb2>
 800655e:	2b16      	cmp	r3, #22
 8006560:	d101      	bne.n	8006566 <__sflush_r+0xb6>
 8006562:	602f      	str	r7, [r5, #0]
 8006564:	e7b1      	b.n	80064ca <__sflush_r+0x1a>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	e7ad      	b.n	80064cc <__sflush_r+0x1c>
 8006570:	690f      	ldr	r7, [r1, #16]
 8006572:	2f00      	cmp	r7, #0
 8006574:	d0a9      	beq.n	80064ca <__sflush_r+0x1a>
 8006576:	0793      	lsls	r3, r2, #30
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	bf08      	it	eq
 800657c:	694b      	ldreq	r3, [r1, #20]
 800657e:	600f      	str	r7, [r1, #0]
 8006580:	bf18      	it	ne
 8006582:	2300      	movne	r3, #0
 8006584:	eba6 0807 	sub.w	r8, r6, r7
 8006588:	608b      	str	r3, [r1, #8]
 800658a:	f1b8 0f00 	cmp.w	r8, #0
 800658e:	dd9c      	ble.n	80064ca <__sflush_r+0x1a>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006594:	4643      	mov	r3, r8
 8006596:	463a      	mov	r2, r7
 8006598:	4628      	mov	r0, r5
 800659a:	47b0      	blx	r6
 800659c:	2800      	cmp	r0, #0
 800659e:	dc06      	bgt.n	80065ae <__sflush_r+0xfe>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ac:	e78e      	b.n	80064cc <__sflush_r+0x1c>
 80065ae:	4407      	add	r7, r0
 80065b0:	eba8 0800 	sub.w	r8, r8, r0
 80065b4:	e7e9      	b.n	800658a <__sflush_r+0xda>
 80065b6:	bf00      	nop
 80065b8:	20400001 	.word	0x20400001

080065bc <_fflush_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	4605      	mov	r5, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b913      	cbnz	r3, 80065cc <_fflush_r+0x10>
 80065c6:	2500      	movs	r5, #0
 80065c8:	4628      	mov	r0, r5
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	b118      	cbz	r0, 80065d6 <_fflush_r+0x1a>
 80065ce:	6983      	ldr	r3, [r0, #24]
 80065d0:	b90b      	cbnz	r3, 80065d6 <_fflush_r+0x1a>
 80065d2:	f7ff fa15 	bl	8005a00 <__sinit>
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <_fflush_r+0x6c>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d11b      	bne.n	8006614 <_fflush_r+0x58>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <_fflush_r+0xa>
 80065e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e8:	07d0      	lsls	r0, r2, #31
 80065ea:	d404      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065ec:	0599      	lsls	r1, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f2:	f7ff faa3 	bl	8005b3c <__retarget_lock_acquire_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7ff ff59 	bl	80064b0 <__sflush_r>
 80065fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006600:	07da      	lsls	r2, r3, #31
 8006602:	4605      	mov	r5, r0
 8006604:	d4e0      	bmi.n	80065c8 <_fflush_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d4dd      	bmi.n	80065c8 <_fflush_r+0xc>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f7ff fa96 	bl	8005b3e <__retarget_lock_release_recursive>
 8006612:	e7d9      	b.n	80065c8 <_fflush_r+0xc>
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <_fflush_r+0x70>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d101      	bne.n	800661e <_fflush_r+0x62>
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	e7df      	b.n	80065de <_fflush_r+0x22>
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <_fflush_r+0x74>)
 8006620:	429c      	cmp	r4, r3
 8006622:	bf08      	it	eq
 8006624:	68ec      	ldreq	r4, [r5, #12]
 8006626:	e7da      	b.n	80065de <_fflush_r+0x22>
 8006628:	0800690c 	.word	0x0800690c
 800662c:	0800692c 	.word	0x0800692c
 8006630:	080068ec 	.word	0x080068ec

08006634 <_lseek_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d07      	ldr	r5, [pc, #28]	; (8006654 <_lseek_r+0x20>)
 8006638:	4604      	mov	r4, r0
 800663a:	4608      	mov	r0, r1
 800663c:	4611      	mov	r1, r2
 800663e:	2200      	movs	r2, #0
 8006640:	602a      	str	r2, [r5, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	f7fa fdf8 	bl	8001238 <_lseek>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_lseek_r+0x1e>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_lseek_r+0x1e>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20000204 	.word	0x20000204

08006658 <__swhatbuf_r>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	460e      	mov	r6, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	2900      	cmp	r1, #0
 8006662:	b096      	sub	sp, #88	; 0x58
 8006664:	4614      	mov	r4, r2
 8006666:	461d      	mov	r5, r3
 8006668:	da08      	bge.n	800667c <__swhatbuf_r+0x24>
 800666a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	602a      	str	r2, [r5, #0]
 8006672:	061a      	lsls	r2, r3, #24
 8006674:	d410      	bmi.n	8006698 <__swhatbuf_r+0x40>
 8006676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800667a:	e00e      	b.n	800669a <__swhatbuf_r+0x42>
 800667c:	466a      	mov	r2, sp
 800667e:	f000 f8bb 	bl	80067f8 <_fstat_r>
 8006682:	2800      	cmp	r0, #0
 8006684:	dbf1      	blt.n	800666a <__swhatbuf_r+0x12>
 8006686:	9a01      	ldr	r2, [sp, #4]
 8006688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800668c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006690:	425a      	negs	r2, r3
 8006692:	415a      	adcs	r2, r3
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	e7ee      	b.n	8006676 <__swhatbuf_r+0x1e>
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	2000      	movs	r0, #0
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	b016      	add	sp, #88	; 0x58
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080066a4 <__smakebuf_r>:
 80066a4:	898b      	ldrh	r3, [r1, #12]
 80066a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066a8:	079d      	lsls	r5, r3, #30
 80066aa:	4606      	mov	r6, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	d507      	bpl.n	80066c0 <__smakebuf_r+0x1c>
 80066b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2301      	movs	r3, #1
 80066ba:	6163      	str	r3, [r4, #20]
 80066bc:	b002      	add	sp, #8
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	ab01      	add	r3, sp, #4
 80066c2:	466a      	mov	r2, sp
 80066c4:	f7ff ffc8 	bl	8006658 <__swhatbuf_r>
 80066c8:	9900      	ldr	r1, [sp, #0]
 80066ca:	4605      	mov	r5, r0
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7ff fa57 	bl	8005b80 <_malloc_r>
 80066d2:	b948      	cbnz	r0, 80066e8 <__smakebuf_r+0x44>
 80066d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d8:	059a      	lsls	r2, r3, #22
 80066da:	d4ef      	bmi.n	80066bc <__smakebuf_r+0x18>
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e7e3      	b.n	80066b0 <__smakebuf_r+0xc>
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <__smakebuf_r+0x7c>)
 80066ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	6163      	str	r3, [r4, #20]
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	6120      	str	r0, [r4, #16]
 80066fe:	b15b      	cbz	r3, 8006718 <__smakebuf_r+0x74>
 8006700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f889 	bl	800681c <_isatty_r>
 800670a:	b128      	cbz	r0, 8006718 <__smakebuf_r+0x74>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	89a0      	ldrh	r0, [r4, #12]
 800671a:	4305      	orrs	r5, r0
 800671c:	81a5      	strh	r5, [r4, #12]
 800671e:	e7cd      	b.n	80066bc <__smakebuf_r+0x18>
 8006720:	08005999 	.word	0x08005999

08006724 <__malloc_lock>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__malloc_lock+0x8>)
 8006726:	f7ff ba09 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 800672a:	bf00      	nop
 800672c:	200001f8 	.word	0x200001f8

08006730 <__malloc_unlock>:
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <__malloc_unlock+0x8>)
 8006732:	f7ff ba04 	b.w	8005b3e <__retarget_lock_release_recursive>
 8006736:	bf00      	nop
 8006738:	200001f8 	.word	0x200001f8

0800673c <_free_r>:
 800673c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673e:	2900      	cmp	r1, #0
 8006740:	d044      	beq.n	80067cc <_free_r+0x90>
 8006742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006746:	9001      	str	r0, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f1a1 0404 	sub.w	r4, r1, #4
 800674e:	bfb8      	it	lt
 8006750:	18e4      	addlt	r4, r4, r3
 8006752:	f7ff ffe7 	bl	8006724 <__malloc_lock>
 8006756:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <_free_r+0x94>)
 8006758:	9801      	ldr	r0, [sp, #4]
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	b933      	cbnz	r3, 800676c <_free_r+0x30>
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	6014      	str	r4, [r2, #0]
 8006762:	b003      	add	sp, #12
 8006764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006768:	f7ff bfe2 	b.w	8006730 <__malloc_unlock>
 800676c:	42a3      	cmp	r3, r4
 800676e:	d908      	bls.n	8006782 <_free_r+0x46>
 8006770:	6825      	ldr	r5, [r4, #0]
 8006772:	1961      	adds	r1, r4, r5
 8006774:	428b      	cmp	r3, r1
 8006776:	bf01      	itttt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	1949      	addeq	r1, r1, r5
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	e7ed      	b.n	800675e <_free_r+0x22>
 8006782:	461a      	mov	r2, r3
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b10b      	cbz	r3, 800678c <_free_r+0x50>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d9fa      	bls.n	8006782 <_free_r+0x46>
 800678c:	6811      	ldr	r1, [r2, #0]
 800678e:	1855      	adds	r5, r2, r1
 8006790:	42a5      	cmp	r5, r4
 8006792:	d10b      	bne.n	80067ac <_free_r+0x70>
 8006794:	6824      	ldr	r4, [r4, #0]
 8006796:	4421      	add	r1, r4
 8006798:	1854      	adds	r4, r2, r1
 800679a:	42a3      	cmp	r3, r4
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	d1e0      	bne.n	8006762 <_free_r+0x26>
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	6053      	str	r3, [r2, #4]
 80067a6:	4421      	add	r1, r4
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	e7da      	b.n	8006762 <_free_r+0x26>
 80067ac:	d902      	bls.n	80067b4 <_free_r+0x78>
 80067ae:	230c      	movs	r3, #12
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	e7d6      	b.n	8006762 <_free_r+0x26>
 80067b4:	6825      	ldr	r5, [r4, #0]
 80067b6:	1961      	adds	r1, r4, r5
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf04      	itt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	bf04      	itt	eq
 80067c4:	1949      	addeq	r1, r1, r5
 80067c6:	6021      	streq	r1, [r4, #0]
 80067c8:	6054      	str	r4, [r2, #4]
 80067ca:	e7ca      	b.n	8006762 <_free_r+0x26>
 80067cc:	b003      	add	sp, #12
 80067ce:	bd30      	pop	{r4, r5, pc}
 80067d0:	200001fc 	.word	0x200001fc

080067d4 <_read_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_read_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fa fcc8 	bl	8001178 <_read>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_read_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_read_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000204 	.word	0x20000204

080067f8 <_fstat_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_fstat_r+0x20>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	f7fa fcfc 	bl	8001202 <_fstat>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d102      	bne.n	8006814 <_fstat_r+0x1c>
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	b103      	cbz	r3, 8006814 <_fstat_r+0x1c>
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	20000204 	.word	0x20000204

0800681c <_isatty_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_isatty_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fcfb 	bl	8001222 <_isatty>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_isatty_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_isatty_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20000204 	.word	0x20000204

0800683c <_init>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	bf00      	nop
 8006840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006842:	bc08      	pop	{r3}
 8006844:	469e      	mov	lr, r3
 8006846:	4770      	bx	lr

08006848 <_fini>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr
