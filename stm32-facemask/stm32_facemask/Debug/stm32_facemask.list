
stm32_facemask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00000210  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000284  20000284  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ec05  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002667  00000000  00000000  0002eca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ce0  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000be0  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003f58  00000000  00000000  00032bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010bbe  00000000  00000000  00036b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c83e4  00000000  00000000  000476e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010faca  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c48  00000000  00000000  0010fb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007840 	.word	0x08007840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007840 	.word	0x08007840

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_SPI_TxCpltCallback+0x24>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d104      	bne.n	800058e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <HAL_SPI_TxCpltCallback+0x28>)
 800058a:	f003 fe29 	bl	80041e0 <HAL_GPIO_WritePin>
  }
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200001b4 	.word	0x200001b4
 800059c:	40020800 	.word	0x40020800

080005a0 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <ILI9341_SPI_Tx+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d1f8      	bne.n	80005ac <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <ILI9341_SPI_Tx+0x30>)
 80005c2:	f005 fe29 	bl	8006218 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200001b4 	.word	0x200001b4

080005d4 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80005e0:	bf00      	nop
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <ILI9341_SPI_TxBuffer+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d1f8      	bne.n	80005e2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	461a      	mov	r2, r3
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <ILI9341_SPI_TxBuffer+0x30>)
 80005f8:	f005 fe0e 	bl	8006218 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001b4 	.word	0x200001b4

08000608 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000612:	2200      	movs	r2, #0
 8000614:	2104      	movs	r1, #4
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <ILI9341_WriteCommand+0x30>)
 8000618:	f003 fde2 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <ILI9341_WriteCommand+0x30>)
 8000622:	f003 fddd 	bl	80041e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffb9 	bl	80005a0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020800 	.word	0x40020800

0800063c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000646:	2201      	movs	r2, #1
 8000648:	2104      	movs	r1, #4
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <ILI9341_WriteData+0x30>)
 800064c:	f003 fdc8 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000650:	2200      	movs	r2, #0
 8000652:	2102      	movs	r1, #2
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <ILI9341_WriteData+0x30>)
 8000656:	f003 fdc3 	bl	80041e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff9f 	bl	80005a0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40020800 	.word	0x40020800

08000670 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800067c:	2201      	movs	r2, #1
 800067e:	2104      	movs	r1, #4
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <ILI9341_WriteBuffer+0x34>)
 8000682:	f003 fdad 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <ILI9341_WriteBuffer+0x34>)
 800068c:	f003 fda8 	bl	80041e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	4619      	mov	r1, r3
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff9d 	bl	80005d4 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800

080006a8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4604      	mov	r4, r0
 80006b0:	4608      	mov	r0, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4623      	mov	r3, r4
 80006b8:	80fb      	strh	r3, [r7, #6]
 80006ba:	4603      	mov	r3, r0
 80006bc:	80bb      	strh	r3, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	807b      	strh	r3, [r7, #2]
 80006c2:	4613      	mov	r3, r2
 80006c4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff8e 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffbc 	bl	8000670 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000708:	883b      	ldrh	r3, [r7, #0]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	b29b      	uxth	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000712:	883b      	ldrh	r3, [r7, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000718:	202b      	movs	r0, #43	; 0x2b
 800071a:	f7ff ff75 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2104      	movs	r1, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffa3 	bl	8000670 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800072a:	202c      	movs	r0, #44	; 0x2c
 800072c:	f7ff ff6c 	bl	8000608 <ILI9341_WriteCommand>
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800073c:	2200      	movs	r2, #0
 800073e:	2108      	movs	r1, #8
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <ILI9341_Reset+0x3c>)
 8000742:	f003 fd4d 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f001 fa2e 	bl	8001ba8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800074c:	2200      	movs	r2, #0
 800074e:	2102      	movs	r1, #2
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <ILI9341_Reset+0x3c>)
 8000752:	f003 fd45 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000756:	200a      	movs	r0, #10
 8000758:	f001 fa26 	bl	8001ba8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800075c:	2201      	movs	r2, #1
 800075e:	2108      	movs	r1, #8
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <ILI9341_Reset+0x3c>)
 8000762:	f003 fd3d 	bl	80041e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000766:	2201      	movs	r2, #1
 8000768:	2102      	movs	r1, #2
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <ILI9341_Reset+0x3c>)
 800076c:	f003 fd38 	bl	80041e0 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020800 	.word	0x40020800

08000778 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <ILI9341_Enable+0x14>)
 8000782:	f003 fd2d 	bl	80041e0 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40020800 	.word	0x40020800

08000790 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000794:	f7ff fff0 	bl	8000778 <ILI9341_Enable>
	ILI9341_Reset();
 8000798:	f7ff ffce 	bl	8000738 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff33 	bl	8000608 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80007a2:	200a      	movs	r0, #10
 80007a4:	f001 fa00 	bl	8001ba8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80007a8:	20cb      	movs	r0, #203	; 0xcb
 80007aa:	f7ff ff2d 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80007ae:	2039      	movs	r0, #57	; 0x39
 80007b0:	f7ff ff44 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80007b4:	202c      	movs	r0, #44	; 0x2c
 80007b6:	f7ff ff41 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ff3e 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80007c0:	2034      	movs	r0, #52	; 0x34
 80007c2:	f7ff ff3b 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff ff38 	bl	800063c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80007cc:	20cf      	movs	r0, #207	; 0xcf
 80007ce:	f7ff ff1b 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff32 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80007d8:	20c1      	movs	r0, #193	; 0xc1
 80007da:	f7ff ff2f 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80007de:	2030      	movs	r0, #48	; 0x30
 80007e0:	f7ff ff2c 	bl	800063c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80007e4:	20e8      	movs	r0, #232	; 0xe8
 80007e6:	f7ff ff0f 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80007ea:	2085      	movs	r0, #133	; 0x85
 80007ec:	f7ff ff26 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ff23 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80007f6:	2078      	movs	r0, #120	; 0x78
 80007f8:	f7ff ff20 	bl	800063c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80007fc:	20ea      	movs	r0, #234	; 0xea
 80007fe:	f7ff ff03 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff1a 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff17 	bl	800063c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800080e:	20ed      	movs	r0, #237	; 0xed
 8000810:	f7ff fefa 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f7ff ff11 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff0e 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000820:	2012      	movs	r0, #18
 8000822:	f7ff ff0b 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000826:	2081      	movs	r0, #129	; 0x81
 8000828:	f7ff ff08 	bl	800063c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800082c:	20f7      	movs	r0, #247	; 0xf7
 800082e:	f7ff feeb 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff ff02 	bl	800063c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000838:	20c0      	movs	r0, #192	; 0xc0
 800083a:	f7ff fee5 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800083e:	2023      	movs	r0, #35	; 0x23
 8000840:	f7ff fefc 	bl	800063c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000844:	20c1      	movs	r0, #193	; 0xc1
 8000846:	f7ff fedf 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800084a:	2010      	movs	r0, #16
 800084c:	f7ff fef6 	bl	800063c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000850:	20c5      	movs	r0, #197	; 0xc5
 8000852:	f7ff fed9 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000856:	203e      	movs	r0, #62	; 0x3e
 8000858:	f7ff fef0 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f7ff feed 	bl	800063c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000862:	20c7      	movs	r0, #199	; 0xc7
 8000864:	f7ff fed0 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000868:	2086      	movs	r0, #134	; 0x86
 800086a:	f7ff fee7 	bl	800063c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800086e:	2036      	movs	r0, #54	; 0x36
 8000870:	f7ff feca 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000874:	2048      	movs	r0, #72	; 0x48
 8000876:	f7ff fee1 	bl	800063c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800087a:	203a      	movs	r0, #58	; 0x3a
 800087c:	f7ff fec4 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000880:	2055      	movs	r0, #85	; 0x55
 8000882:	f7ff fedb 	bl	800063c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000886:	20b1      	movs	r0, #177	; 0xb1
 8000888:	f7ff febe 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff fed5 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000892:	2018      	movs	r0, #24
 8000894:	f7ff fed2 	bl	800063c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000898:	20b6      	movs	r0, #182	; 0xb6
 800089a:	f7ff feb5 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800089e:	2008      	movs	r0, #8
 80008a0:	f7ff fecc 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80008a4:	2082      	movs	r0, #130	; 0x82
 80008a6:	f7ff fec9 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80008aa:	2027      	movs	r0, #39	; 0x27
 80008ac:	f7ff fec6 	bl	800063c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80008b0:	20f2      	movs	r0, #242	; 0xf2
 80008b2:	f7ff fea9 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fec0 	bl	800063c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80008bc:	2026      	movs	r0, #38	; 0x26
 80008be:	f7ff fea3 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff feba 	bl	800063c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80008c8:	20e0      	movs	r0, #224	; 0xe0
 80008ca:	f7ff fe9d 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f7ff feb4 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80008d4:	2031      	movs	r0, #49	; 0x31
 80008d6:	f7ff feb1 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80008da:	202b      	movs	r0, #43	; 0x2b
 80008dc:	f7ff feae 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80008e0:	200c      	movs	r0, #12
 80008e2:	f7ff feab 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80008e6:	200e      	movs	r0, #14
 80008e8:	f7ff fea8 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80008ec:	2008      	movs	r0, #8
 80008ee:	f7ff fea5 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80008f2:	204e      	movs	r0, #78	; 0x4e
 80008f4:	f7ff fea2 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80008f8:	20f1      	movs	r0, #241	; 0xf1
 80008fa:	f7ff fe9f 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80008fe:	2037      	movs	r0, #55	; 0x37
 8000900:	f7ff fe9c 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000904:	2007      	movs	r0, #7
 8000906:	f7ff fe99 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800090a:	2010      	movs	r0, #16
 800090c:	f7ff fe96 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff fe93 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000916:	200e      	movs	r0, #14
 8000918:	f7ff fe90 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800091c:	2009      	movs	r0, #9
 800091e:	f7ff fe8d 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fe8a 	bl	800063c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000928:	20e1      	movs	r0, #225	; 0xe1
 800092a:	f7ff fe6d 	bl	8000608 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fe84 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000934:	200e      	movs	r0, #14
 8000936:	f7ff fe81 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800093a:	2014      	movs	r0, #20
 800093c:	f7ff fe7e 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000940:	2003      	movs	r0, #3
 8000942:	f7ff fe7b 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fe78 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800094c:	2007      	movs	r0, #7
 800094e:	f7ff fe75 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000952:	2031      	movs	r0, #49	; 0x31
 8000954:	f7ff fe72 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000958:	20c1      	movs	r0, #193	; 0xc1
 800095a:	f7ff fe6f 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800095e:	2048      	movs	r0, #72	; 0x48
 8000960:	f7ff fe6c 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000964:	2008      	movs	r0, #8
 8000966:	f7ff fe69 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800096a:	200f      	movs	r0, #15
 800096c:	f7ff fe66 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000970:	200c      	movs	r0, #12
 8000972:	f7ff fe63 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000976:	2031      	movs	r0, #49	; 0x31
 8000978:	f7ff fe60 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f7ff fe5d 	bl	800063c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000982:	200f      	movs	r0, #15
 8000984:	f7ff fe5a 	bl	800063c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000988:	2011      	movs	r0, #17
 800098a:	f7ff fe3d 	bl	8000608 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f001 f90a 	bl	8001ba8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000994:	2029      	movs	r0, #41	; 0x29
 8000996:	f7ff fe37 	bl	8000608 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f802 	bl	80009a4 <ILI9341_SetRotation>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80009ae:	2036      	movs	r0, #54	; 0x36
 80009b0:	f7ff fe2a 	bl	8000608 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f001 f8f7 	bl	8001ba8 <HAL_Delay>

	switch(rotation)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d837      	bhi.n	8000a30 <ILI9341_SetRotation+0x8c>
 80009c0:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <ILI9341_SetRotation+0x24>)
 80009c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c6:	bf00      	nop
 80009c8:	080009d9 	.word	0x080009d9
 80009cc:	080009ef 	.word	0x080009ef
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a1b 	.word	0x08000a1b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80009d8:	2048      	movs	r0, #72	; 0x48
 80009da:	f7ff fe2f 	bl	800063c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <ILI9341_SetRotation+0x98>)
 80009e0:	22f0      	movs	r2, #240	; 0xf0
 80009e2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <ILI9341_SetRotation+0x9c>)
 80009e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009ea:	801a      	strh	r2, [r3, #0]
		break;
 80009ec:	e021      	b.n	8000a32 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80009ee:	2028      	movs	r0, #40	; 0x28
 80009f0:	f7ff fe24 	bl	800063c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <ILI9341_SetRotation+0x98>)
 80009f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009fa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <ILI9341_SetRotation+0x9c>)
 80009fe:	22f0      	movs	r2, #240	; 0xf0
 8000a00:	801a      	strh	r2, [r3, #0]
		break;
 8000a02:	e016      	b.n	8000a32 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000a04:	2088      	movs	r0, #136	; 0x88
 8000a06:	f7ff fe19 	bl	800063c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <ILI9341_SetRotation+0x98>)
 8000a0c:	22f0      	movs	r2, #240	; 0xf0
 8000a0e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <ILI9341_SetRotation+0x9c>)
 8000a12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a16:	801a      	strh	r2, [r3, #0]
		break;
 8000a18:	e00b      	b.n	8000a32 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000a1a:	20e8      	movs	r0, #232	; 0xe8
 8000a1c:	f7ff fe0e 	bl	800063c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <ILI9341_SetRotation+0x98>)
 8000a22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a26:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <ILI9341_SetRotation+0x9c>)
 8000a2a:	22f0      	movs	r2, #240	; 0xf0
 8000a2c:	801a      	strh	r2, [r3, #0]
		break;
 8000a2e:	e000      	b.n	8000a32 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000002 	.word	0x20000002
 8000a40:	20000000 	.word	0x20000000

08000a44 <ov7670_gpio_init>:
/*** Internal Function Declarations ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
void ov7670_gpio_init(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

	    // Configure GPIO pins for camera
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <ov7670_gpio_init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

	    GPIO_InitStruct.Pin = HS_Pin | PCLK_Pin | XCLK_Pin;
 8000aae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab2:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4840      	ldr	r0, [pc, #256]	; (8000bc8 <ov7670_gpio_init+0x184>)
 8000ac8:	f003 f9d6 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	483a      	ldr	r0, [pc, #232]	; (8000bcc <ov7670_gpio_init+0x188>)
 8000ae4:	f003 f9c8 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDA_Pin;
 8000ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aec:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aee:	2311      	movs	r3, #17
 8000af0:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4833      	ldr	r0, [pc, #204]	; (8000bd0 <ov7670_gpio_init+0x18c>)
 8000b02:	f003 f9b9 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SCL_Pin;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	60fb      	str	r3, [r7, #12]
	   	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
	   	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
	   	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
	   	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <ov7670_gpio_init+0x18c>)
 8000b20:	f003 f9aa 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = D0_Pin | D1_Pin | D2_Pin | D3_Pin | D4_Pin;
 8000b24:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8000b28:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <ov7670_gpio_init+0x188>)
 8000b3e:	f003 f99b 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = D5_Pin | D6_Pin | D7_Pin | VS_Pin;
 8000b42:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b46:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <ov7670_gpio_init+0x18c>)
 8000b5c:	f003 f98c 	bl	8003e78 <HAL_GPIO_Init>

	    // Configure LCD Pins
	    GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin | LCD_RST_Pin;
 8000b60:	230e      	movs	r3, #14
 8000b62:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <ov7670_gpio_init+0x188>)
 8000b78:	f003 f97e 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <ov7670_gpio_init+0x184>)
 8000b98:	f003 f96e 	bl	8003e78 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bac:	2305      	movs	r3, #5
 8000bae:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <ov7670_gpio_init+0x18c>)
 8000bb8:	f003 f95e 	bl	8003e78 <HAL_GPIO_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <ov7670_config_dcmi>:
void ov7670_config_dcmi(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
		__HAL_RCC_DCMI_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <ov7670_config_dcmi+0x80>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <ov7670_config_dcmi+0x80>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <ov7670_config_dcmi+0x80>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

	    // Configure DCMI peripheral
		sp_hdcmi->Instance = DCMI;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <ov7670_config_dcmi+0x88>)
 8000bfc:	601a      	str	r2, [r3, #0]
		sp_hdcmi->Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
		sp_hdcmi->Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	609a      	str	r2, [r3, #8]
		sp_hdcmi->Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
		sp_hdcmi->Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
		sp_hdcmi->Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
		sp_hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
	    HAL_DCMI_Init(sp_hdcmi);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fb28 	bl	8002288 <HAL_DCMI_Init>
	    // Start DCMI capture
	    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)s_destAddressForContiuousMode, (IMAGE_SIZE_HEIGHT * IMAGE_SIZE_WIDTH * 2));
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <ov7670_config_dcmi+0x84>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <ov7670_config_dcmi+0x8c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000c44:	2100      	movs	r1, #0
 8000c46:	f001 f8e5 	bl	8001e14 <HAL_DCMI_Start_DMA>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	20000090 	.word	0x20000090
 8000c5c:	50050000 	.word	0x50050000
 8000c60:	2000009c 	.word	0x2000009c

08000c64 <ov7670_init>:
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
    sp_hdcmi = p_hdcmi;
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <ov7670_init+0x7c>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6013      	str	r3, [r2, #0]
    sp_hdma_dcmi = p_hdma_dcmi;
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <ov7670_init+0x80>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	6013      	str	r3, [r2, #0]
    sp_hi2c = p_hi2c;
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <ov7670_init+0x84>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
    s_destAddressForContiuousMode = 0;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <ov7670_init+0x88>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

    ov7670_gpio_init();
 8000c88:	f7ff fedc 	bl	8000a44 <ov7670_gpio_init>
    ov7670_config_dcmi();
 8000c8c:	f7ff ffa2 	bl	8000bd4 <ov7670_config_dcmi>

    // Camera reset sequence
    HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2120      	movs	r1, #32
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <ov7670_init+0x8c>)
 8000c96:	f003 faa3 	bl	80041e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	; 0x64
 8000c9c:	f000 ff84 	bl	8001ba8 <HAL_Delay>
    HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <ov7670_init+0x8c>)
 8000ca6:	f003 fa9b 	bl	80041e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f000 ff7c 	bl	8001ba8 <HAL_Delay>

    // Camera initialization
    ov7670_write(0x12, 0x80);  // RESET
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	2012      	movs	r0, #18
 8000cb4:	f000 f994 	bl	8000fe0 <ov7670_write>
    HAL_Delay(30);
 8000cb8:	201e      	movs	r0, #30
 8000cba:	f000 ff75 	bl	8001ba8 <HAL_Delay>

    uint8_t buffer[4];
    ov7670_read(0x0b, buffer);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	200b      	movs	r0, #11
 8000cc6:	f000 f9ab 	bl	8001020 <ov7670_read>
    printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000cca:	7d3b      	ldrb	r3, [r7, #20]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <ov7670_init+0x90>)
 8000cd0:	f005 fe28 	bl	8006924 <iprintf>

    return RET_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	20000094 	.word	0x20000094
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	2000009c 	.word	0x2000009c
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	08007858 	.word	0x08007858

08000cf8 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    ov7670_stopCap();
 8000d00:	f000 f858 	bl	8000db4 <ov7670_stopCap>
    ov7670_write(0x12, 0x80);  // RESET
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	2012      	movs	r0, #18
 8000d08:	f000 f96a 	bl	8000fe0 <ov7670_write>
    HAL_Delay(30);
 8000d0c:	201e      	movs	r0, #30
 8000d0e:	f000 ff4b 	bl	8001ba8 <HAL_Delay>

    // Configure camera registers
    for (int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e012      	b.n	8000d3e <ov7670_config+0x46>
        ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <ov7670_config+0x5c>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <ov7670_config+0x5c>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	440b      	add	r3, r1
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f000 f957 	bl	8000fe0 <ov7670_write>
        HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 ff38 	bl	8001ba8 <HAL_Delay>
    for (int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <ov7670_config+0x5c>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000d46:	2bff      	cmp	r3, #255	; 0xff
 8000d48:	d1e6      	bne.n	8000d18 <ov7670_config+0x20>
    }

    return RET_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08007870 	.word	0x08007870

08000d58 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    ov7670_stopCap();
 8000d62:	f000 f827 	bl	8000db4 <ov7670_stopCap>

    if (capMode == OV7670_CAP_CONTINUOUS) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10b      	bne.n	8000d84 <ov7670_startCap+0x2c>
        /* Note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
        s_destAddressForContiuousMode = destAddress;
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <ov7670_startCap+0x54>)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6013      	str	r3, [r2, #0]
        HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <ov7670_startCap+0x58>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f001 f849 	bl	8001e14 <HAL_DCMI_Start_DMA>
 8000d82:	e00d      	b.n	8000da0 <ov7670_startCap+0x48>
    } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d10a      	bne.n	8000da0 <ov7670_startCap+0x48>
        s_destAddressForContiuousMode = 0;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <ov7670_startCap+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
        HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <ov7670_startCap+0x58>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	f001 f83a 	bl	8001e14 <HAL_DCMI_Start_DMA>
    }

    return RET_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000009c 	.word	0x2000009c
 8000db0:	20000090 	.word	0x20000090

08000db4 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	s_destAddressForContiuousMode = 0;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <ov7670_stopCap+0x1c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Stop(sp_hdcmi);
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <ov7670_stopCap+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 f8c6 	bl	8001f54 <HAL_DCMI_Stop>

    return RET_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	20000090 	.word	0x20000090

08000dd8 <HAL_DCMI_FrameEventCallback>:
    s_cbHsync = cbHsync;
    s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    if (s_cbVsync)
 8000de0:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <HAL_DCMI_FrameEventCallback+0x1b4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_DCMI_FrameEventCallback+0x1c>
        s_cbVsync(s_currentV);
 8000de8:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_DCMI_FrameEventCallback+0x1b4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a68      	ldr	r2, [pc, #416]	; (8000f90 <HAL_DCMI_FrameEventCallback+0x1b8>)
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	4610      	mov	r0, r2
 8000df2:	4798      	blx	r3

    if (s_destAddressForContiuousMode != 0) {
 8000df4:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <HAL_DCMI_FrameEventCallback+0x1bc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00b      	beq.n	8000e14 <HAL_DCMI_FrameEventCallback+0x3c>
        HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3328      	adds	r3, #40	; 0x28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4b62      	ldr	r3, [pc, #392]	; (8000f94 <HAL_DCMI_FrameEventCallback+0x1bc>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000e10:	f001 fb56 	bl	80024c0 <HAL_DMA_Start_IT>
                         OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
    }

    s_currentV++;
 8000e14:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <HAL_DCMI_FrameEventCallback+0x1b8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a5d      	ldr	r2, [pc, #372]	; (8000f90 <HAL_DCMI_FrameEventCallback+0x1b8>)
 8000e1c:	6013      	str	r3, [r2, #0]
    s_currentH = 0;
 8000e1e:	4b5e      	ldr	r3, [pc, #376]	; (8000f98 <HAL_DCMI_FrameEventCallback+0x1c0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

    // Display the capture image on the LCD
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2102      	movs	r1, #2
 8000e28:	485c      	ldr	r0, [pc, #368]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000e2a:	f003 f9d9 	bl	80041e0 <HAL_GPIO_WritePin>
    ILI9341_SetAddress(0, 0, IMAGE_SIZE_WIDTH - 1, IMAGE_SIZE_HEIGHT - 1);
 8000e2e:	23ef      	movs	r3, #239	; 0xef
 8000e30:	f240 123f 	movw	r2, #319	; 0x13f
 8000e34:	2100      	movs	r1, #0
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fc36 	bl	80006a8 <ILI9341_SetAddress>

    // Send the image data to the LCD
    for (int j = 0; j < OV7670_QVGA_HEIGHT; j++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e097      	b.n	8000f72 <HAL_DCMI_FrameEventCallback+0x19a>
        for (int i = 0; i < OV7670_QVGA_WIDTH; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	e08c      	b.n	8000f62 <HAL_DCMI_FrameEventCallback+0x18a>
            uint8_t pixelData = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) << 6);
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4853      	ldr	r0, [pc, #332]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000e50:	f003 f9ae 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	019b      	lsls	r3, r3, #6
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) << 7);
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	484c      	ldr	r0, [pc, #304]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000e6a:	f003 f9a1 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	b25a      	sxtb	r2, r3
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) << 8);
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	4845      	ldr	r0, [pc, #276]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000e86:	f003 f993 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) << 9);
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	483e      	ldr	r0, [pc, #248]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000ea2:	f003 f985 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) << 0xB);
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	4837      	ldr	r0, [pc, #220]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000ebe:	f003 f977 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	02db      	lsls	r3, r3, #11
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 6);
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <HAL_DCMI_FrameEventCallback+0x1c8>)
 8000ed8:	f003 f96a 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	019b      	lsls	r3, r3, #6
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) << 8);
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <HAL_DCMI_FrameEventCallback+0x1c8>)
 8000ef4:	f003 f95c 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b25a      	sxtb	r2, r3
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	73fb      	strb	r3, [r7, #15]
            pixelData |= (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) << 9);
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <HAL_DCMI_FrameEventCallback+0x1c8>)
 8000f10:	f003 f94e 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	025b      	lsls	r3, r3, #9
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	73fb      	strb	r3, [r7, #15]

            HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2104      	movs	r1, #4
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000f2c:	f003 f958 	bl	80041e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2102      	movs	r1, #2
 8000f34:	4819      	ldr	r0, [pc, #100]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000f36:	f003 f953 	bl	80041e0 <HAL_GPIO_WritePin>
            ILI9341_WriteData(pixelData);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb7d 	bl	800063c <ILI9341_WriteData>
            HAL_SPI_Transmit(&hspi1, (uint8_t *)&pixelData, 1, HAL_MAX_DELAY);
 8000f42:	f107 010f 	add.w	r1, r7, #15
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_DCMI_FrameEventCallback+0x1cc>)
 8000f4e:	f005 f826 	bl	8005f9e <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000f58:	f003 f942 	bl	80041e0 <HAL_GPIO_WritePin>
        for (int i = 0; i < OV7670_QVGA_WIDTH; i++) {
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f68:	f6ff af6e 	blt.w	8000e48 <HAL_DCMI_FrameEventCallback+0x70>
    for (int j = 0; j < OV7670_QVGA_HEIGHT; j++) {
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2bef      	cmp	r3, #239	; 0xef
 8000f76:	f77f af64 	ble.w	8000e42 <HAL_DCMI_FrameEventCallback+0x6a>
        }
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HAL_DCMI_FrameEventCallback+0x1c4>)
 8000f80:	f003 f92e 	bl	80041e0 <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000a4 	.word	0x200000a4
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	200000a8 	.word	0x200000a8
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	200001b4 	.word	0x200001b4

08000fa8 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (s_cbHsync)
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_DCMI_VsyncEventCallback+0x1c>
        s_cbHsync(s_currentH);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_DCMI_VsyncEventCallback+0x34>)
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4798      	blx	r3

    s_currentH++;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_DCMI_VsyncEventCallback+0x34>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_DCMI_VsyncEventCallback+0x34>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a0 	.word	0x200000a0
 8000fdc:	200000a8 	.word	0x200000a8

08000fe0 <ov7670_write>:

static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;

    do {
        ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <ov7670_write+0x3c>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	2142      	movs	r1, #66	; 0x42
 8001008:	f003 fd6c 	bl	8004ae4 <HAL_I2C_Mem_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
    } while (ret != HAL_OK && 0);

    return ret;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000098 	.word	0x20000098

08001020 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret;

    do {
        // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
        ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <ov7670_read+0x48>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	1dfa      	adds	r2, r7, #7
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	2142      	movs	r1, #66	; 0x42
 800103a:	f003 fa2f 	bl	800449c <HAL_I2C_Master_Transmit>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
        ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <ov7670_read+0x48>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	2142      	movs	r1, #66	; 0x42
 8001050:	f003 fb22 	bl	8004698 <HAL_I2C_Master_Receive>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4313      	orrs	r3, r2
 800105c:	73fb      	strb	r3, [r7, #15]
    } while (ret != HAL_OK && 0);

    return ret;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000098 	.word	0x20000098

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fd28 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f826 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f95e 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 800107c:	f000 f934 	bl	80012e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001080:	f000 f8fc 	bl	800127c <MX_SPI1_Init>
  MX_RNG_Init();
 8001084:	f000 f8e6 	bl	8001254 <MX_RNG_Init>
  MX_DCMI_Init();
 8001088:	f000 f88e 	bl	80011a8 <MX_DCMI_Init>
  MX_I2C2_Init();
 800108c:	f000 f8b4 	bl	80011f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//  tft_init();
  ILI9341_Init();
 8001090:	f7ff fb7e 	bl	8000790 <ILI9341_Init>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <main+0x48>)
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <main+0x4c>)
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <main+0x50>)
 800109a:	f7ff fde3 	bl	8000c64 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fe2a 	bl	8000cf8 <ov7670_config>
  ov7670_startCap(OV7670_MODE_QVGA_RGB565, s_destAddressForContiuousMode);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <main+0x54>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe54 	bl	8000d58 <ov7670_startCap>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80010b0:	e7fe      	b.n	80010b0 <main+0x44>
 80010b2:	bf00      	nop
 80010b4:	20000150 	.word	0x20000150
 80010b8:	200000f0 	.word	0x200000f0
 80010bc:	200000b0 	.word	0x200000b0
 80010c0:	2000009c 	.word	0x2000009c

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fc1e 	bl	8006914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <SystemClock_Config+0xdc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <SystemClock_Config+0xdc>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <SystemClock_Config+0xdc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <SystemClock_Config+0xe0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <SystemClock_Config+0xe0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SystemClock_Config+0xe0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	2310      	movs	r3, #16
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800113c:	2310      	movs	r3, #16
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001148:	2307      	movs	r3, #7
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f985 	bl	8005460 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800115c:	f000 f98e 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2105      	movs	r1, #5
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fbe6 	bl	8005950 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800118a:	f000 f977 	bl	800147c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f004 fcc2 	bl	8005b1c <HAL_RCC_MCOConfig>
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	; 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011ae:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <MX_DCMI_Init+0x4c>)
 80011b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011ba:	2220      	movs	r2, #32
 80011bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_DCMI_Init+0x48>)
 80011de:	f001 f853 	bl	8002288 <HAL_DCMI_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80011e8:	f000 f948 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000b0 	.word	0x200000b0
 80011f4:	50050000 	.word	0x50050000

080011f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C2_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C2_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C2_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C2_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C2_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C2_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C2_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C2_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C2_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C2_Init+0x50>)
 8001236:	f002 ffed 	bl	8004214 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 f91c 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000150 	.word	0x20000150
 800124c:	40005800 	.word	0x40005800
 8001250:	000186a0 	.word	0x000186a0

08001254 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_RNG_Init+0x20>)
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <MX_RNG_Init+0x24>)
 800125c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_RNG_Init+0x20>)
 8001260:	f004 fdea 	bl	8005e38 <HAL_RNG_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800126a:	f000 f907 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001a4 	.word	0x200001a4
 8001278:	50060800 	.word	0x50060800

0800127c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_SPI1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_SPI1_Init+0x64>)
 80012ce:	f004 fddd 	bl	8005e8c <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 f8d0 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001b4 	.word	0x200001b4
 80012e4:	40013000 	.word	0x40013000

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_DMA_Init+0x4c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_DMA_Init+0x4c>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_DMA_Init+0x4c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2039      	movs	r0, #57	; 0x39
 8001310:	f000 fd49 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001314:	2039      	movs	r0, #57	; 0x39
 8001316:	f000 fd62 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	203b      	movs	r0, #59	; 0x3b
 8001320:	f000 fd41 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001324:	203b      	movs	r0, #59	; 0x3b
 8001326:	f000 fd5a 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <MX_GPIO_Init+0x134>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a45      	ldr	r2, [pc, #276]	; (800146c <MX_GPIO_Init+0x134>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b43      	ldr	r3, [pc, #268]	; (800146c <MX_GPIO_Init+0x134>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <MX_GPIO_Init+0x134>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a3e      	ldr	r2, [pc, #248]	; (800146c <MX_GPIO_Init+0x134>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_GPIO_Init+0x134>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <MX_GPIO_Init+0x134>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a37      	ldr	r2, [pc, #220]	; (800146c <MX_GPIO_Init+0x134>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <MX_GPIO_Init+0x134>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <MX_GPIO_Init+0x134>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a30      	ldr	r2, [pc, #192]	; (800146c <MX_GPIO_Init+0x134>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <MX_GPIO_Init+0x134>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin|CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	212e      	movs	r1, #46	; 0x2e
 80013c2:	482b      	ldr	r0, [pc, #172]	; (8001470 <MX_GPIO_Init+0x138>)
 80013c4:	f002 ff0c 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80013c8:	230e      	movs	r3, #14
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4824      	ldr	r0, [pc, #144]	; (8001470 <MX_GPIO_Init+0x138>)
 80013e0:	f002 fd4a 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 80013e4:	2320      	movs	r3, #32
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <MX_GPIO_Init+0x138>)
 80013fc:	f002 fd3c 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4815      	ldr	r0, [pc, #84]	; (8001474 <MX_GPIO_Init+0x13c>)
 800141e:	f002 fd2b 	bl	8003e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8001422:	23a0      	movs	r3, #160	; 0xa0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800142a:	2302      	movs	r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001432:	2305      	movs	r3, #5
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_GPIO_Init+0x13c>)
 800143e:	f002 fd1b 	bl	8003e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001442:	2310      	movs	r3, #16
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001452:	2305      	movs	r3, #5
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_GPIO_Init+0x140>)
 800145e:	f002 fd0b 	bl	8003e78 <HAL_GPIO_Init>

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x4>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a54      	ldr	r2, [pc, #336]	; (8001644 <HAL_DCMI_MspInit+0x170>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 80a1 	bne.w	800163a <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6353      	str	r3, [r2, #52]	; 0x34
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a43      	ldr	r2, [pc, #268]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a3c      	ldr	r2, [pc, #240]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_DCMI_MspInit+0x174>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001568:	2350      	movs	r3, #80	; 0x50
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001570:	2302      	movs	r3, #2
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001578:	230d      	movs	r3, #13
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4832      	ldr	r0, [pc, #200]	; (800164c <HAL_DCMI_MspInit+0x178>)
 8001584:	f002 fc78 	bl	8003e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001588:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800158c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001592:	2302      	movs	r3, #2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800159a:	230d      	movs	r3, #13
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	482a      	ldr	r0, [pc, #168]	; (8001650 <HAL_DCMI_MspInit+0x17c>)
 80015a6:	f002 fc67 	bl	8003e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015bc:	230d      	movs	r3, #13
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <HAL_DCMI_MspInit+0x180>)
 80015c8:	f002 fc56 	bl	8003e78 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_DCMI_MspInit+0x188>)
 80015d0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 8001610:	f000 fea8 	bl	8002364 <HAL_DMA_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 800161a:	f7ff ff2f 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_DCMI_MspInit+0x184>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	204e      	movs	r0, #78	; 0x4e
 8001630:	f000 fbb9 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001634:	204e      	movs	r0, #78	; 0x4e
 8001636:	f000 fbd2 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	; 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	50050000 	.word	0x50050000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020800 	.word	0x40020800
 8001654:	40020400 	.word	0x40020400
 8001658:	200000f0 	.word	0x200000f0
 800165c:	40026428 	.word	0x40026428

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_I2C_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12c      	bne.n	80016dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800169e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b0:	2304      	movs	r3, #4
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <HAL_I2C_MspInit+0x8c>)
 80016bc:	f002 fbdc 	bl	8003e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005800 	.word	0x40005800
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_RNG_MspInit+0x3c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10d      	bne.n	800171e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RNG_MspInit+0x40>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RNG_MspInit+0x40>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_RNG_MspInit+0x40>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	50060800 	.word	0x50060800
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a43      	ldr	r2, [pc, #268]	; (8001860 <HAL_SPI_MspInit+0x12c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d17f      	bne.n	8001856 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <HAL_SPI_MspInit+0x130>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a41      	ldr	r2, [pc, #260]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <HAL_SPI_MspInit+0x130>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a33      	ldr	r2, [pc, #204]	; (8001864 <HAL_SPI_MspInit+0x130>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_SPI_MspInit+0x130>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017aa:	23a0      	movs	r3, #160	; 0xa0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4828      	ldr	r0, [pc, #160]	; (8001868 <HAL_SPI_MspInit+0x134>)
 80017c6:	f002 fb57 	bl	8003e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ca:	2310      	movs	r3, #16
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2305      	movs	r3, #5
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4821      	ldr	r0, [pc, #132]	; (800186c <HAL_SPI_MspInit+0x138>)
 80017e6:	f002 fb47 	bl	8003e78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_SPI_MspInit+0x140>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 80017f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 800182c:	f000 fd9a 	bl	8002364 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001836:	f7ff fe21 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 800183e:	649a      	str	r2, [r3, #72]	; 0x48
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_SPI_MspInit+0x13c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2023      	movs	r0, #35	; 0x23
 800184c:	f000 faab 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001850:	2023      	movs	r0, #35	; 0x23
 8001852:	f000 fac4 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000
 800186c:	40020400 	.word	0x40020400
 8001870:	2000020c 	.word	0x2000020c
 8001874:	40026458 	.word	0x40026458

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f94c 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <SPI1_IRQHandler+0x10>)
 80018da:	f004 fd53 	bl	8006384 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001b4 	.word	0x200001b4

080018e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA2_Stream1_IRQHandler+0x10>)
 80018ee:	f000 fed1 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000f0 	.word	0x200000f0

080018fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <DMA2_Stream3_IRQHandler+0x10>)
 8001902:	f000 fec7 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000020c 	.word	0x2000020c

08001910 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DCMI_IRQHandler+0x10>)
 8001916:	f000 fb79 	bl	800200c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000b0 	.word	0x200000b0

08001924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
	}
	return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x50>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x16>
		heap_end = &end;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <_sbrk+0x50>)
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <_sbrk+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <_sbrk+0x50>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <_sbrk+0x50>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	466a      	mov	r2, sp
 80019be:	4293      	cmp	r3, r2
 80019c0:	d907      	bls.n	80019d2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80019c2:	f004 ff7d 	bl	80068c0 <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	220c      	movs	r2, #12
 80019ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	e006      	b.n	80019e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <_sbrk+0x50>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <_sbrk+0x50>)
 80019dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000026c 	.word	0x2000026c
 80019ec:	20000284 	.word	0x20000284

080019f0 <_close>:

int _close(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a18:	605a      	str	r2, [r3, #4]
	return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_isatty>:

int _isatty(int file)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
	return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <SystemInit+0x60>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <SystemInit+0x60>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <SystemInit+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <SystemInit+0x64>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <SystemInit+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <SystemInit+0x64>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <SystemInit+0x64>)
 8001a84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <SystemInit+0x64>)
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <SystemInit+0x68>)
 8001a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <SystemInit+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <SystemInit+0x64>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SystemInit+0x60>)
 8001aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aac:	609a      	str	r2, [r3, #8]
#endif
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	24003010 	.word	0x24003010

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_Init+0x40>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_Init+0x40>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x40>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f94f 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fcc4 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f967 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f92f 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000008 	.word	0x20000008

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000270 	.word	0x20000270

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000270 	.word	0x20000270

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000000c 	.word	0x2000000c

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_DCMI_Start_DMA+0x20>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e086      	b.n	8001f42 <HAL_DCMI_Start_DMA+0x12e>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0202 	bic.w	r2, r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <HAL_DCMI_Start_DMA+0x138>)
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e80:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <HAL_DCMI_Start_DMA+0x13c>)
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	2200      	movs	r2, #0
 8001e8a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d20a      	bcs.n	8001eb6 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3328      	adds	r3, #40	; 0x28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	f000 fb06 	bl	80024c0 <HAL_DMA_Start_IT>
 8001eb4:	e038      	b.n	8001f28 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <HAL_DCMI_Start_DMA+0x138>)
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001ed0:	e009      	b.n	8001ee6 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	085a      	lsrs	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	005a      	lsls	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d2f0      	bcs.n	8001ed2 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	1e9a      	subs	r2, r3, #2
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	f000 fe20 	bl	8002b68 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08002131 	.word	0x08002131
 8001f50:	0800225b 	.word	0x0800225b

08001f54 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_DCMI_Stop+0xb0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_DCMI_Stop+0xb4>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_DCMI_Stop+0x2a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e03e      	b.n	8001ffc <HAL_DCMI_Stop+0xa8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e006      	b.n	8001fc8 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ea      	bne.n	8001f9e <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fac7 	bl	8002570 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000004 	.word	0x20000004
 8002008:	92492493 	.word	0x92492493

0800200c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d016      	beq.n	8002054 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2204      	movs	r2, #4
 800202c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2204      	movs	r2, #4
 800203e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <HAL_DCMI_IRQHandler+0xf8>)
 8002048:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fafe 	bl	8002650 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_DCMI_IRQHandler+0xf8>)
 8002080:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fae2 	bl	8002650 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2210      	movs	r2, #16
 800209c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f83c 	bl	800211c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe ff76 	bl	8000fa8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d107      	bne.n	80020e4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 021e 	bic.w	r2, r2, #30
 80020e2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe fe6f 	bl	8000dd8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800225b 	.word	0x0800225b

08002108 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d043      	beq.n	80021d2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d118      	bne.n	8002196 <DCMI_DMAXferCplt+0x66>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	00da      	lsls	r2, r3, #3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	f001 fe37 	bl	8003df8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
 8002194:	e044      	b.n	8002220 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d13c      	bne.n	8002220 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	00da      	lsls	r2, r3, #3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	2201      	movs	r2, #1
 80021c0:	4619      	mov	r1, r3
 80021c2:	f001 fe19 	bl	8003df8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	1e5a      	subs	r2, r3, #1
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
 80021d0:	e026      	b.n	8002220 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	e017      	b.n	8002220 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	0099      	lsls	r1, r3, #2
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	440a      	add	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	429a      	cmp	r2, r3
 800222a:	d112      	bne.n	8002252 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d103      	bne.n	8002252 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ff44 	bl	8002108 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e05f      	b.n	800235a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff f910 	bl	80014d4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff f90d 	bl	80014d4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022d0:	f023 0308 	bic.w	r3, r3, #8
 80022d4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002302:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d112      	bne.n	800233a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7f1b      	ldrb	r3, [r3, #28]
 8002318:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7f5b      	ldrb	r3, [r3, #29]
 800231e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002320:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7f9b      	ldrb	r3, [r3, #30]
 8002326:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002328:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7fdb      	ldrb	r3, [r3, #31]
 8002330:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002336:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002338:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 021e 	orr.w	r2, r2, #30
 8002348:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fc0e 	bl	8001b90 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e099      	b.n	80024b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a0:	e00f      	b.n	80023c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a2:	f7ff fbf5 	bl	8001b90 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d908      	bls.n	80023c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e078      	b.n	80024b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e8      	bne.n	80023a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_DMA_Init+0x158>)
 80023dc:	4013      	ands	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2b04      	cmp	r3, #4
 800241a:	d107      	bne.n	800242c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4313      	orrs	r3, r2
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f023 0307 	bic.w	r3, r3, #7
 8002442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2b04      	cmp	r3, #4
 8002454:	d117      	bne.n	8002486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fb01 	bl	8002a70 <DMA_CheckFifoParam>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002482:	2301      	movs	r3, #1
 8002484:	e016      	b.n	80024b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fab8 	bl	8002a04 <DMA_CalcBaseAndBitshift>
 8002494:	4603      	mov	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	f010803f 	.word	0xf010803f

080024c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Start_IT+0x26>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e040      	b.n	8002568 <HAL_DMA_Start_IT+0xa8>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d12f      	bne.n	800255a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fa4a 	bl	80029a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	223f      	movs	r2, #63	; 0x3f
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0216 	orr.w	r2, r2, #22
 800252e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e005      	b.n	8002566 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002562:	2302      	movs	r3, #2
 8002564:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800257e:	f7ff fb07 	bl	8001b90 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e052      	b.n	8002648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_Abort+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f2:	e013      	b.n	800261c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f4:	f7ff facc 	bl	8001b90 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d90c      	bls.n	800261c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e015      	b.n	8002648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e4      	bne.n	80025f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	223f      	movs	r2, #63	; 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00c      	b.n	8002688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2205      	movs	r2, #5
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026a0:	4b8e      	ldr	r3, [pc, #568]	; (80028dc <HAL_DMA_IRQHandler+0x248>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a8e      	ldr	r2, [pc, #568]	; (80028e0 <HAL_DMA_IRQHandler+0x24c>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2208      	movs	r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	2208      	movs	r2, #8
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2201      	movs	r2, #1
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2204      	movs	r2, #4
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2204      	movs	r2, #4
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2210      	movs	r2, #16
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d043      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03c      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2210      	movs	r2, #16
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e01f      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
 80027d4:	e016      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	2220      	movs	r2, #32
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 808f 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8087 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	2220      	movs	r2, #32
 800282c:	409a      	lsls	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b05      	cmp	r3, #5
 800283c:	d136      	bne.n	80028ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0216 	bic.w	r2, r2, #22
 800284c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_DMA_IRQHandler+0x1da>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0208 	bic.w	r2, r2, #8
 800287c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	223f      	movs	r2, #63	; 0x3f
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d07e      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
        }
        return;
 80028aa:	e079      	b.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e02c      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
 80028da:	bf00      	nop
 80028dc:	20000004 	.word	0x20000004
 80028e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e01e      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0210 	bic.w	r2, r2, #16
 8002912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2205      	movs	r2, #5
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d307      	bcc.n	800297c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f2      	bne.n	8002960 <HAL_DMA_IRQHandler+0x2cc>
 800297a:	e000      	b.n	800297e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800297c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029a0:	bf00      	nop
    }
  }
}
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d108      	bne.n	80029e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029e6:	e007      	b.n	80029f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	60da      	str	r2, [r3, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3b10      	subs	r3, #16
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <DMA_CalcBaseAndBitshift+0x64>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <DMA_CalcBaseAndBitshift+0x68>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d909      	bls.n	8002a46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	1d1a      	adds	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58
 8002a44:	e007      	b.n	8002a56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	aaaaaaab 	.word	0xaaaaaaab
 8002a6c:	080078e4 	.word	0x080078e4

08002a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11f      	bne.n	8002aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d856      	bhi.n	8002b3e <DMA_CheckFifoParam+0xce>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <DMA_CheckFifoParam+0x28>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002abb 	.word	0x08002abb
 8002aa0:	08002aa9 	.word	0x08002aa9
 8002aa4:	08002b3f 	.word	0x08002b3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d046      	beq.n	8002b42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e043      	b.n	8002b42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac2:	d140      	bne.n	8002b46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e03d      	b.n	8002b46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad2:	d121      	bne.n	8002b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d837      	bhi.n	8002b4a <DMA_CheckFifoParam+0xda>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <DMA_CheckFifoParam+0x70>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af7 	.word	0x08002af7
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b09 	.word	0x08002b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e030      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d025      	beq.n	8002b4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e022      	b.n	8002b4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b10:	d11f      	bne.n	8002b52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b16:	e01c      	b.n	8002b52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d903      	bls.n	8002b26 <DMA_CheckFifoParam+0xb6>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d003      	beq.n	8002b2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b24:	e018      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2a:	e015      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e00b      	b.n	8002b56 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e00a      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e008      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e006      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
    }
  } 
  
  return status; 
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d106      	bne.n	8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f001 b911 	b.w	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f001 b8ff 	b.w	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f001 b8f7 	b.w	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f041 80e5 	bne.w	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bf6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 f910 	bl	8003e2c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b8d      	ldr	r3, [pc, #564]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d960      	bls.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a8b      	ldr	r2, [pc, #556]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d057      	beq.n	8002cd2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a8a      	ldr	r2, [pc, #552]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d050      	beq.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a88      	ldr	r2, [pc, #544]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d049      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d042      	beq.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a85      	ldr	r2, [pc, #532]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d03a      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a84      	ldr	r2, [pc, #528]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d032      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a82      	ldr	r2, [pc, #520]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02a      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a81      	ldr	r2, [pc, #516]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7f      	ldr	r2, [pc, #508]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01a      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d012      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00a      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7b      	ldr	r2, [pc, #492]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c94:	e01e      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c9a:	e01b      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca0:	e018      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ca2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca6:	e015      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cac:	e012      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb2:	e00f      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb8:	e00c      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cbe:	e009      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc4:	e006      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e002      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002cd6:	60d3      	str	r3, [r2, #12]
 8002cd8:	e14f      	b.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d960      	bls.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d057      	beq.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d050      	beq.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a55      	ldr	r2, [pc, #340]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d049      	beq.n	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a53      	ldr	r2, [pc, #332]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d042      	beq.n	8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d03a      	beq.n	8002d8e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d032      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02a      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01a      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d012      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a49      	ldr	r2, [pc, #292]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00a      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a47      	ldr	r2, [pc, #284]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002d5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d62:	e01e      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d68:	e01b      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d6e:	e018      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d74:	e015      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d7a:	e012      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d80:	e00f      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d86:	e00c      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8c:	e009      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d92:	e006      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d94:	2320      	movs	r3, #32
 8002d96:	e004      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d98:	2320      	movs	r3, #32
 8002d9a:	e002      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e000      	b.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002da0:	2320      	movs	r3, #32
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002da4:	6093      	str	r3, [r2, #8]
 8002da6:	e0e8      	b.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f240 8082 	bls.w	8002eba <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d078      	beq.n	8002eb2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d071      	beq.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d06a      	beq.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d063      	beq.n	8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d05b      	beq.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d053      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04b      	beq.n	8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d043      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d03b      	beq.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d012      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00a      	beq.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d102      	bne.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002e2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e32:	e03f      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e38:	e03c      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e3e:	e039      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e44:	e036      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e46:	bf00      	nop
 8002e48:	40026458 	.word	0x40026458
 8002e4c:	40026010 	.word	0x40026010
 8002e50:	40026410 	.word	0x40026410
 8002e54:	40026070 	.word	0x40026070
 8002e58:	40026470 	.word	0x40026470
 8002e5c:	40026028 	.word	0x40026028
 8002e60:	40026428 	.word	0x40026428
 8002e64:	40026088 	.word	0x40026088
 8002e68:	40026488 	.word	0x40026488
 8002e6c:	40026040 	.word	0x40026040
 8002e70:	40026440 	.word	0x40026440
 8002e74:	400260a0 	.word	0x400260a0
 8002e78:	400264a0 	.word	0x400264a0
 8002e7c:	40026400 	.word	0x40026400
 8002e80:	400260b8 	.word	0x400260b8
 8002e84:	40026058 	.word	0x40026058
 8002e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e8c:	e012      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e92:	e00f      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e98:	e00c      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e9e:	e009      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea4:	e006      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e004      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e002      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	4a8c      	ldr	r2, [pc, #560]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002eb6:	60d3      	str	r3, [r2, #12]
 8002eb8:	e05f      	b.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a8b      	ldr	r2, [pc, #556]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d057      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a89      	ldr	r2, [pc, #548]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d050      	beq.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a88      	ldr	r2, [pc, #544]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d049      	beq.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a86      	ldr	r2, [pc, #536]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d042      	beq.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a85      	ldr	r2, [pc, #532]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03a      	beq.n	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a83      	ldr	r2, [pc, #524]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d032      	beq.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a82      	ldr	r2, [pc, #520]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d02a      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a80      	ldr	r2, [pc, #512]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7f      	ldr	r2, [pc, #508]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01a      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7d      	ldr	r2, [pc, #500]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d012      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7c      	ldr	r2, [pc, #496]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00a      	beq.n	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7a      	ldr	r2, [pc, #488]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d102      	bne.n	8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f36:	e01e      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f3c:	e01b      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f42:	e018      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f48:	e015      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f4e:	e012      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f54:	e00f      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f5a:	e00c      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f60:	e009      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f66:	e006      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e004      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e002      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f70:	2320      	movs	r3, #32
 8002f72:	e000      	b.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002f74:	2320      	movs	r3, #32
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002f78:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d960      	bls.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d057      	beq.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a56      	ldr	r2, [pc, #344]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d050      	beq.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a55      	ldr	r2, [pc, #340]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d049      	beq.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a53      	ldr	r2, [pc, #332]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d042      	beq.n	8003034 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03a      	beq.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d032      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4f      	ldr	r2, [pc, #316]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d02a      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4c      	ldr	r2, [pc, #304]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01a      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d012      	beq.n	8003010 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00a      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d102      	bne.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003002:	e01e      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003008:	e01b      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800300a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800300e:	e018      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003010:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003014:	e015      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003016:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800301a:	e012      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800301c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003020:	e00f      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003026:	e00c      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302c:	e009      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800302e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003032:	e006      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003034:	2310      	movs	r3, #16
 8003036:	e004      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003038:	2310      	movs	r3, #16
 800303a:	e002      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800303c:	2310      	movs	r3, #16
 800303e:	e000      	b.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003040:	2310      	movs	r3, #16
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003044:	60d3      	str	r3, [r2, #12]
 8003046:	e14f      	b.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003050:	429a      	cmp	r2, r3
 8003052:	f240 8082 	bls.w	800315a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d078      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d071      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d06a      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d063      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05b      	beq.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d053      	beq.n	800313a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04b      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d043      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d03b      	beq.n	8003128 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d012      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00a      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d102      	bne.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80030ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030d2:	e03f      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030d8:	e03c      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030de:	e039      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030e4:	e036      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80030e6:	bf00      	nop
 80030e8:	40026000 	.word	0x40026000
 80030ec:	40026010 	.word	0x40026010
 80030f0:	40026410 	.word	0x40026410
 80030f4:	40026070 	.word	0x40026070
 80030f8:	40026470 	.word	0x40026470
 80030fc:	40026028 	.word	0x40026028
 8003100:	40026428 	.word	0x40026428
 8003104:	40026088 	.word	0x40026088
 8003108:	40026488 	.word	0x40026488
 800310c:	40026040 	.word	0x40026040
 8003110:	40026440 	.word	0x40026440
 8003114:	400260a0 	.word	0x400260a0
 8003118:	400264a0 	.word	0x400264a0
 800311c:	40026458 	.word	0x40026458
 8003120:	40026400 	.word	0x40026400
 8003124:	400260b8 	.word	0x400260b8
 8003128:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800312c:	e012      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	e00f      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	e00c      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	e009      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003144:	e006      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003146:	2310      	movs	r3, #16
 8003148:	e004      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800314a:	2310      	movs	r3, #16
 800314c:	e002      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800314e:	2310      	movs	r3, #16
 8003150:	e000      	b.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003152:	2310      	movs	r3, #16
 8003154:	4a8c      	ldr	r2, [pc, #560]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003156:	6093      	str	r3, [r2, #8]
 8003158:	e0c6      	b.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	4b8a      	ldr	r3, [pc, #552]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003162:	429a      	cmp	r2, r3
 8003164:	d960      	bls.n	8003228 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a89      	ldr	r2, [pc, #548]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d057      	beq.n	8003220 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d050      	beq.n	800321c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a86      	ldr	r2, [pc, #536]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d049      	beq.n	8003218 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a84      	ldr	r2, [pc, #528]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d042      	beq.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a83      	ldr	r2, [pc, #524]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d03a      	beq.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a81      	ldr	r2, [pc, #516]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d032      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a80      	ldr	r2, [pc, #512]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d02a      	beq.n	8003202 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a7d      	ldr	r2, [pc, #500]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01a      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a7b      	ldr	r2, [pc, #492]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d012      	beq.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7a      	ldr	r2, [pc, #488]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00a      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a78      	ldr	r2, [pc, #480]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d102      	bne.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80031de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031e2:	e01e      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031e8:	e01b      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ee:	e018      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031f4:	e015      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031fa:	e012      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80031fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003200:	e00f      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003206:	e00c      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320c:	e009      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800320e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003212:	e006      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003214:	2310      	movs	r3, #16
 8003216:	e004      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003218:	2310      	movs	r3, #16
 800321a:	e002      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800321c:	2310      	movs	r3, #16
 800321e:	e000      	b.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003220:	2310      	movs	r3, #16
 8003222:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003224:	60d3      	str	r3, [r2, #12]
 8003226:	e05f      	b.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d057      	beq.n	80032e2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d050      	beq.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a55      	ldr	r2, [pc, #340]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d049      	beq.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d042      	beq.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03a      	beq.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a51      	ldr	r2, [pc, #324]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d032      	beq.n	80032ca <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4f      	ldr	r2, [pc, #316]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d02a      	beq.n	80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4e      	ldr	r2, [pc, #312]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01a      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d012      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00a      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a48      	ldr	r2, [pc, #288]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80032a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032a4:	e01e      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032aa:	e01b      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032b0:	e018      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032b6:	e015      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032bc:	e012      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c2:	e00f      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c8:	e00c      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ce:	e009      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	e006      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032d6:	2310      	movs	r3, #16
 80032d8:	e004      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032da:	2310      	movs	r3, #16
 80032dc:	e002      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032de:	2310      	movs	r3, #16
 80032e0:	e000      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80032e2:	2310      	movs	r3, #16
 80032e4:	4a36      	ldr	r2, [pc, #216]	; (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80032e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f240 8082 	bls.w	80033fa <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a25      	ldr	r2, [pc, #148]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d078      	beq.n	80033f2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a23      	ldr	r2, [pc, #140]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d071      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a22      	ldr	r2, [pc, #136]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d06a      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a20      	ldr	r2, [pc, #128]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d063      	beq.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d05b      	beq.n	80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d053      	beq.n	80033da <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04b      	beq.n	80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d043      	beq.n	80033ce <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d012      	beq.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00a      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d102      	bne.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800336e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003372:	e03f      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003378:	e03c      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800337a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800337e:	e039      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003384:	e036      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003386:	bf00      	nop
 8003388:	40026400 	.word	0x40026400
 800338c:	40026058 	.word	0x40026058
 8003390:	40026010 	.word	0x40026010
 8003394:	40026410 	.word	0x40026410
 8003398:	40026070 	.word	0x40026070
 800339c:	40026470 	.word	0x40026470
 80033a0:	40026028 	.word	0x40026028
 80033a4:	40026428 	.word	0x40026428
 80033a8:	40026088 	.word	0x40026088
 80033ac:	40026488 	.word	0x40026488
 80033b0:	40026040 	.word	0x40026040
 80033b4:	40026440 	.word	0x40026440
 80033b8:	400260a0 	.word	0x400260a0
 80033bc:	400264a0 	.word	0x400264a0
 80033c0:	40026000 	.word	0x40026000
 80033c4:	40026458 	.word	0x40026458
 80033c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033cc:	e012      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d2:	e00f      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d8:	e00c      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033de:	e009      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e4:	e006      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033e6:	2308      	movs	r3, #8
 80033e8:	e004      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e002      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e000      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80033f2:	2308      	movs	r3, #8
 80033f4:	4a8c      	ldr	r2, [pc, #560]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80033f6:	60d3      	str	r3, [r2, #12]
 80033f8:	e14e      	b.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b8a      	ldr	r3, [pc, #552]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003402:	429a      	cmp	r2, r3
 8003404:	d960      	bls.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a89      	ldr	r2, [pc, #548]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d057      	beq.n	80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a87      	ldr	r2, [pc, #540]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d050      	beq.n	80034bc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a86      	ldr	r2, [pc, #536]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d049      	beq.n	80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a84      	ldr	r2, [pc, #528]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d042      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a83      	ldr	r2, [pc, #524]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03a      	beq.n	80034ae <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a81      	ldr	r2, [pc, #516]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d032      	beq.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a80      	ldr	r2, [pc, #512]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d02a      	beq.n	80034a2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a7e      	ldr	r2, [pc, #504]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7d      	ldr	r2, [pc, #500]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01a      	beq.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a7b      	ldr	r2, [pc, #492]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d012      	beq.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7a      	ldr	r2, [pc, #488]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00a      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a78      	ldr	r2, [pc, #480]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d102      	bne.n	8003484 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800347e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003482:	e01e      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003488:	e01b      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800348a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800348e:	e018      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003490:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003494:	e015      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003496:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800349a:	e012      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800349c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a0:	e00f      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a6:	e00c      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ac:	e009      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	e006      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034b4:	2308      	movs	r3, #8
 80034b6:	e004      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034b8:	2308      	movs	r3, #8
 80034ba:	e002      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034bc:	2308      	movs	r3, #8
 80034be:	e000      	b.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80034c0:	2308      	movs	r3, #8
 80034c2:	4a59      	ldr	r2, [pc, #356]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80034c4:	6093      	str	r3, [r2, #8]
 80034c6:	e0e7      	b.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b64      	ldr	r3, [pc, #400]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d960      	bls.n	8003596 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a55      	ldr	r2, [pc, #340]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d057      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a54      	ldr	r2, [pc, #336]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d050      	beq.n	800358a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d049      	beq.n	8003586 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a51      	ldr	r2, [pc, #324]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d042      	beq.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a4f      	ldr	r2, [pc, #316]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03a      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4e      	ldr	r2, [pc, #312]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d032      	beq.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4c      	ldr	r2, [pc, #304]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02a      	beq.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01a      	beq.n	8003564 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a48      	ldr	r2, [pc, #288]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d012      	beq.n	800355e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a46      	ldr	r2, [pc, #280]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00a      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a45      	ldr	r2, [pc, #276]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800354c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003550:	e01e      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	e01b      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003558:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800355c:	e018      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800355e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003562:	e015      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003564:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003568:	e012      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356e:	e00f      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003574:	e00c      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357a:	e009      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	e006      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003582:	2308      	movs	r3, #8
 8003584:	e004      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003586:	2308      	movs	r3, #8
 8003588:	e002      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800358a:	2308      	movs	r3, #8
 800358c:	e000      	b.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800358e:	2308      	movs	r3, #8
 8003590:	4a34      	ldr	r2, [pc, #208]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003592:	60d3      	str	r3, [r2, #12]
 8003594:	e080      	b.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d078      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d071      	beq.n	800368e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d06a      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d063      	beq.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d05b      	beq.n	8003680 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d053      	beq.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04b      	beq.n	8003674 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d043      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d03b      	beq.n	8003668 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d012      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00a      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d102      	bne.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800360e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003612:	e03f      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003618:	e03c      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800361a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800361e:	e039      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003624:	e036      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003626:	bf00      	nop
 8003628:	40026400 	.word	0x40026400
 800362c:	400260b8 	.word	0x400260b8
 8003630:	40026010 	.word	0x40026010
 8003634:	40026410 	.word	0x40026410
 8003638:	40026070 	.word	0x40026070
 800363c:	40026470 	.word	0x40026470
 8003640:	40026028 	.word	0x40026028
 8003644:	40026428 	.word	0x40026428
 8003648:	40026088 	.word	0x40026088
 800364c:	40026488 	.word	0x40026488
 8003650:	40026040 	.word	0x40026040
 8003654:	40026440 	.word	0x40026440
 8003658:	400260a0 	.word	0x400260a0
 800365c:	400264a0 	.word	0x400264a0
 8003660:	40026058 	.word	0x40026058
 8003664:	40026000 	.word	0x40026000
 8003668:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800366c:	e012      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800366e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003672:	e00f      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003678:	e00c      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800367a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367e:	e009      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003684:	e006      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003686:	2308      	movs	r3, #8
 8003688:	e004      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800368a:	2308      	movs	r3, #8
 800368c:	e002      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800368e:	2308      	movs	r3, #8
 8003690:	e000      	b.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003692:	2308      	movs	r3, #8
 8003694:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003696:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d960      	bls.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a87      	ldr	r2, [pc, #540]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d057      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a86      	ldr	r2, [pc, #536]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d050      	beq.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a84      	ldr	r2, [pc, #528]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d049      	beq.n	8003756 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a83      	ldr	r2, [pc, #524]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d042      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a81      	ldr	r2, [pc, #516]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03a      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a80      	ldr	r2, [pc, #512]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d032      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02a      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7d      	ldr	r2, [pc, #500]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7b      	ldr	r2, [pc, #492]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01a      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7a      	ldr	r2, [pc, #488]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d012      	beq.n	800372e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00a      	beq.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a77      	ldr	r2, [pc, #476]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d102      	bne.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800371c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003720:	e01e      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003726:	e01b      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003728:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800372c:	e018      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800372e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003732:	e015      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003734:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003738:	e012      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800373a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373e:	e00f      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003744:	e00c      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374a:	e009      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800374c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003750:	e006      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003752:	2304      	movs	r3, #4
 8003754:	e004      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003756:	2304      	movs	r3, #4
 8003758:	e002      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800375a:	2304      	movs	r3, #4
 800375c:	e000      	b.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800375e:	2304      	movs	r3, #4
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003762:	60d3      	str	r3, [r2, #12]
 8003764:	e150      	b.n	8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	4b63      	ldr	r3, [pc, #396]	; (80038fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800376e:	429a      	cmp	r2, r3
 8003770:	d960      	bls.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a54      	ldr	r2, [pc, #336]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d057      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d050      	beq.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d049      	beq.n	8003824 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4f      	ldr	r2, [pc, #316]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d042      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4e      	ldr	r2, [pc, #312]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03a      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d032      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02a      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a49      	ldr	r2, [pc, #292]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a48      	ldr	r2, [pc, #288]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01a      	beq.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a46      	ldr	r2, [pc, #280]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d012      	beq.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a45      	ldr	r2, [pc, #276]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00a      	beq.n	80037f6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d102      	bne.n	80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80037ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ee:	e01e      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f4:	e01b      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037fa:	e018      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80037fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003800:	e015      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003802:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003806:	e012      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380c:	e00f      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800380e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003812:	e00c      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003818:	e009      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800381a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381e:	e006      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003820:	2304      	movs	r3, #4
 8003822:	e004      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003824:	2304      	movs	r3, #4
 8003826:	e002      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003828:	2304      	movs	r3, #4
 800382a:	e000      	b.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800382c:	2304      	movs	r3, #4
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	e0e9      	b.n	8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800383c:	429a      	cmp	r2, r3
 800383e:	f240 8083 	bls.w	8003948 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d079      	beq.n	8003940 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d072      	beq.n	800393c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d06b      	beq.n	8003938 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d064      	beq.n	8003934 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d05c      	beq.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d054      	beq.n	8003928 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04c      	beq.n	8003922 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d044      	beq.n	800391c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d03c      	beq.n	8003916 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d034      	beq.n	8003910 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d02c      	beq.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d124      	bne.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80038ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038be:	e040      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80038c0:	40026000 	.word	0x40026000
 80038c4:	40026458 	.word	0x40026458
 80038c8:	40026010 	.word	0x40026010
 80038cc:	40026410 	.word	0x40026410
 80038d0:	40026070 	.word	0x40026070
 80038d4:	40026470 	.word	0x40026470
 80038d8:	40026028 	.word	0x40026028
 80038dc:	40026428 	.word	0x40026428
 80038e0:	40026088 	.word	0x40026088
 80038e4:	40026488 	.word	0x40026488
 80038e8:	40026040 	.word	0x40026040
 80038ec:	40026440 	.word	0x40026440
 80038f0:	400260a0 	.word	0x400260a0
 80038f4:	400264a0 	.word	0x400264a0
 80038f8:	40026400 	.word	0x40026400
 80038fc:	400260b8 	.word	0x400260b8
 8003900:	40026058 	.word	0x40026058
 8003904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003908:	e01b      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800390a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800390e:	e018      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003914:	e015      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003916:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800391a:	e012      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800391c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003920:	e00f      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003926:	e00c      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392c:	e009      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800392e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003932:	e006      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003934:	2304      	movs	r3, #4
 8003936:	e004      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003938:	2304      	movs	r3, #4
 800393a:	e002      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800393c:	2304      	movs	r3, #4
 800393e:	e000      	b.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003940:	2304      	movs	r3, #4
 8003942:	4a8b      	ldr	r2, [pc, #556]	; (8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003944:	60d3      	str	r3, [r2, #12]
 8003946:	e05f      	b.n	8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a89      	ldr	r2, [pc, #548]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d057      	beq.n	8003a02 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a88      	ldr	r2, [pc, #544]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d050      	beq.n	80039fe <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a86      	ldr	r2, [pc, #536]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d049      	beq.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a85      	ldr	r2, [pc, #532]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d042      	beq.n	80039f6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a83      	ldr	r2, [pc, #524]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03a      	beq.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a82      	ldr	r2, [pc, #520]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d032      	beq.n	80039ea <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a80      	ldr	r2, [pc, #512]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02a      	beq.n	80039e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7f      	ldr	r2, [pc, #508]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7d      	ldr	r2, [pc, #500]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01a      	beq.n	80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7c      	ldr	r2, [pc, #496]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d012      	beq.n	80039d2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7a      	ldr	r2, [pc, #488]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00a      	beq.n	80039cc <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a79      	ldr	r2, [pc, #484]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d102      	bne.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80039c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039c4:	e01e      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ca:	e01b      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039d0:	e018      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039d6:	e015      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039dc:	e012      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e2:	e00f      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e8:	e00c      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ee:	e009      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f4:	e006      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039f6:	2304      	movs	r3, #4
 80039f8:	e004      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e002      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e000      	b.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a02:	2304      	movs	r3, #4
 8003a04:	4a5a      	ldr	r2, [pc, #360]	; (8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003a06:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d95c      	bls.n	8003ace <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d053      	beq.n	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a55      	ldr	r2, [pc, #340]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04c      	beq.n	8003ac2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a53      	ldr	r2, [pc, #332]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03e      	beq.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d037      	beq.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4f      	ldr	r2, [pc, #316]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d030      	beq.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d029      	beq.n	8003aae <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4c      	ldr	r2, [pc, #304]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d012      	beq.n	8003a9e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a47      	ldr	r2, [pc, #284]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00a      	beq.n	8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d102      	bne.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a90:	e01a      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a96:	e017      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9c:	e014      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa2:	e011      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa8:	e00e      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aaa:	2340      	movs	r3, #64	; 0x40
 8003aac:	e00c      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aae:	2340      	movs	r3, #64	; 0x40
 8003ab0:	e00a      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	e008      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ab6:	2340      	movs	r3, #64	; 0x40
 8003ab8:	e006      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e004      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e002      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	e141      	b.n	8003d52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d97c      	bls.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d073      	beq.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d06c      	beq.n	8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d065      	beq.n	8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d05e      	beq.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d057      	beq.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d050      	beq.n	8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d049      	beq.n	8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d042      	beq.n	8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01a      	beq.n	8003b6a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d012      	beq.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00a      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d102      	bne.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b56:	e03a      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b5c:	e037      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b62:	e034      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b68:	e031      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b6e:	e02e      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003b70:	40026000 	.word	0x40026000
 8003b74:	40026010 	.word	0x40026010
 8003b78:	40026410 	.word	0x40026410
 8003b7c:	40026070 	.word	0x40026070
 8003b80:	40026470 	.word	0x40026470
 8003b84:	40026028 	.word	0x40026028
 8003b88:	40026428 	.word	0x40026428
 8003b8c:	40026088 	.word	0x40026088
 8003b90:	40026488 	.word	0x40026488
 8003b94:	40026040 	.word	0x40026040
 8003b98:	40026440 	.word	0x40026440
 8003b9c:	400260a0 	.word	0x400260a0
 8003ba0:	400264a0 	.word	0x400264a0
 8003ba4:	40026458 	.word	0x40026458
 8003ba8:	40026400 	.word	0x40026400
 8003bac:	400260b8 	.word	0x400260b8
 8003bb0:	2340      	movs	r3, #64	; 0x40
 8003bb2:	e00c      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bb4:	2340      	movs	r3, #64	; 0x40
 8003bb6:	e00a      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bb8:	2340      	movs	r3, #64	; 0x40
 8003bba:	e008      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	e006      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e004      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e002      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4a7b      	ldr	r2, [pc, #492]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003bd0:	6093      	str	r3, [r2, #8]
 8003bd2:	e0be      	b.n	8003d52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d95c      	bls.n	8003c9a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d053      	beq.n	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a76      	ldr	r2, [pc, #472]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04c      	beq.n	8003c8e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a74      	ldr	r2, [pc, #464]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d03e      	beq.n	8003c86 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a71      	ldr	r2, [pc, #452]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d037      	beq.n	8003c82 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d030      	beq.n	8003c7e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d029      	beq.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6d      	ldr	r2, [pc, #436]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6b      	ldr	r2, [pc, #428]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01a      	beq.n	8003c70 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6a      	ldr	r2, [pc, #424]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d012      	beq.n	8003c6a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a68      	ldr	r2, [pc, #416]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00a      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a67      	ldr	r2, [pc, #412]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d102      	bne.n	8003c5e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5c:	e01a      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c62:	e017      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c68:	e014      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6e:	e011      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c74:	e00e      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c76:	2340      	movs	r3, #64	; 0x40
 8003c78:	e00c      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c7a:	2340      	movs	r3, #64	; 0x40
 8003c7c:	e00a      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	e008      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c82:	2340      	movs	r3, #64	; 0x40
 8003c84:	e006      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e004      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e002      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e05b      	b.n	8003d52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d053      	beq.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d04c      	beq.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a46      	ldr	r2, [pc, #280]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d045      	beq.n	8003d44 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a44      	ldr	r2, [pc, #272]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03e      	beq.n	8003d40 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a43      	ldr	r2, [pc, #268]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d037      	beq.n	8003d3c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a41      	ldr	r2, [pc, #260]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d030      	beq.n	8003d38 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d029      	beq.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3e      	ldr	r2, [pc, #248]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a3d      	ldr	r2, [pc, #244]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d01a      	beq.n	8003d2a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3b      	ldr	r2, [pc, #236]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3a      	ldr	r2, [pc, #232]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00a      	beq.n	8003d1e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d102      	bne.n	8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d16:	e01a      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d1c:	e017      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d22:	e014      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d28:	e011      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2e:	e00e      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d30:	2340      	movs	r3, #64	; 0x40
 8003d32:	e00c      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	e00a      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	e008      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d3c:	2340      	movs	r3, #64	; 0x40
 8003d3e:	e006      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e004      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e002      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d50:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0216 	orr.w	r2, r2, #22
 8003d60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e005      	b.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
 8003dae:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40026400 	.word	0x40026400
 8003dc0:	40026058 	.word	0x40026058
 8003dc4:	40026010 	.word	0x40026010
 8003dc8:	40026410 	.word	0x40026410
 8003dcc:	40026070 	.word	0x40026070
 8003dd0:	40026470 	.word	0x40026470
 8003dd4:	40026028 	.word	0x40026028
 8003dd8:	40026428 	.word	0x40026428
 8003ddc:	40026088 	.word	0x40026088
 8003de0:	40026488 	.word	0x40026488
 8003de4:	40026040 	.word	0x40026040
 8003de8:	40026440 	.word	0x40026440
 8003dec:	400260a0 	.word	0x400260a0
 8003df0:	400264a0 	.word	0x400264a0
 8003df4:	40026000 	.word	0x40026000

08003df8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e003      	b.n	8003e1e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d108      	bne.n	8003e5c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e5a:	e007      	b.n	8003e6c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e16b      	b.n	800416c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e94:	2201      	movs	r2, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	f040 815a 	bne.w	8004166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d005      	beq.n	8003eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d130      	bne.n	8003f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f00:	2201      	movs	r2, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 0201 	and.w	r2, r3, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d017      	beq.n	8003f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d123      	bne.n	8003fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	08da      	lsrs	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3208      	adds	r2, #8
 8003f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0203 	and.w	r2, r3, #3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80b4 	beq.w	8004166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	4b60      	ldr	r3, [pc, #384]	; (8004184 <HAL_GPIO_Init+0x30c>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4a5f      	ldr	r2, [pc, #380]	; (8004184 <HAL_GPIO_Init+0x30c>)
 8004008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800400c:	6453      	str	r3, [r2, #68]	; 0x44
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_GPIO_Init+0x30c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800401a:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_GPIO_Init+0x310>)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_GPIO_Init+0x314>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02b      	beq.n	800409e <HAL_GPIO_Init+0x226>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a51      	ldr	r2, [pc, #324]	; (8004190 <HAL_GPIO_Init+0x318>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d025      	beq.n	800409a <HAL_GPIO_Init+0x222>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a50      	ldr	r2, [pc, #320]	; (8004194 <HAL_GPIO_Init+0x31c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <HAL_GPIO_Init+0x21e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4f      	ldr	r2, [pc, #316]	; (8004198 <HAL_GPIO_Init+0x320>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x21a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4e      	ldr	r2, [pc, #312]	; (800419c <HAL_GPIO_Init+0x324>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x216>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4d      	ldr	r2, [pc, #308]	; (80041a0 <HAL_GPIO_Init+0x328>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x212>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4c      	ldr	r2, [pc, #304]	; (80041a4 <HAL_GPIO_Init+0x32c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x20e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4b      	ldr	r2, [pc, #300]	; (80041a8 <HAL_GPIO_Init+0x330>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x20a>
 800407e:	2307      	movs	r3, #7
 8004080:	e00e      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 8004082:	2308      	movs	r3, #8
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 8004086:	2306      	movs	r3, #6
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x228>
 800409e:	2300      	movs	r3, #0
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b0:	4935      	ldr	r1, [pc, #212]	; (8004188 <HAL_GPIO_Init+0x310>)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_GPIO_Init+0x334>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4013      	ands	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_GPIO_Init+0x334>)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_GPIO_Init+0x334>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410c:	4a27      	ldr	r2, [pc, #156]	; (80041ac <HAL_GPIO_Init+0x334>)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_GPIO_Init+0x334>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_GPIO_Init+0x334>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_GPIO_Init+0x334>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_GPIO_Init+0x334>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	f67f ae90 	bls.w	8003e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	40013800 	.word	0x40013800
 800418c:	40020000 	.word	0x40020000
 8004190:	40020400 	.word	0x40020400
 8004194:	40020800 	.word	0x40020800
 8004198:	40020c00 	.word	0x40020c00
 800419c:	40021000 	.word	0x40021000
 80041a0:	40021400 	.word	0x40021400
 80041a4:	40021800 	.word	0x40021800
 80041a8:	40021c00 	.word	0x40021c00
 80041ac:	40013c00 	.word	0x40013c00

080041b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e001      	b.n	80041d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
 80041ec:	4613      	mov	r3, r2
 80041ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041fc:	e003      	b.n	8004206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e12b      	b.n	800447e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fa10 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004278:	f001 fdca 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 800427c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4a81      	ldr	r2, [pc, #516]	; (8004488 <HAL_I2C_Init+0x274>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d807      	bhi.n	8004298 <HAL_I2C_Init+0x84>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a80      	ldr	r2, [pc, #512]	; (800448c <HAL_I2C_Init+0x278>)
 800428c:	4293      	cmp	r3, r2
 800428e:	bf94      	ite	ls
 8004290:	2301      	movls	r3, #1
 8004292:	2300      	movhi	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e006      	b.n	80042a6 <HAL_I2C_Init+0x92>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a7d      	ldr	r2, [pc, #500]	; (8004490 <HAL_I2C_Init+0x27c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	bf94      	ite	ls
 80042a0:	2301      	movls	r3, #1
 80042a2:	2300      	movhi	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0e7      	b.n	800447e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a78      	ldr	r2, [pc, #480]	; (8004494 <HAL_I2C_Init+0x280>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0c9b      	lsrs	r3, r3, #18
 80042b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <HAL_I2C_Init+0x274>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <HAL_I2C_Init+0xd4>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	e009      	b.n	80042fc <HAL_I2C_Init+0xe8>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	4a69      	ldr	r2, [pc, #420]	; (8004498 <HAL_I2C_Init+0x284>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	3301      	adds	r3, #1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800430e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	495c      	ldr	r1, [pc, #368]	; (8004488 <HAL_I2C_Init+0x274>)
 8004318:	428b      	cmp	r3, r1
 800431a:	d819      	bhi.n	8004350 <HAL_I2C_Init+0x13c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1e59      	subs	r1, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fbb1 f3f3 	udiv	r3, r1, r3
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004330:	400b      	ands	r3, r1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_I2C_Init+0x138>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1e59      	subs	r1, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fbb1 f3f3 	udiv	r3, r1, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	e051      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 800434c:	2304      	movs	r3, #4
 800434e:	e04f      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d111      	bne.n	800437c <HAL_I2C_Init+0x168>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e58      	subs	r0, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	440b      	add	r3, r1
 8004366:	fbb0 f3f3 	udiv	r3, r0, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e012      	b.n	80043a2 <HAL_I2C_Init+0x18e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1e58      	subs	r0, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	0099      	lsls	r1, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Init+0x196>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e022      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <HAL_I2C_Init+0x1bc>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1e58      	subs	r0, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	440b      	add	r3, r1
 80043c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	e00f      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e58      	subs	r0, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	0099      	lsls	r1, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	6809      	ldr	r1, [r1, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800441e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6911      	ldr	r1, [r2, #16]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	000186a0 	.word	0x000186a0
 800448c:	001e847f 	.word	0x001e847f
 8004490:	003d08ff 	.word	0x003d08ff
 8004494:	431bde83 	.word	0x431bde83
 8004498:	10624dd3 	.word	0x10624dd3

0800449c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
 80044ac:	4613      	mov	r3, r2
 80044ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7fd fb6e 	bl	8001b90 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	f040 80e0 	bne.w	8004684 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	4970      	ldr	r1, [pc, #448]	; (8004690 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fde8 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	e0d3      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_I2C_Master_Transmit+0x50>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0cc      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d007      	beq.n	8004512 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2221      	movs	r2, #33	; 0x21
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2210      	movs	r2, #16
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	893a      	ldrh	r2, [r7, #8]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a50      	ldr	r2, [pc, #320]	; (8004694 <HAL_I2C_Master_Transmit+0x1f8>)
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004554:	8979      	ldrh	r1, [r7, #10]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fbbc 	bl	8004cd8 <I2C_MasterRequestWrite>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08d      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004580:	e066      	b.n	8004650 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fe62 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06b      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11b      	bne.n	8004624 <HAL_I2C_Master_Transmit+0x188>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d017      	beq.n	8004624 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	6a39      	ldr	r1, [r7, #32]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fe52 	bl	80052d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2b04      	cmp	r3, #4
 800463a:	d107      	bne.n	800464c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e01a      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d194      	bne.n	8004582 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	00100002 	.word	0x00100002
 8004694:	ffff0000 	.word	0xffff0000

08004698 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	460b      	mov	r3, r1
 80046a6:	817b      	strh	r3, [r7, #10]
 80046a8:	4613      	mov	r3, r2
 80046aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ac:	f7fd fa70 	bl	8001b90 <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	f040 820b 	bne.w	8004ad6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2319      	movs	r3, #25
 80046c6:	2201      	movs	r2, #1
 80046c8:	497c      	ldr	r1, [pc, #496]	; (80048bc <HAL_I2C_Master_Receive+0x224>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fcea 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	e1fe      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_I2C_Master_Receive+0x50>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e1f7      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d007      	beq.n	800470e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2222      	movs	r2, #34	; 0x22
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2210      	movs	r2, #16
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	893a      	ldrh	r2, [r7, #8]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a5c      	ldr	r2, [pc, #368]	; (80048c0 <HAL_I2C_Master_Receive+0x228>)
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004750:	8979      	ldrh	r1, [r7, #10]
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fb40 	bl	8004ddc <I2C_MasterRequestRead>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1b8      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e18c      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	2b01      	cmp	r3, #1
 800479c:	d11b      	bne.n	80047d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e16c      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d11b      	bne.n	8004816 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	e14c      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800483c:	e138      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	2b03      	cmp	r3, #3
 8004844:	f200 80f1 	bhi.w	8004a2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	2b01      	cmp	r3, #1
 800484e:	d123      	bne.n	8004898 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fd7d 	bl	8005354 <I2C_WaitOnRXNEFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e139      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004896:	e10b      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	2b02      	cmp	r3, #2
 800489e:	d14e      	bne.n	800493e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2200      	movs	r2, #0
 80048a8:	4906      	ldr	r1, [pc, #24]	; (80048c4 <HAL_I2C_Master_Receive+0x22c>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fbfa 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e10e      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
 80048ba:	bf00      	nop
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000
 80048c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800493c:	e0b8      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2200      	movs	r2, #0
 8004946:	4966      	ldr	r1, [pc, #408]	; (8004ae0 <HAL_I2C_Master_Receive+0x448>)
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fbab 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0bf      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2200      	movs	r2, #0
 80049a2:	494f      	ldr	r1, [pc, #316]	; (8004ae0 <HAL_I2C_Master_Receive+0x448>)
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fb7d 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e091      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a28:	e042      	b.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fc90 	bl	8005354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e04c      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d118      	bne.n	8004ab0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f47f aec2 	bne.w	800483e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e000      	b.n	8004ad8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	00010004 	.word	0x00010004

08004ae4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004afe:	f7fd f847 	bl	8001b90 <HAL_GetTick>
 8004b02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f040 80d9 	bne.w	8004cc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2319      	movs	r3, #25
 8004b18:	2201      	movs	r2, #1
 8004b1a:	496d      	ldr	r1, [pc, #436]	; (8004cd0 <HAL_I2C_Mem_Write+0x1ec>)
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fac1 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0cc      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Mem_Write+0x56>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0c5      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d007      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2221      	movs	r2, #33	; 0x21
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a4d      	ldr	r2, [pc, #308]	; (8004cd4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba2:	88f8      	ldrh	r0, [r7, #6]
 8004ba4:	893a      	ldrh	r2, [r7, #8]
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f9e0 	bl	8004f78 <I2C_RequestMemoryWrite>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d052      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e081      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fb42 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d107      	bne.n	8004bea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06b      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11b      	bne.n	8004c64 <HAL_I2C_Mem_Write+0x180>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1aa      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb2e 	bl	80052d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e016      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	00100002 	.word	0x00100002
 8004cd4:	ffff0000 	.word	0xffff0000

08004cd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d006      	beq.n	8004d02 <I2C_MasterRequestWrite+0x2a>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <I2C_MasterRequestWrite+0x2a>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d00:	d108      	bne.n	8004d14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e00b      	b.n	8004d2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	2b12      	cmp	r3, #18
 8004d1a:	d107      	bne.n	8004d2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f9b3 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d103      	bne.n	8004d5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e035      	b.n	8004dcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d68:	d108      	bne.n	8004d7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d78:	611a      	str	r2, [r3, #16]
 8004d7a:	e01b      	b.n	8004db4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d7c:	897b      	ldrh	r3, [r7, #10]
 8004d7e:	11db      	asrs	r3, r3, #7
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f003 0306 	and.w	r3, r3, #6
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f063 030f 	orn	r3, r3, #15
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	490e      	ldr	r1, [pc, #56]	; (8004dd4 <I2C_MasterRequestWrite+0xfc>)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9d9 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e010      	b.n	8004dcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004daa:	897b      	ldrh	r3, [r7, #10]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <I2C_MasterRequestWrite+0x100>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f9c9 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	00010008 	.word	0x00010008
 8004dd8:	00010002 	.word	0x00010002

08004ddc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	460b      	mov	r3, r1
 8004dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d006      	beq.n	8004e16 <I2C_MasterRequestRead+0x3a>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d003      	beq.n	8004e16 <I2C_MasterRequestRead+0x3a>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e14:	d108      	bne.n	8004e28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e00b      	b.n	8004e40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	2b11      	cmp	r3, #17
 8004e2e:	d107      	bne.n	8004e40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f929 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e079      	b.n	8004f68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7c:	d108      	bne.n	8004e90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]
 8004e8e:	e05f      	b.n	8004f50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e90:	897b      	ldrh	r3, [r7, #10]
 8004e92:	11db      	asrs	r3, r3, #7
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f003 0306 	and.w	r3, r3, #6
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f063 030f 	orn	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4930      	ldr	r1, [pc, #192]	; (8004f70 <I2C_MasterRequestRead+0x194>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f94f 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e054      	b.n	8004f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4929      	ldr	r1, [pc, #164]	; (8004f74 <I2C_MasterRequestRead+0x198>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f93f 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e044      	b.n	8004f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f8c7 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2a:	d103      	bne.n	8004f34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e017      	b.n	8004f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	11db      	asrs	r3, r3, #7
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0306 	and.w	r3, r3, #6
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f063 030e 	orn	r3, r3, #14
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4907      	ldr	r1, [pc, #28]	; (8004f74 <I2C_MasterRequestRead+0x198>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8fb 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	00010008 	.word	0x00010008
 8004f74:	00010002 	.word	0x00010002

08004f78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f878 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc8:	d103      	bne.n	8004fd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e05f      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	492d      	ldr	r1, [pc, #180]	; (80050a0 <I2C_RequestMemoryWrite+0x128>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f8b0 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04c      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6a39      	ldr	r1, [r7, #32]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f91a 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b04      	cmp	r3, #4
 8005028:	d107      	bne.n	800503a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e02b      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005044:	893b      	ldrh	r3, [r7, #8]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]
 800504e:	e021      	b.n	8005094 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005050:	893b      	ldrh	r3, [r7, #8]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	b29b      	uxth	r3, r3
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8f4 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b04      	cmp	r3, #4
 8005074:	d107      	bne.n	8005086 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005084:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e005      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508a:	893b      	ldrh	r3, [r7, #8]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	e025      	b.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d021      	beq.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fc fd67 	bl	8001b90 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e023      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10d      	bne.n	8005128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	e00c      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d0b6      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005160:	e051      	b.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d123      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e046      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d021      	beq.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fc fce5 	bl	8001b90 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e020      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	43da      	mvns	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e00b      	b.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	43da      	mvns	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d18d      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8ce 	bl	8005400 <I2C_IsAcknowledgeFailed>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e02d      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d021      	beq.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fc fc8b 	bl	8001b90 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e007      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d1ca      	bne.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f88d 	bl	8005400 <I2C_IsAcknowledgeFailed>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e02d      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d021      	beq.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fc fc4a 	bl	8001b90 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e007      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d1ca      	bne.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005360:	e042      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b10      	cmp	r3, #16
 800536e:	d119      	bne.n	80053a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0210 	mvn.w	r2, #16
 8005378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e029      	b.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a4:	f7fc fbf4 	bl	8001b90 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d116      	bne.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e007      	b.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d1b5      	bne.n	8005362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d11b      	bne.n	8005450 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005420:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f043 0204 	orr.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e267      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d075      	beq.n	800556a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547e:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b04      	cmp	r3, #4
 8005488:	d00c      	beq.n	80054a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548a:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005492:	2b08      	cmp	r3, #8
 8005494:	d112      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005496:	4b82      	ldr	r3, [pc, #520]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a2:	d10b      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	4b7e      	ldr	r3, [pc, #504]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05b      	beq.n	8005568 <HAL_RCC_OscConfig+0x108>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d157      	bne.n	8005568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e242      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d106      	bne.n	80054d4 <HAL_RCC_OscConfig+0x74>
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a75      	ldr	r2, [pc, #468]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e01d      	b.n	8005510 <HAL_RCC_OscConfig+0xb0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x98>
 80054de:	4b70      	ldr	r3, [pc, #448]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a6f      	ldr	r2, [pc, #444]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b6d      	ldr	r3, [pc, #436]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6c      	ldr	r2, [pc, #432]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0xb0>
 80054f8:	4b69      	ldr	r3, [pc, #420]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a68      	ldr	r2, [pc, #416]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a65      	ldr	r2, [pc, #404]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fc fb3a 	bl	8001b90 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005520:	f7fc fb36 	bl	8001b90 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e207      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0xc0>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fc fb26 	bl	8001b90 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005548:	f7fc fb22 	bl	8001b90 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1f3      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0xe8>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005582:	4b47      	ldr	r3, [pc, #284]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800558a:	2b08      	cmp	r3, #8
 800558c:	d11c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558e:	4b44      	ldr	r3, [pc, #272]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d116      	bne.n	80055c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559a:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCC_OscConfig+0x152>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e1c7      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b2:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4937      	ldr	r1, [pc, #220]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	e03a      	b.n	800563e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d020      	beq.n	8005612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d0:	4b34      	ldr	r3, [pc, #208]	; (80056a4 <HAL_RCC_OscConfig+0x244>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fc fadb 	bl	8001b90 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055de:	f7fc fad7 	bl	8001b90 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e1a8      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4925      	ldr	r1, [pc, #148]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
 8005610:	e015      	b.n	800563e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_RCC_OscConfig+0x244>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fc faba 	bl	8001b90 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005620:	f7fc fab6 	bl	8001b90 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e187      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d036      	beq.n	80056b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <HAL_RCC_OscConfig+0x248>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fc fa9a 	bl	8001b90 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005660:	f7fc fa96 	bl	8001b90 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e167      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_RCC_OscConfig+0x240>)
 8005674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x200>
 800567e:	e01b      	b.n	80056b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <HAL_RCC_OscConfig+0x248>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005686:	f7fc fa83 	bl	8001b90 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800568c:	e00e      	b.n	80056ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568e:	f7fc fa7f 	bl	8001b90 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d907      	bls.n	80056ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e150      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
 80056a0:	40023800 	.word	0x40023800
 80056a4:	42470000 	.word	0x42470000
 80056a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1ea      	bne.n	800568e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8097 	beq.w	80057f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ca:	4b81      	ldr	r3, [pc, #516]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	4b7d      	ldr	r3, [pc, #500]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	4a7c      	ldr	r2, [pc, #496]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6413      	str	r3, [r2, #64]	; 0x40
 80056e6:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f6:	4b77      	ldr	r3, [pc, #476]	; (80058d4 <HAL_RCC_OscConfig+0x474>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d118      	bne.n	8005734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005702:	4b74      	ldr	r3, [pc, #464]	; (80058d4 <HAL_RCC_OscConfig+0x474>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a73      	ldr	r2, [pc, #460]	; (80058d4 <HAL_RCC_OscConfig+0x474>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570e:	f7fc fa3f 	bl	8001b90 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005716:	f7fc fa3b 	bl	8001b90 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e10c      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005728:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <HAL_RCC_OscConfig+0x474>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d106      	bne.n	800574a <HAL_RCC_OscConfig+0x2ea>
 800573c:	4b64      	ldr	r3, [pc, #400]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	6713      	str	r3, [r2, #112]	; 0x70
 8005748:	e01c      	b.n	8005784 <HAL_RCC_OscConfig+0x324>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b05      	cmp	r3, #5
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0x30c>
 8005752:	4b5f      	ldr	r3, [pc, #380]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a5e      	ldr	r2, [pc, #376]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005758:	f043 0304 	orr.w	r3, r3, #4
 800575c:	6713      	str	r3, [r2, #112]	; 0x70
 800575e:	4b5c      	ldr	r3, [pc, #368]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	4a5b      	ldr	r2, [pc, #364]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	6713      	str	r3, [r2, #112]	; 0x70
 800576a:	e00b      	b.n	8005784 <HAL_RCC_OscConfig+0x324>
 800576c:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a57      	ldr	r2, [pc, #348]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	4b55      	ldr	r3, [pc, #340]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577c:	4a54      	ldr	r2, [pc, #336]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 0304 	bic.w	r3, r3, #4
 8005782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fc fa00 	bl	8001b90 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005792:	e00a      	b.n	80057aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fc f9fc 	bl	8001b90 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e0cb      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057aa:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0ee      	beq.n	8005794 <HAL_RCC_OscConfig+0x334>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b8:	f7fc f9ea 	bl	8001b90 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fc f9e6 	bl	8001b90 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0b5      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d6:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1ee      	bne.n	80057c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d105      	bne.n	80057f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80057ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80a1 	beq.w	8005940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b08      	cmp	r3, #8
 8005808:	d05c      	beq.n	80058c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d141      	bne.n	8005896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <HAL_RCC_OscConfig+0x478>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc f9ba 	bl	8001b90 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc f9b6 	bl	8001b90 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e087      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	3b01      	subs	r3, #1
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	491b      	ldr	r1, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 8005864:	4313      	orrs	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <HAL_RCC_OscConfig+0x478>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fc f98f 	bl	8001b90 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005876:	f7fc f98b 	bl	8001b90 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e05c      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005888:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x416>
 8005894:	e054      	b.n	8005940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_RCC_OscConfig+0x478>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fc f978 	bl	8001b90 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fc f974 	bl	8001b90 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e045      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_RCC_OscConfig+0x470>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x444>
 80058c2:	e03d      	b.n	8005940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e038      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
 80058d0:	40023800 	.word	0x40023800
 80058d4:	40007000 	.word	0x40007000
 80058d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <HAL_RCC_OscConfig+0x4ec>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d028      	beq.n	800593c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d121      	bne.n	800593c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d11a      	bne.n	800593c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005914:	4293      	cmp	r3, r2
 8005916:	d111      	bne.n	800593c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	3b01      	subs	r3, #1
 8005926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005928:	429a      	cmp	r2, r3
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800

08005950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0cc      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005964:	4b68      	ldr	r3, [pc, #416]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d90c      	bls.n	800598c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b65      	ldr	r3, [pc, #404]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b63      	ldr	r3, [pc, #396]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0b8      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d020      	beq.n	80059da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a4:	4b59      	ldr	r3, [pc, #356]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4a58      	ldr	r2, [pc, #352]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059bc:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4a52      	ldr	r2, [pc, #328]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c8:	4b50      	ldr	r3, [pc, #320]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	494d      	ldr	r1, [pc, #308]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d044      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d107      	bne.n	80059fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	4b47      	ldr	r3, [pc, #284]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d119      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e07f      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0e:	4b3f      	ldr	r3, [pc, #252]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e06f      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1e:	4b3b      	ldr	r3, [pc, #236]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e067      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b37      	ldr	r3, [pc, #220]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4934      	ldr	r1, [pc, #208]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a40:	f7fc f8a6 	bl	8001b90 <HAL_GetTick>
 8005a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fc f8a2 	bl	8001b90 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e04f      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d20c      	bcs.n	8005a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b22      	ldr	r3, [pc, #136]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e032      	b.n	8005afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4916      	ldr	r1, [pc, #88]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	490e      	ldr	r1, [pc, #56]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ad6:	f000 f889 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005ada:	4602      	mov	r2, r0
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	490a      	ldr	r1, [pc, #40]	; (8005b10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae8:	5ccb      	ldrb	r3, [r1, r3]
 8005aea:	fa22 f303 	lsr.w	r3, r2, r3
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fc f806 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40023c00 	.word	0x40023c00
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	080078cc 	.word	0x080078cc
 8005b14:	20000004 	.word	0x20000004
 8005b18:	20000008 	.word	0x20000008

08005b1c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	; 0x30
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d129      	bne.n	8005b82 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	4a2a      	ldr	r2, [pc, #168]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3e:	4b28      	ldr	r3, [pc, #160]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b50:	2302      	movs	r3, #2
 8005b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b54:	2303      	movs	r3, #3
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b60:	f107 031c 	add.w	r3, r7, #28
 8005b64:	4619      	mov	r1, r3
 8005b66:	481f      	ldr	r0, [pc, #124]	; (8005be4 <HAL_RCC_MCOConfig+0xc8>)
 8005b68:	f7fe f986 	bl	8003e78 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	4919      	ldr	r1, [pc, #100]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005b80:	e029      	b.n	8005bd6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	4a15      	ldr	r2, [pc, #84]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b8c:	f043 0304 	orr.w	r3, r3, #4
 8005b90:	6313      	str	r3, [r2, #48]	; 0x30
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005bb4:	f107 031c 	add.w	r3, r7, #28
 8005bb8:	4619      	mov	r1, r3
 8005bba:	480b      	ldr	r0, [pc, #44]	; (8005be8 <HAL_RCC_MCOConfig+0xcc>)
 8005bbc:	f7fe f95c 	bl	8003e78 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	00d9      	lsls	r1, r3, #3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	4903      	ldr	r1, [pc, #12]	; (8005be0 <HAL_RCC_MCOConfig+0xc4>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	3730      	adds	r7, #48	; 0x30
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
 8005be4:	40020000 	.word	0x40020000
 8005be8:	40020800 	.word	0x40020800

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b094      	sub	sp, #80	; 0x50
 8005bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c04:	4b79      	ldr	r3, [pc, #484]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 030c 	and.w	r3, r3, #12
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x40>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	f200 80e1 	bhi.w	8005dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1e:	e0db      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c20:	4b73      	ldr	r3, [pc, #460]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c24:	e0db      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c26:	4b73      	ldr	r3, [pc, #460]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c2a:	e0d8      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c2c:	4b6f      	ldr	r3, [pc, #444]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c36:	4b6d      	ldr	r3, [pc, #436]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d063      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c42:	4b6a      	ldr	r3, [pc, #424]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	2200      	movs	r2, #0
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30
 8005c56:	2300      	movs	r3, #0
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	0159      	lsls	r1, r3, #5
 8005c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c70:	0150      	lsls	r0, r2, #5
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4621      	mov	r1, r4
 8005c78:	1a51      	subs	r1, r2, r1
 8005c7a:	6139      	str	r1, [r7, #16]
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c90:	4659      	mov	r1, fp
 8005c92:	018b      	lsls	r3, r1, #6
 8005c94:	4651      	mov	r1, sl
 8005c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c9a:	4651      	mov	r1, sl
 8005c9c:	018a      	lsls	r2, r1, #6
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cbe:	4690      	mov	r8, r2
 8005cc0:	4699      	mov	r9, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	eb18 0303 	adds.w	r3, r8, r3
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	462b      	mov	r3, r5
 8005ccc:	eb49 0303 	adc.w	r3, r9, r3
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cde:	4629      	mov	r1, r5
 8005ce0:	024b      	lsls	r3, r1, #9
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ce8:	4621      	mov	r1, r4
 8005cea:	024a      	lsls	r2, r1, #9
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cfc:	f7fa fab8 	bl	8000270 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	e058      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d0a:	4b38      	ldr	r3, [pc, #224]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	2200      	movs	r2, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	4611      	mov	r1, r2
 8005d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d1a:	623b      	str	r3, [r7, #32]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	f04f 0000 	mov.w	r0, #0
 8005d2c:	f04f 0100 	mov.w	r1, #0
 8005d30:	0159      	lsls	r1, r3, #5
 8005d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d36:	0150      	lsls	r0, r2, #5
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d42:	4649      	mov	r1, r9
 8005d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d60:	eb63 050b 	sbc.w	r5, r3, fp
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	00eb      	lsls	r3, r5, #3
 8005d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d72:	00e2      	lsls	r2, r4, #3
 8005d74:	4614      	mov	r4, r2
 8005d76:	461d      	mov	r5, r3
 8005d78:	4643      	mov	r3, r8
 8005d7a:	18e3      	adds	r3, r4, r3
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	464b      	mov	r3, r9
 8005d80:	eb45 0303 	adc.w	r3, r5, r3
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d92:	4629      	mov	r1, r5
 8005d94:	028b      	lsls	r3, r1, #10
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	028a      	lsls	r2, r1, #10
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da6:	2200      	movs	r2, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	61fa      	str	r2, [r7, #28]
 8005dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db0:	f7fa fa5e 	bl	8000270 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3750      	adds	r7, #80	; 0x50
 8005de4:	46bd      	mov	sp, r7
 8005de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00f42400 	.word	0x00f42400
 8005df4:	007a1200 	.word	0x007a1200

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000004 	.word	0x20000004

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0a9b      	lsrs	r3, r3, #10
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	080078dc 	.word	0x080078dc

08005e38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e01c      	b.n	8005e84 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	795b      	ldrb	r3, [r3, #5]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fc48 	bl	80016f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0204 	orr.w	r2, r2, #4
 8005e74:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e07b      	b.n	8005f96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d108      	bne.n	8005eb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eae:	d009      	beq.n	8005ec4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
 8005eb6:	e005      	b.n	8005ec4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fb fc28 	bl	8001734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	ea42 0103 	orr.w	r1, r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	f003 0104 	and.w	r1, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f003 0210 	and.w	r2, r3, #16
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_SPI_Transmit+0x22>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e126      	b.n	800620e <HAL_SPI_Transmit+0x270>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc8:	f7fb fde2 	bl	8001b90 <HAL_GetTick>
 8005fcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe2:	e10b      	b.n	80061fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_Transmit+0x52>
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ff4:	e102      	b.n	80061fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d10f      	bne.n	800605e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d007      	beq.n	800607c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006084:	d14b      	bne.n	800611e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_SPI_Transmit+0xf6>
 800608e:	8afb      	ldrh	r3, [r7, #22]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d13e      	bne.n	8006112 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b8:	e02b      	b.n	8006112 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d112      	bne.n	80060ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ec:	e011      	b.n	8006112 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ee:	f7fb fd4f 	bl	8001b90 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d803      	bhi.n	8006106 <HAL_SPI_Transmit+0x168>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d102      	bne.n	800610c <HAL_SPI_Transmit+0x16e>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006110:	e074      	b.n	80061fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ce      	bne.n	80060ba <HAL_SPI_Transmit+0x11c>
 800611c:	e04c      	b.n	80061b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_SPI_Transmit+0x18e>
 8006126:	8afb      	ldrh	r3, [r7, #22]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d140      	bne.n	80061ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006152:	e02c      	b.n	80061ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d113      	bne.n	800618a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	86da      	strh	r2, [r3, #54]	; 0x36
 8006188:	e011      	b.n	80061ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800618a:	f7fb fd01 	bl	8001b90 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d803      	bhi.n	80061a2 <HAL_SPI_Transmit+0x204>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d102      	bne.n	80061a8 <HAL_SPI_Transmit+0x20a>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d102      	bne.n	80061ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061ac:	e026      	b.n	80061fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1cd      	bne.n	8006154 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fb13 	bl	80067e8 <SPI_EndRxTxTransaction>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e000      	b.n	80061fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80061fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800620c:	7ffb      	ldrb	r3, [r7, #31]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_SPI_Transmit_DMA+0x20>
 8006234:	2302      	movs	r3, #2
 8006236:	e09b      	b.n	8006370 <HAL_SPI_Transmit_DMA+0x158>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800624c:	2302      	movs	r3, #2
 800624e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006250:	e089      	b.n	8006366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_SPI_Transmit_DMA+0x46>
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006262:	e080      	b.n	8006366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2203      	movs	r2, #3
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062aa:	d10f      	bne.n	80062cc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_SPI_Transmit_DMA+0x160>)
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d8:	4a28      	ldr	r2, [pc, #160]	; (800637c <HAL_SPI_Transmit_DMA+0x164>)
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e0:	4a27      	ldr	r2, [pc, #156]	; (8006380 <HAL_SPI_Transmit_DMA+0x168>)
 80062e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e8:	2200      	movs	r2, #0
 80062ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	4619      	mov	r1, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006304:	f7fc f8dc 	bl	80024c0 <HAL_DMA_Start_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	f043 0210 	orr.w	r2, r3, #16
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006326:	e01e      	b.n	8006366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d007      	beq.n	8006346 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006344:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0220 	orr.w	r2, r2, #32
 8006354:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0202 	orr.w	r2, r2, #2
 8006364:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08006655 	.word	0x08006655
 800637c:	080065ad 	.word	0x080065ad
 8006380:	08006671 	.word	0x08006671

08006384 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10f      	bne.n	80063c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	099b      	lsrs	r3, r3, #6
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    return;
 80063c6:	e0d7      	b.n	8006578 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_SPI_IRQHandler+0x66>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
    return;
 80063e8:	e0c6      	b.n	8006578 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_SPI_IRQHandler+0x8c>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	099b      	lsrs	r3, r3, #6
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80b4 	beq.w	8006578 <HAL_SPI_IRQHandler+0x1f4>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80ad 	beq.w	8006578 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	099b      	lsrs	r3, r3, #6
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d023      	beq.n	8006472 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d011      	beq.n	800645a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	f043 0204 	orr.w	r2, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	e00b      	b.n	8006472 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	693b      	ldr	r3, [r7, #16]
        return;
 8006470:	e082      	b.n	8006578 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d014      	beq.n	80064a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f043 0201 	orr.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	f043 0208 	orr.w	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d04f      	beq.n	8006576 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d104      	bne.n	8006502 <HAL_SPI_IRQHandler+0x17e>
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d034      	beq.n	800656c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0203 	bic.w	r2, r2, #3
 8006510:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d011      	beq.n	800653e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_SPI_IRQHandler+0x1fc>)
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc f892 	bl	8002650 <HAL_DMA_Abort_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800654a:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <HAL_SPI_IRQHandler+0x1fc>)
 800654c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc f87c 	bl	8002650 <HAL_DMA_Abort_IT>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800656a:	e003      	b.n	8006574 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f813 	bl	8006598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006572:	e000      	b.n	8006576 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006574:	bf00      	nop
    return;
 8006576:	bf00      	nop
  }
}
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	080066b1 	.word	0x080066b1

08006584 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ba:	f7fb fae9 	bl	8001b90 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	d03b      	beq.n	8006648 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0220 	bic.w	r2, r2, #32
 80065de:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0202 	bic.w	r2, r2, #2
 80065ee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	2164      	movs	r1, #100	; 0x64
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	f000 f8f7 	bl	80067e8 <SPI_EndRxTxTransaction>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f043 0220 	orr.w	r2, r3, #32
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006640:	6978      	ldr	r0, [r7, #20]
 8006642:	f7ff ffa9 	bl	8006598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006646:	e002      	b.n	800664e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006648:	6978      	ldr	r0, [r7, #20]
 800664a:	f7f9 ff93 	bl	8000574 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff ff8e 	bl	8006584 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0203 	bic.w	r2, r2, #3
 800668c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	f043 0210 	orr.w	r2, r3, #16
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ff78 	bl	8006598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff ff64 	bl	8006598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e8:	f7fb fa52 	bl	8001b90 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f8:	f7fb fa4a 	bl	8001b90 <HAL_GetTick>
 80066fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066fe:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	015b      	lsls	r3, r3, #5
 8006704:	0d1b      	lsrs	r3, r3, #20
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800670e:	e054      	b.n	80067ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d050      	beq.n	80067ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006718:	f7fb fa3a 	bl	8001b90 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	429a      	cmp	r2, r3
 8006726:	d902      	bls.n	800672e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d13d      	bne.n	80067aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800673c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006746:	d111      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006750:	d004      	beq.n	800675c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	d107      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006774:	d10f      	bne.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e017      	b.n	80067da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d19b      	bne.n	8006710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000004 	.word	0x20000004

080067e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <SPI_EndRxTxTransaction+0x7c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <SPI_EndRxTxTransaction+0x80>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	0d5b      	lsrs	r3, r3, #21
 8006800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006804:	fb02 f303 	mul.w	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006812:	d112      	bne.n	800683a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2200      	movs	r2, #0
 800681c:	2180      	movs	r1, #128	; 0x80
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff ff5a 	bl	80066d8 <SPI_WaitFlagStateUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3b01      	subs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d0f2      	beq.n	800683a <SPI_EndRxTxTransaction+0x52>
 8006854:	e000      	b.n	8006858 <SPI_EndRxTxTransaction+0x70>
        break;
 8006856:	bf00      	nop
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000004 	.word	0x20000004
 8006868:	165e9f81 	.word	0x165e9f81

0800686c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800686c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006870:	480d      	ldr	r0, [pc, #52]	; (80068a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006872:	490e      	ldr	r1, [pc, #56]	; (80068ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006878:	e002      	b.n	8006880 <LoopCopyDataInit>

0800687a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800687a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800687c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800687e:	3304      	adds	r3, #4

08006880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006884:	d3f9      	bcc.n	800687a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006886:	4a0b      	ldr	r2, [pc, #44]	; (80068b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006888:	4c0b      	ldr	r4, [pc, #44]	; (80068b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800688a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800688c:	e001      	b.n	8006892 <LoopFillZerobss>

0800688e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800688e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006890:	3204      	adds	r2, #4

08006892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006894:	d3fb      	bcc.n	800688e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006896:	f7fb f8df 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800689a:	f000 f817 	bl	80068cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800689e:	f7fa fbe5 	bl	800106c <main>
  bx  lr    
 80068a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068a4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80068a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80068b0:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 80068b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80068b8:	20000284 	.word	0x20000284

080068bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068bc:	e7fe      	b.n	80068bc <ADC_IRQHandler>
	...

080068c0 <__errno>:
 80068c0:	4b01      	ldr	r3, [pc, #4]	; (80068c8 <__errno+0x8>)
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000010 	.word	0x20000010

080068cc <__libc_init_array>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4d0d      	ldr	r5, [pc, #52]	; (8006904 <__libc_init_array+0x38>)
 80068d0:	4c0d      	ldr	r4, [pc, #52]	; (8006908 <__libc_init_array+0x3c>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	2600      	movs	r6, #0
 80068d8:	42a6      	cmp	r6, r4
 80068da:	d109      	bne.n	80068f0 <__libc_init_array+0x24>
 80068dc:	4d0b      	ldr	r5, [pc, #44]	; (800690c <__libc_init_array+0x40>)
 80068de:	4c0c      	ldr	r4, [pc, #48]	; (8006910 <__libc_init_array+0x44>)
 80068e0:	f000 ffae 	bl	8007840 <_init>
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	2600      	movs	r6, #0
 80068ea:	42a6      	cmp	r6, r4
 80068ec:	d105      	bne.n	80068fa <__libc_init_array+0x2e>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f4:	4798      	blx	r3
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7ee      	b.n	80068d8 <__libc_init_array+0xc>
 80068fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fe:	4798      	blx	r3
 8006900:	3601      	adds	r6, #1
 8006902:	e7f2      	b.n	80068ea <__libc_init_array+0x1e>
 8006904:	0800798c 	.word	0x0800798c
 8006908:	0800798c 	.word	0x0800798c
 800690c:	0800798c 	.word	0x0800798c
 8006910:	08007990 	.word	0x08007990

08006914 <memset>:
 8006914:	4402      	add	r2, r0
 8006916:	4603      	mov	r3, r0
 8006918:	4293      	cmp	r3, r2
 800691a:	d100      	bne.n	800691e <memset+0xa>
 800691c:	4770      	bx	lr
 800691e:	f803 1b01 	strb.w	r1, [r3], #1
 8006922:	e7f9      	b.n	8006918 <memset+0x4>

08006924 <iprintf>:
 8006924:	b40f      	push	{r0, r1, r2, r3}
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <iprintf+0x2c>)
 8006928:	b513      	push	{r0, r1, r4, lr}
 800692a:	681c      	ldr	r4, [r3, #0]
 800692c:	b124      	cbz	r4, 8006938 <iprintf+0x14>
 800692e:	69a3      	ldr	r3, [r4, #24]
 8006930:	b913      	cbnz	r3, 8006938 <iprintf+0x14>
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f866 	bl	8006a04 <__sinit>
 8006938:	ab05      	add	r3, sp, #20
 800693a:	9a04      	ldr	r2, [sp, #16]
 800693c:	68a1      	ldr	r1, [r4, #8]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f9bd 	bl	8006cc0 <_vfiprintf_r>
 8006946:	b002      	add	sp, #8
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	b004      	add	sp, #16
 800694e:	4770      	bx	lr
 8006950:	20000010 	.word	0x20000010

08006954 <std>:
 8006954:	2300      	movs	r3, #0
 8006956:	b510      	push	{r4, lr}
 8006958:	4604      	mov	r4, r0
 800695a:	e9c0 3300 	strd	r3, r3, [r0]
 800695e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006962:	6083      	str	r3, [r0, #8]
 8006964:	8181      	strh	r1, [r0, #12]
 8006966:	6643      	str	r3, [r0, #100]	; 0x64
 8006968:	81c2      	strh	r2, [r0, #14]
 800696a:	6183      	str	r3, [r0, #24]
 800696c:	4619      	mov	r1, r3
 800696e:	2208      	movs	r2, #8
 8006970:	305c      	adds	r0, #92	; 0x5c
 8006972:	f7ff ffcf 	bl	8006914 <memset>
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <std+0x38>)
 8006978:	6263      	str	r3, [r4, #36]	; 0x24
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <std+0x3c>)
 800697c:	62a3      	str	r3, [r4, #40]	; 0x28
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x40>)
 8006980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <std+0x44>)
 8006984:	6224      	str	r4, [r4, #32]
 8006986:	6323      	str	r3, [r4, #48]	; 0x30
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	08007269 	.word	0x08007269
 8006990:	0800728b 	.word	0x0800728b
 8006994:	080072c3 	.word	0x080072c3
 8006998:	080072e7 	.word	0x080072e7

0800699c <_cleanup_r>:
 800699c:	4901      	ldr	r1, [pc, #4]	; (80069a4 <_cleanup_r+0x8>)
 800699e:	f000 b8af 	b.w	8006b00 <_fwalk_reent>
 80069a2:	bf00      	nop
 80069a4:	080075c1 	.word	0x080075c1

080069a8 <__sfmoreglue>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	2268      	movs	r2, #104	; 0x68
 80069ac:	1e4d      	subs	r5, r1, #1
 80069ae:	4355      	muls	r5, r2
 80069b0:	460e      	mov	r6, r1
 80069b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069b6:	f000 f8e5 	bl	8006b84 <_malloc_r>
 80069ba:	4604      	mov	r4, r0
 80069bc:	b140      	cbz	r0, 80069d0 <__sfmoreglue+0x28>
 80069be:	2100      	movs	r1, #0
 80069c0:	e9c0 1600 	strd	r1, r6, [r0]
 80069c4:	300c      	adds	r0, #12
 80069c6:	60a0      	str	r0, [r4, #8]
 80069c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069cc:	f7ff ffa2 	bl	8006914 <memset>
 80069d0:	4620      	mov	r0, r4
 80069d2:	bd70      	pop	{r4, r5, r6, pc}

080069d4 <__sfp_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sfp_lock_acquire+0x8>)
 80069d6:	f000 b8b3 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20000275 	.word	0x20000275

080069e0 <__sfp_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__sfp_lock_release+0x8>)
 80069e2:	f000 b8ae 	b.w	8006b42 <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000275 	.word	0x20000275

080069ec <__sinit_lock_acquire>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__sinit_lock_acquire+0x8>)
 80069ee:	f000 b8a7 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 80069f2:	bf00      	nop
 80069f4:	20000276 	.word	0x20000276

080069f8 <__sinit_lock_release>:
 80069f8:	4801      	ldr	r0, [pc, #4]	; (8006a00 <__sinit_lock_release+0x8>)
 80069fa:	f000 b8a2 	b.w	8006b42 <__retarget_lock_release_recursive>
 80069fe:	bf00      	nop
 8006a00:	20000276 	.word	0x20000276

08006a04 <__sinit>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4604      	mov	r4, r0
 8006a08:	f7ff fff0 	bl	80069ec <__sinit_lock_acquire>
 8006a0c:	69a3      	ldr	r3, [r4, #24]
 8006a0e:	b11b      	cbz	r3, 8006a18 <__sinit+0x14>
 8006a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a14:	f7ff bff0 	b.w	80069f8 <__sinit_lock_release>
 8006a18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <__sinit+0x68>)
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <__sinit+0x6c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	bf04      	itt	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	61a3      	streq	r3, [r4, #24]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 f820 	bl	8006a74 <__sfp>
 8006a34:	6060      	str	r0, [r4, #4]
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f81c 	bl	8006a74 <__sfp>
 8006a3c:	60a0      	str	r0, [r4, #8]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f818 	bl	8006a74 <__sfp>
 8006a44:	2200      	movs	r2, #0
 8006a46:	60e0      	str	r0, [r4, #12]
 8006a48:	2104      	movs	r1, #4
 8006a4a:	6860      	ldr	r0, [r4, #4]
 8006a4c:	f7ff ff82 	bl	8006954 <std>
 8006a50:	68a0      	ldr	r0, [r4, #8]
 8006a52:	2201      	movs	r2, #1
 8006a54:	2109      	movs	r1, #9
 8006a56:	f7ff ff7d 	bl	8006954 <std>
 8006a5a:	68e0      	ldr	r0, [r4, #12]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	2112      	movs	r1, #18
 8006a60:	f7ff ff78 	bl	8006954 <std>
 8006a64:	2301      	movs	r3, #1
 8006a66:	61a3      	str	r3, [r4, #24]
 8006a68:	e7d2      	b.n	8006a10 <__sinit+0xc>
 8006a6a:	bf00      	nop
 8006a6c:	080078ec 	.word	0x080078ec
 8006a70:	0800699d 	.word	0x0800699d

08006a74 <__sfp>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	4607      	mov	r7, r0
 8006a78:	f7ff ffac 	bl	80069d4 <__sfp_lock_acquire>
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <__sfp+0x84>)
 8006a7e:	681e      	ldr	r6, [r3, #0]
 8006a80:	69b3      	ldr	r3, [r6, #24]
 8006a82:	b913      	cbnz	r3, 8006a8a <__sfp+0x16>
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff ffbd 	bl	8006a04 <__sinit>
 8006a8a:	3648      	adds	r6, #72	; 0x48
 8006a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	d503      	bpl.n	8006a9c <__sfp+0x28>
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	b30b      	cbz	r3, 8006adc <__sfp+0x68>
 8006a98:	6836      	ldr	r6, [r6, #0]
 8006a9a:	e7f7      	b.n	8006a8c <__sfp+0x18>
 8006a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aa0:	b9d5      	cbnz	r5, 8006ad8 <__sfp+0x64>
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <__sfp+0x88>)
 8006aa4:	60e3      	str	r3, [r4, #12]
 8006aa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aaa:	6665      	str	r5, [r4, #100]	; 0x64
 8006aac:	f000 f847 	bl	8006b3e <__retarget_lock_init_recursive>
 8006ab0:	f7ff ff96 	bl	80069e0 <__sfp_lock_release>
 8006ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	61a5      	str	r5, [r4, #24]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ac8:	f7ff ff24 	bl	8006914 <memset>
 8006acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad8:	3468      	adds	r4, #104	; 0x68
 8006ada:	e7d9      	b.n	8006a90 <__sfp+0x1c>
 8006adc:	2104      	movs	r1, #4
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7ff ff62 	bl	80069a8 <__sfmoreglue>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	6030      	str	r0, [r6, #0]
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d1d5      	bne.n	8006a98 <__sfp+0x24>
 8006aec:	f7ff ff78 	bl	80069e0 <__sfp_lock_release>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	e7ee      	b.n	8006ad4 <__sfp+0x60>
 8006af6:	bf00      	nop
 8006af8:	080078ec 	.word	0x080078ec
 8006afc:	ffff0001 	.word	0xffff0001

08006b00 <_fwalk_reent>:
 8006b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	4606      	mov	r6, r0
 8006b06:	4688      	mov	r8, r1
 8006b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b0c:	2700      	movs	r7, #0
 8006b0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b12:	f1b9 0901 	subs.w	r9, r9, #1
 8006b16:	d505      	bpl.n	8006b24 <_fwalk_reent+0x24>
 8006b18:	6824      	ldr	r4, [r4, #0]
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	d1f7      	bne.n	8006b0e <_fwalk_reent+0xe>
 8006b1e:	4638      	mov	r0, r7
 8006b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b24:	89ab      	ldrh	r3, [r5, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d907      	bls.n	8006b3a <_fwalk_reent+0x3a>
 8006b2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	d003      	beq.n	8006b3a <_fwalk_reent+0x3a>
 8006b32:	4629      	mov	r1, r5
 8006b34:	4630      	mov	r0, r6
 8006b36:	47c0      	blx	r8
 8006b38:	4307      	orrs	r7, r0
 8006b3a:	3568      	adds	r5, #104	; 0x68
 8006b3c:	e7e9      	b.n	8006b12 <_fwalk_reent+0x12>

08006b3e <__retarget_lock_init_recursive>:
 8006b3e:	4770      	bx	lr

08006b40 <__retarget_lock_acquire_recursive>:
 8006b40:	4770      	bx	lr

08006b42 <__retarget_lock_release_recursive>:
 8006b42:	4770      	bx	lr

08006b44 <sbrk_aligned>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4e0e      	ldr	r6, [pc, #56]	; (8006b80 <sbrk_aligned+0x3c>)
 8006b48:	460c      	mov	r4, r1
 8006b4a:	6831      	ldr	r1, [r6, #0]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	b911      	cbnz	r1, 8006b56 <sbrk_aligned+0x12>
 8006b50:	f000 fb7a 	bl	8007248 <_sbrk_r>
 8006b54:	6030      	str	r0, [r6, #0]
 8006b56:	4621      	mov	r1, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 fb75 	bl	8007248 <_sbrk_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d00a      	beq.n	8006b78 <sbrk_aligned+0x34>
 8006b62:	1cc4      	adds	r4, r0, #3
 8006b64:	f024 0403 	bic.w	r4, r4, #3
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d007      	beq.n	8006b7c <sbrk_aligned+0x38>
 8006b6c:	1a21      	subs	r1, r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fb6a 	bl	8007248 <_sbrk_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d101      	bne.n	8006b7c <sbrk_aligned+0x38>
 8006b78:	f04f 34ff 	mov.w	r4, #4294967295
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	2000027c 	.word	0x2000027c

08006b84 <_malloc_r>:
 8006b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b88:	1ccd      	adds	r5, r1, #3
 8006b8a:	f025 0503 	bic.w	r5, r5, #3
 8006b8e:	3508      	adds	r5, #8
 8006b90:	2d0c      	cmp	r5, #12
 8006b92:	bf38      	it	cc
 8006b94:	250c      	movcc	r5, #12
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	4607      	mov	r7, r0
 8006b9a:	db01      	blt.n	8006ba0 <_malloc_r+0x1c>
 8006b9c:	42a9      	cmp	r1, r5
 8006b9e:	d905      	bls.n	8006bac <_malloc_r+0x28>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bac:	4e2e      	ldr	r6, [pc, #184]	; (8006c68 <_malloc_r+0xe4>)
 8006bae:	f000 fdbb 	bl	8007728 <__malloc_lock>
 8006bb2:	6833      	ldr	r3, [r6, #0]
 8006bb4:	461c      	mov	r4, r3
 8006bb6:	bb34      	cbnz	r4, 8006c06 <_malloc_r+0x82>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f7ff ffc2 	bl	8006b44 <sbrk_aligned>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	d14d      	bne.n	8006c62 <_malloc_r+0xde>
 8006bc6:	6834      	ldr	r4, [r6, #0]
 8006bc8:	4626      	mov	r6, r4
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	d140      	bne.n	8006c50 <_malloc_r+0xcc>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	eb04 0803 	add.w	r8, r4, r3
 8006bd8:	f000 fb36 	bl	8007248 <_sbrk_r>
 8006bdc:	4580      	cmp	r8, r0
 8006bde:	d13a      	bne.n	8006c56 <_malloc_r+0xd2>
 8006be0:	6821      	ldr	r1, [r4, #0]
 8006be2:	3503      	adds	r5, #3
 8006be4:	1a6d      	subs	r5, r5, r1
 8006be6:	f025 0503 	bic.w	r5, r5, #3
 8006bea:	3508      	adds	r5, #8
 8006bec:	2d0c      	cmp	r5, #12
 8006bee:	bf38      	it	cc
 8006bf0:	250c      	movcc	r5, #12
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7ff ffa5 	bl	8006b44 <sbrk_aligned>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d02b      	beq.n	8006c56 <_malloc_r+0xd2>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	442b      	add	r3, r5
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	e00e      	b.n	8006c24 <_malloc_r+0xa0>
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	1b52      	subs	r2, r2, r5
 8006c0a:	d41e      	bmi.n	8006c4a <_malloc_r+0xc6>
 8006c0c:	2a0b      	cmp	r2, #11
 8006c0e:	d916      	bls.n	8006c3e <_malloc_r+0xba>
 8006c10:	1961      	adds	r1, r4, r5
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	6025      	str	r5, [r4, #0]
 8006c16:	bf18      	it	ne
 8006c18:	6059      	strne	r1, [r3, #4]
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	bf08      	it	eq
 8006c1e:	6031      	streq	r1, [r6, #0]
 8006c20:	5162      	str	r2, [r4, r5]
 8006c22:	604b      	str	r3, [r1, #4]
 8006c24:	4638      	mov	r0, r7
 8006c26:	f104 060b 	add.w	r6, r4, #11
 8006c2a:	f000 fd83 	bl	8007734 <__malloc_unlock>
 8006c2e:	f026 0607 	bic.w	r6, r6, #7
 8006c32:	1d23      	adds	r3, r4, #4
 8006c34:	1af2      	subs	r2, r6, r3
 8006c36:	d0b6      	beq.n	8006ba6 <_malloc_r+0x22>
 8006c38:	1b9b      	subs	r3, r3, r6
 8006c3a:	50a3      	str	r3, [r4, r2]
 8006c3c:	e7b3      	b.n	8006ba6 <_malloc_r+0x22>
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	bf0c      	ite	eq
 8006c44:	6032      	streq	r2, [r6, #0]
 8006c46:	605a      	strne	r2, [r3, #4]
 8006c48:	e7ec      	b.n	8006c24 <_malloc_r+0xa0>
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	6864      	ldr	r4, [r4, #4]
 8006c4e:	e7b2      	b.n	8006bb6 <_malloc_r+0x32>
 8006c50:	4634      	mov	r4, r6
 8006c52:	6876      	ldr	r6, [r6, #4]
 8006c54:	e7b9      	b.n	8006bca <_malloc_r+0x46>
 8006c56:	230c      	movs	r3, #12
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f000 fd6a 	bl	8007734 <__malloc_unlock>
 8006c60:	e7a1      	b.n	8006ba6 <_malloc_r+0x22>
 8006c62:	6025      	str	r5, [r4, #0]
 8006c64:	e7de      	b.n	8006c24 <_malloc_r+0xa0>
 8006c66:	bf00      	nop
 8006c68:	20000278 	.word	0x20000278

08006c6c <__sfputc_r>:
 8006c6c:	6893      	ldr	r3, [r2, #8]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	b410      	push	{r4}
 8006c74:	6093      	str	r3, [r2, #8]
 8006c76:	da08      	bge.n	8006c8a <__sfputc_r+0x1e>
 8006c78:	6994      	ldr	r4, [r2, #24]
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	db01      	blt.n	8006c82 <__sfputc_r+0x16>
 8006c7e:	290a      	cmp	r1, #10
 8006c80:	d103      	bne.n	8006c8a <__sfputc_r+0x1e>
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c86:	f000 bb33 	b.w	80072f0 <__swbuf_r>
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	1c58      	adds	r0, r3, #1
 8006c8e:	6010      	str	r0, [r2, #0]
 8006c90:	7019      	strb	r1, [r3, #0]
 8006c92:	4608      	mov	r0, r1
 8006c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <__sfputs_r>:
 8006c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	18d5      	adds	r5, r2, r3
 8006ca4:	42ac      	cmp	r4, r5
 8006ca6:	d101      	bne.n	8006cac <__sfputs_r+0x12>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e007      	b.n	8006cbc <__sfputs_r+0x22>
 8006cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffda 	bl	8006c6c <__sfputc_r>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d1f3      	bne.n	8006ca4 <__sfputs_r+0xa>
 8006cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cc0 <_vfiprintf_r>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	b09d      	sub	sp, #116	; 0x74
 8006cc8:	4614      	mov	r4, r2
 8006cca:	4698      	mov	r8, r3
 8006ccc:	4606      	mov	r6, r0
 8006cce:	b118      	cbz	r0, 8006cd8 <_vfiprintf_r+0x18>
 8006cd0:	6983      	ldr	r3, [r0, #24]
 8006cd2:	b90b      	cbnz	r3, 8006cd8 <_vfiprintf_r+0x18>
 8006cd4:	f7ff fe96 	bl	8006a04 <__sinit>
 8006cd8:	4b89      	ldr	r3, [pc, #548]	; (8006f00 <_vfiprintf_r+0x240>)
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	d11b      	bne.n	8006d16 <_vfiprintf_r+0x56>
 8006cde:	6875      	ldr	r5, [r6, #4]
 8006ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d405      	bmi.n	8006cf2 <_vfiprintf_r+0x32>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_vfiprintf_r+0x32>
 8006cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cee:	f7ff ff27 	bl	8006b40 <__retarget_lock_acquire_recursive>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	071b      	lsls	r3, r3, #28
 8006cf6:	d501      	bpl.n	8006cfc <_vfiprintf_r+0x3c>
 8006cf8:	692b      	ldr	r3, [r5, #16]
 8006cfa:	b9eb      	cbnz	r3, 8006d38 <_vfiprintf_r+0x78>
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 fb5a 	bl	80073b8 <__swsetup_r>
 8006d04:	b1c0      	cbz	r0, 8006d38 <_vfiprintf_r+0x78>
 8006d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d08:	07dc      	lsls	r4, r3, #31
 8006d0a:	d50e      	bpl.n	8006d2a <_vfiprintf_r+0x6a>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b01d      	add	sp, #116	; 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	4b7b      	ldr	r3, [pc, #492]	; (8006f04 <_vfiprintf_r+0x244>)
 8006d18:	429d      	cmp	r5, r3
 8006d1a:	d101      	bne.n	8006d20 <_vfiprintf_r+0x60>
 8006d1c:	68b5      	ldr	r5, [r6, #8]
 8006d1e:	e7df      	b.n	8006ce0 <_vfiprintf_r+0x20>
 8006d20:	4b79      	ldr	r3, [pc, #484]	; (8006f08 <_vfiprintf_r+0x248>)
 8006d22:	429d      	cmp	r5, r3
 8006d24:	bf08      	it	eq
 8006d26:	68f5      	ldreq	r5, [r6, #12]
 8006d28:	e7da      	b.n	8006ce0 <_vfiprintf_r+0x20>
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	0598      	lsls	r0, r3, #22
 8006d2e:	d4ed      	bmi.n	8006d0c <_vfiprintf_r+0x4c>
 8006d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d32:	f7ff ff06 	bl	8006b42 <__retarget_lock_release_recursive>
 8006d36:	e7e9      	b.n	8006d0c <_vfiprintf_r+0x4c>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d46:	2330      	movs	r3, #48	; 0x30
 8006d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f0c <_vfiprintf_r+0x24c>
 8006d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d50:	f04f 0901 	mov.w	r9, #1
 8006d54:	4623      	mov	r3, r4
 8006d56:	469a      	mov	sl, r3
 8006d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_vfiprintf_r+0xa2>
 8006d5e:	2a25      	cmp	r2, #37	; 0x25
 8006d60:	d1f9      	bne.n	8006d56 <_vfiprintf_r+0x96>
 8006d62:	ebba 0b04 	subs.w	fp, sl, r4
 8006d66:	d00b      	beq.n	8006d80 <_vfiprintf_r+0xc0>
 8006d68:	465b      	mov	r3, fp
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff ff93 	bl	8006c9a <__sfputs_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	f000 80aa 	beq.w	8006ece <_vfiprintf_r+0x20e>
 8006d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d7c:	445a      	add	r2, fp
 8006d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80a2 	beq.w	8006ece <_vfiprintf_r+0x20e>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d94:	f10a 0a01 	add.w	sl, sl, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	9307      	str	r3, [sp, #28]
 8006d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006da0:	931a      	str	r3, [sp, #104]	; 0x68
 8006da2:	4654      	mov	r4, sl
 8006da4:	2205      	movs	r2, #5
 8006da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006daa:	4858      	ldr	r0, [pc, #352]	; (8006f0c <_vfiprintf_r+0x24c>)
 8006dac:	f7f9 fa10 	bl	80001d0 <memchr>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	b9d8      	cbnz	r0, 8006dec <_vfiprintf_r+0x12c>
 8006db4:	06d1      	lsls	r1, r2, #27
 8006db6:	bf44      	itt	mi
 8006db8:	2320      	movmi	r3, #32
 8006dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbe:	0713      	lsls	r3, r2, #28
 8006dc0:	bf44      	itt	mi
 8006dc2:	232b      	movmi	r3, #43	; 0x2b
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dce:	d015      	beq.n	8006dfc <_vfiprintf_r+0x13c>
 8006dd0:	9a07      	ldr	r2, [sp, #28]
 8006dd2:	4654      	mov	r4, sl
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f04f 0c0a 	mov.w	ip, #10
 8006dda:	4621      	mov	r1, r4
 8006ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006de0:	3b30      	subs	r3, #48	; 0x30
 8006de2:	2b09      	cmp	r3, #9
 8006de4:	d94e      	bls.n	8006e84 <_vfiprintf_r+0x1c4>
 8006de6:	b1b0      	cbz	r0, 8006e16 <_vfiprintf_r+0x156>
 8006de8:	9207      	str	r2, [sp, #28]
 8006dea:	e014      	b.n	8006e16 <_vfiprintf_r+0x156>
 8006dec:	eba0 0308 	sub.w	r3, r0, r8
 8006df0:	fa09 f303 	lsl.w	r3, r9, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	46a2      	mov	sl, r4
 8006dfa:	e7d2      	b.n	8006da2 <_vfiprintf_r+0xe2>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1d19      	adds	r1, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	9103      	str	r1, [sp, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bfbb      	ittet	lt
 8006e08:	425b      	neglt	r3, r3
 8006e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0e:	9307      	strge	r3, [sp, #28]
 8006e10:	9307      	strlt	r3, [sp, #28]
 8006e12:	bfb8      	it	lt
 8006e14:	9204      	strlt	r2, [sp, #16]
 8006e16:	7823      	ldrb	r3, [r4, #0]
 8006e18:	2b2e      	cmp	r3, #46	; 0x2e
 8006e1a:	d10c      	bne.n	8006e36 <_vfiprintf_r+0x176>
 8006e1c:	7863      	ldrb	r3, [r4, #1]
 8006e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e20:	d135      	bne.n	8006e8e <_vfiprintf_r+0x1ce>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	9203      	str	r2, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfb8      	it	lt
 8006e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e32:	3402      	adds	r4, #2
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f1c <_vfiprintf_r+0x25c>
 8006e3a:	7821      	ldrb	r1, [r4, #0]
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	4650      	mov	r0, sl
 8006e40:	f7f9 f9c6 	bl	80001d0 <memchr>
 8006e44:	b140      	cbz	r0, 8006e58 <_vfiprintf_r+0x198>
 8006e46:	2340      	movs	r3, #64	; 0x40
 8006e48:	eba0 000a 	sub.w	r0, r0, sl
 8006e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	4303      	orrs	r3, r0
 8006e54:	3401      	adds	r4, #1
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5c:	482c      	ldr	r0, [pc, #176]	; (8006f10 <_vfiprintf_r+0x250>)
 8006e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e62:	2206      	movs	r2, #6
 8006e64:	f7f9 f9b4 	bl	80001d0 <memchr>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d03f      	beq.n	8006eec <_vfiprintf_r+0x22c>
 8006e6c:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <_vfiprintf_r+0x254>)
 8006e6e:	bb1b      	cbnz	r3, 8006eb8 <_vfiprintf_r+0x1f8>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	3307      	adds	r3, #7
 8006e74:	f023 0307 	bic.w	r3, r3, #7
 8006e78:	3308      	adds	r3, #8
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7e:	443b      	add	r3, r7
 8006e80:	9309      	str	r3, [sp, #36]	; 0x24
 8006e82:	e767      	b.n	8006d54 <_vfiprintf_r+0x94>
 8006e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e88:	460c      	mov	r4, r1
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	e7a5      	b.n	8006dda <_vfiprintf_r+0x11a>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	3401      	adds	r4, #1
 8006e92:	9305      	str	r3, [sp, #20]
 8006e94:	4619      	mov	r1, r3
 8006e96:	f04f 0c0a 	mov.w	ip, #10
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea0:	3a30      	subs	r2, #48	; 0x30
 8006ea2:	2a09      	cmp	r2, #9
 8006ea4:	d903      	bls.n	8006eae <_vfiprintf_r+0x1ee>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0c5      	beq.n	8006e36 <_vfiprintf_r+0x176>
 8006eaa:	9105      	str	r1, [sp, #20]
 8006eac:	e7c3      	b.n	8006e36 <_vfiprintf_r+0x176>
 8006eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e7f0      	b.n	8006e9a <_vfiprintf_r+0x1da>
 8006eb8:	ab03      	add	r3, sp, #12
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <_vfiprintf_r+0x258>)
 8006ec0:	a904      	add	r1, sp, #16
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	4607      	mov	r7, r0
 8006eca:	1c78      	adds	r0, r7, #1
 8006ecc:	d1d6      	bne.n	8006e7c <_vfiprintf_r+0x1bc>
 8006ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ed0:	07d9      	lsls	r1, r3, #31
 8006ed2:	d405      	bmi.n	8006ee0 <_vfiprintf_r+0x220>
 8006ed4:	89ab      	ldrh	r3, [r5, #12]
 8006ed6:	059a      	lsls	r2, r3, #22
 8006ed8:	d402      	bmi.n	8006ee0 <_vfiprintf_r+0x220>
 8006eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006edc:	f7ff fe31 	bl	8006b42 <__retarget_lock_release_recursive>
 8006ee0:	89ab      	ldrh	r3, [r5, #12]
 8006ee2:	065b      	lsls	r3, r3, #25
 8006ee4:	f53f af12 	bmi.w	8006d0c <_vfiprintf_r+0x4c>
 8006ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eea:	e711      	b.n	8006d10 <_vfiprintf_r+0x50>
 8006eec:	ab03      	add	r3, sp, #12
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <_vfiprintf_r+0x258>)
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f880 	bl	8006ffc <_printf_i>
 8006efc:	e7e4      	b.n	8006ec8 <_vfiprintf_r+0x208>
 8006efe:	bf00      	nop
 8006f00:	08007910 	.word	0x08007910
 8006f04:	08007930 	.word	0x08007930
 8006f08:	080078f0 	.word	0x080078f0
 8006f0c:	08007950 	.word	0x08007950
 8006f10:	0800795a 	.word	0x0800795a
 8006f14:	00000000 	.word	0x00000000
 8006f18:	08006c9b 	.word	0x08006c9b
 8006f1c:	08007956 	.word	0x08007956

08006f20 <_printf_common>:
 8006f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	4616      	mov	r6, r2
 8006f26:	4699      	mov	r9, r3
 8006f28:	688a      	ldr	r2, [r1, #8]
 8006f2a:	690b      	ldr	r3, [r1, #16]
 8006f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	bfb8      	it	lt
 8006f34:	4613      	movlt	r3, r2
 8006f36:	6033      	str	r3, [r6, #0]
 8006f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	b10a      	cbz	r2, 8006f46 <_printf_common+0x26>
 8006f42:	3301      	adds	r3, #1
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	0699      	lsls	r1, r3, #26
 8006f4a:	bf42      	ittt	mi
 8006f4c:	6833      	ldrmi	r3, [r6, #0]
 8006f4e:	3302      	addmi	r3, #2
 8006f50:	6033      	strmi	r3, [r6, #0]
 8006f52:	6825      	ldr	r5, [r4, #0]
 8006f54:	f015 0506 	ands.w	r5, r5, #6
 8006f58:	d106      	bne.n	8006f68 <_printf_common+0x48>
 8006f5a:	f104 0a19 	add.w	sl, r4, #25
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	6832      	ldr	r2, [r6, #0]
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	dc26      	bgt.n	8006fb6 <_printf_common+0x96>
 8006f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f6c:	1e13      	subs	r3, r2, #0
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	bf18      	it	ne
 8006f72:	2301      	movne	r3, #1
 8006f74:	0692      	lsls	r2, r2, #26
 8006f76:	d42b      	bmi.n	8006fd0 <_printf_common+0xb0>
 8006f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4638      	mov	r0, r7
 8006f80:	47c0      	blx	r8
 8006f82:	3001      	adds	r0, #1
 8006f84:	d01e      	beq.n	8006fc4 <_printf_common+0xa4>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	68e5      	ldr	r5, [r4, #12]
 8006f8a:	6832      	ldr	r2, [r6, #0]
 8006f8c:	f003 0306 	and.w	r3, r3, #6
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	bf08      	it	eq
 8006f94:	1aad      	subeq	r5, r5, r2
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	6922      	ldr	r2, [r4, #16]
 8006f9a:	bf0c      	ite	eq
 8006f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa0:	2500      	movne	r5, #0
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bfc4      	itt	gt
 8006fa6:	1a9b      	subgt	r3, r3, r2
 8006fa8:	18ed      	addgt	r5, r5, r3
 8006faa:	2600      	movs	r6, #0
 8006fac:	341a      	adds	r4, #26
 8006fae:	42b5      	cmp	r5, r6
 8006fb0:	d11a      	bne.n	8006fe8 <_printf_common+0xc8>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e008      	b.n	8006fc8 <_printf_common+0xa8>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4652      	mov	r2, sl
 8006fba:	4649      	mov	r1, r9
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	47c0      	blx	r8
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d103      	bne.n	8006fcc <_printf_common+0xac>
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7c6      	b.n	8006f5e <_printf_common+0x3e>
 8006fd0:	18e1      	adds	r1, r4, r3
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	2030      	movs	r0, #48	; 0x30
 8006fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fda:	4422      	add	r2, r4
 8006fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	e7c7      	b.n	8006f78 <_printf_common+0x58>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4622      	mov	r2, r4
 8006fec:	4649      	mov	r1, r9
 8006fee:	4638      	mov	r0, r7
 8006ff0:	47c0      	blx	r8
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d0e6      	beq.n	8006fc4 <_printf_common+0xa4>
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	e7d9      	b.n	8006fae <_printf_common+0x8e>
	...

08006ffc <_printf_i>:
 8006ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	7e0f      	ldrb	r7, [r1, #24]
 8007002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007004:	2f78      	cmp	r7, #120	; 0x78
 8007006:	4691      	mov	r9, r2
 8007008:	4680      	mov	r8, r0
 800700a:	460c      	mov	r4, r1
 800700c:	469a      	mov	sl, r3
 800700e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007012:	d807      	bhi.n	8007024 <_printf_i+0x28>
 8007014:	2f62      	cmp	r7, #98	; 0x62
 8007016:	d80a      	bhi.n	800702e <_printf_i+0x32>
 8007018:	2f00      	cmp	r7, #0
 800701a:	f000 80d8 	beq.w	80071ce <_printf_i+0x1d2>
 800701e:	2f58      	cmp	r7, #88	; 0x58
 8007020:	f000 80a3 	beq.w	800716a <_printf_i+0x16e>
 8007024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800702c:	e03a      	b.n	80070a4 <_printf_i+0xa8>
 800702e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007032:	2b15      	cmp	r3, #21
 8007034:	d8f6      	bhi.n	8007024 <_printf_i+0x28>
 8007036:	a101      	add	r1, pc, #4	; (adr r1, 800703c <_printf_i+0x40>)
 8007038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800703c:	08007095 	.word	0x08007095
 8007040:	080070a9 	.word	0x080070a9
 8007044:	08007025 	.word	0x08007025
 8007048:	08007025 	.word	0x08007025
 800704c:	08007025 	.word	0x08007025
 8007050:	08007025 	.word	0x08007025
 8007054:	080070a9 	.word	0x080070a9
 8007058:	08007025 	.word	0x08007025
 800705c:	08007025 	.word	0x08007025
 8007060:	08007025 	.word	0x08007025
 8007064:	08007025 	.word	0x08007025
 8007068:	080071b5 	.word	0x080071b5
 800706c:	080070d9 	.word	0x080070d9
 8007070:	08007197 	.word	0x08007197
 8007074:	08007025 	.word	0x08007025
 8007078:	08007025 	.word	0x08007025
 800707c:	080071d7 	.word	0x080071d7
 8007080:	08007025 	.word	0x08007025
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007025 	.word	0x08007025
 800708c:	08007025 	.word	0x08007025
 8007090:	0800719f 	.word	0x0800719f
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	1d1a      	adds	r2, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	602a      	str	r2, [r5, #0]
 800709c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0a3      	b.n	80071f0 <_printf_i+0x1f4>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	6829      	ldr	r1, [r5, #0]
 80070ac:	0606      	lsls	r6, r0, #24
 80070ae:	f101 0304 	add.w	r3, r1, #4
 80070b2:	d50a      	bpl.n	80070ca <_printf_i+0xce>
 80070b4:	680e      	ldr	r6, [r1, #0]
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	2e00      	cmp	r6, #0
 80070ba:	da03      	bge.n	80070c4 <_printf_i+0xc8>
 80070bc:	232d      	movs	r3, #45	; 0x2d
 80070be:	4276      	negs	r6, r6
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c4:	485e      	ldr	r0, [pc, #376]	; (8007240 <_printf_i+0x244>)
 80070c6:	230a      	movs	r3, #10
 80070c8:	e019      	b.n	80070fe <_printf_i+0x102>
 80070ca:	680e      	ldr	r6, [r1, #0]
 80070cc:	602b      	str	r3, [r5, #0]
 80070ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070d2:	bf18      	it	ne
 80070d4:	b236      	sxthne	r6, r6
 80070d6:	e7ef      	b.n	80070b8 <_printf_i+0xbc>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	6029      	str	r1, [r5, #0]
 80070e0:	0601      	lsls	r1, r0, #24
 80070e2:	d501      	bpl.n	80070e8 <_printf_i+0xec>
 80070e4:	681e      	ldr	r6, [r3, #0]
 80070e6:	e002      	b.n	80070ee <_printf_i+0xf2>
 80070e8:	0646      	lsls	r6, r0, #25
 80070ea:	d5fb      	bpl.n	80070e4 <_printf_i+0xe8>
 80070ec:	881e      	ldrh	r6, [r3, #0]
 80070ee:	4854      	ldr	r0, [pc, #336]	; (8007240 <_printf_i+0x244>)
 80070f0:	2f6f      	cmp	r7, #111	; 0x6f
 80070f2:	bf0c      	ite	eq
 80070f4:	2308      	moveq	r3, #8
 80070f6:	230a      	movne	r3, #10
 80070f8:	2100      	movs	r1, #0
 80070fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070fe:	6865      	ldr	r5, [r4, #4]
 8007100:	60a5      	str	r5, [r4, #8]
 8007102:	2d00      	cmp	r5, #0
 8007104:	bfa2      	ittt	ge
 8007106:	6821      	ldrge	r1, [r4, #0]
 8007108:	f021 0104 	bicge.w	r1, r1, #4
 800710c:	6021      	strge	r1, [r4, #0]
 800710e:	b90e      	cbnz	r6, 8007114 <_printf_i+0x118>
 8007110:	2d00      	cmp	r5, #0
 8007112:	d04d      	beq.n	80071b0 <_printf_i+0x1b4>
 8007114:	4615      	mov	r5, r2
 8007116:	fbb6 f1f3 	udiv	r1, r6, r3
 800711a:	fb03 6711 	mls	r7, r3, r1, r6
 800711e:	5dc7      	ldrb	r7, [r0, r7]
 8007120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007124:	4637      	mov	r7, r6
 8007126:	42bb      	cmp	r3, r7
 8007128:	460e      	mov	r6, r1
 800712a:	d9f4      	bls.n	8007116 <_printf_i+0x11a>
 800712c:	2b08      	cmp	r3, #8
 800712e:	d10b      	bne.n	8007148 <_printf_i+0x14c>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	07de      	lsls	r6, r3, #31
 8007134:	d508      	bpl.n	8007148 <_printf_i+0x14c>
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6861      	ldr	r1, [r4, #4]
 800713a:	4299      	cmp	r1, r3
 800713c:	bfde      	ittt	le
 800713e:	2330      	movle	r3, #48	; 0x30
 8007140:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007144:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007148:	1b52      	subs	r2, r2, r5
 800714a:	6122      	str	r2, [r4, #16]
 800714c:	f8cd a000 	str.w	sl, [sp]
 8007150:	464b      	mov	r3, r9
 8007152:	aa03      	add	r2, sp, #12
 8007154:	4621      	mov	r1, r4
 8007156:	4640      	mov	r0, r8
 8007158:	f7ff fee2 	bl	8006f20 <_printf_common>
 800715c:	3001      	adds	r0, #1
 800715e:	d14c      	bne.n	80071fa <_printf_i+0x1fe>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	b004      	add	sp, #16
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	4835      	ldr	r0, [pc, #212]	; (8007240 <_printf_i+0x244>)
 800716c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007170:	6829      	ldr	r1, [r5, #0]
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	f851 6b04 	ldr.w	r6, [r1], #4
 8007178:	6029      	str	r1, [r5, #0]
 800717a:	061d      	lsls	r5, r3, #24
 800717c:	d514      	bpl.n	80071a8 <_printf_i+0x1ac>
 800717e:	07df      	lsls	r7, r3, #31
 8007180:	bf44      	itt	mi
 8007182:	f043 0320 	orrmi.w	r3, r3, #32
 8007186:	6023      	strmi	r3, [r4, #0]
 8007188:	b91e      	cbnz	r6, 8007192 <_printf_i+0x196>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	f023 0320 	bic.w	r3, r3, #32
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	2310      	movs	r3, #16
 8007194:	e7b0      	b.n	80070f8 <_printf_i+0xfc>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	f043 0320 	orr.w	r3, r3, #32
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	2378      	movs	r3, #120	; 0x78
 80071a0:	4828      	ldr	r0, [pc, #160]	; (8007244 <_printf_i+0x248>)
 80071a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071a6:	e7e3      	b.n	8007170 <_printf_i+0x174>
 80071a8:	0659      	lsls	r1, r3, #25
 80071aa:	bf48      	it	mi
 80071ac:	b2b6      	uxthmi	r6, r6
 80071ae:	e7e6      	b.n	800717e <_printf_i+0x182>
 80071b0:	4615      	mov	r5, r2
 80071b2:	e7bb      	b.n	800712c <_printf_i+0x130>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	6826      	ldr	r6, [r4, #0]
 80071b8:	6961      	ldr	r1, [r4, #20]
 80071ba:	1d18      	adds	r0, r3, #4
 80071bc:	6028      	str	r0, [r5, #0]
 80071be:	0635      	lsls	r5, r6, #24
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0x1cc>
 80071c4:	6019      	str	r1, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0x1d2>
 80071c8:	0670      	lsls	r0, r6, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0x1c8>
 80071cc:	8019      	strh	r1, [r3, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	4615      	mov	r5, r2
 80071d4:	e7ba      	b.n	800714c <_printf_i+0x150>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	1d1a      	adds	r2, r3, #4
 80071da:	602a      	str	r2, [r5, #0]
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	2100      	movs	r1, #0
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7f8 fff4 	bl	80001d0 <memchr>
 80071e8:	b108      	cbz	r0, 80071ee <_printf_i+0x1f2>
 80071ea:	1b40      	subs	r0, r0, r5
 80071ec:	6060      	str	r0, [r4, #4]
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	2300      	movs	r3, #0
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f8:	e7a8      	b.n	800714c <_printf_i+0x150>
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	462a      	mov	r2, r5
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	47d0      	blx	sl
 8007204:	3001      	adds	r0, #1
 8007206:	d0ab      	beq.n	8007160 <_printf_i+0x164>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	079b      	lsls	r3, r3, #30
 800720c:	d413      	bmi.n	8007236 <_printf_i+0x23a>
 800720e:	68e0      	ldr	r0, [r4, #12]
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	4298      	cmp	r0, r3
 8007214:	bfb8      	it	lt
 8007216:	4618      	movlt	r0, r3
 8007218:	e7a4      	b.n	8007164 <_printf_i+0x168>
 800721a:	2301      	movs	r3, #1
 800721c:	4632      	mov	r2, r6
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	47d0      	blx	sl
 8007224:	3001      	adds	r0, #1
 8007226:	d09b      	beq.n	8007160 <_printf_i+0x164>
 8007228:	3501      	adds	r5, #1
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	9903      	ldr	r1, [sp, #12]
 800722e:	1a5b      	subs	r3, r3, r1
 8007230:	42ab      	cmp	r3, r5
 8007232:	dcf2      	bgt.n	800721a <_printf_i+0x21e>
 8007234:	e7eb      	b.n	800720e <_printf_i+0x212>
 8007236:	2500      	movs	r5, #0
 8007238:	f104 0619 	add.w	r6, r4, #25
 800723c:	e7f5      	b.n	800722a <_printf_i+0x22e>
 800723e:	bf00      	nop
 8007240:	08007961 	.word	0x08007961
 8007244:	08007972 	.word	0x08007972

08007248 <_sbrk_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d06      	ldr	r5, [pc, #24]	; (8007264 <_sbrk_r+0x1c>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f7fa fba0 	bl	8001998 <_sbrk>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_sbrk_r+0x1a>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_sbrk_r+0x1a>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20000280 	.word	0x20000280

08007268 <__sread>:
 8007268:	b510      	push	{r4, lr}
 800726a:	460c      	mov	r4, r1
 800726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007270:	f000 fab2 	bl	80077d8 <_read_r>
 8007274:	2800      	cmp	r0, #0
 8007276:	bfab      	itete	ge
 8007278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800727a:	89a3      	ldrhlt	r3, [r4, #12]
 800727c:	181b      	addge	r3, r3, r0
 800727e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007282:	bfac      	ite	ge
 8007284:	6563      	strge	r3, [r4, #84]	; 0x54
 8007286:	81a3      	strhlt	r3, [r4, #12]
 8007288:	bd10      	pop	{r4, pc}

0800728a <__swrite>:
 800728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	461f      	mov	r7, r3
 8007290:	898b      	ldrh	r3, [r1, #12]
 8007292:	05db      	lsls	r3, r3, #23
 8007294:	4605      	mov	r5, r0
 8007296:	460c      	mov	r4, r1
 8007298:	4616      	mov	r6, r2
 800729a:	d505      	bpl.n	80072a8 <__swrite+0x1e>
 800729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a0:	2302      	movs	r3, #2
 80072a2:	2200      	movs	r2, #0
 80072a4:	f000 f9c8 	bl	8007638 <_lseek_r>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	4632      	mov	r2, r6
 80072b6:	463b      	mov	r3, r7
 80072b8:	4628      	mov	r0, r5
 80072ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072be:	f000 b869 	b.w	8007394 <_write_r>

080072c2 <__sseek>:
 80072c2:	b510      	push	{r4, lr}
 80072c4:	460c      	mov	r4, r1
 80072c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ca:	f000 f9b5 	bl	8007638 <_lseek_r>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	bf15      	itete	ne
 80072d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072de:	81a3      	strheq	r3, [r4, #12]
 80072e0:	bf18      	it	ne
 80072e2:	81a3      	strhne	r3, [r4, #12]
 80072e4:	bd10      	pop	{r4, pc}

080072e6 <__sclose>:
 80072e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ea:	f000 b8d3 	b.w	8007494 <_close_r>
	...

080072f0 <__swbuf_r>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	460e      	mov	r6, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4605      	mov	r5, r0
 80072f8:	b118      	cbz	r0, 8007302 <__swbuf_r+0x12>
 80072fa:	6983      	ldr	r3, [r0, #24]
 80072fc:	b90b      	cbnz	r3, 8007302 <__swbuf_r+0x12>
 80072fe:	f7ff fb81 	bl	8006a04 <__sinit>
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <__swbuf_r+0x98>)
 8007304:	429c      	cmp	r4, r3
 8007306:	d12b      	bne.n	8007360 <__swbuf_r+0x70>
 8007308:	686c      	ldr	r4, [r5, #4]
 800730a:	69a3      	ldr	r3, [r4, #24]
 800730c:	60a3      	str	r3, [r4, #8]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	071a      	lsls	r2, r3, #28
 8007312:	d52f      	bpl.n	8007374 <__swbuf_r+0x84>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	b36b      	cbz	r3, 8007374 <__swbuf_r+0x84>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6820      	ldr	r0, [r4, #0]
 800731c:	1ac0      	subs	r0, r0, r3
 800731e:	6963      	ldr	r3, [r4, #20]
 8007320:	b2f6      	uxtb	r6, r6
 8007322:	4283      	cmp	r3, r0
 8007324:	4637      	mov	r7, r6
 8007326:	dc04      	bgt.n	8007332 <__swbuf_r+0x42>
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f948 	bl	80075c0 <_fflush_r>
 8007330:	bb30      	cbnz	r0, 8007380 <__swbuf_r+0x90>
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	3b01      	subs	r3, #1
 8007336:	60a3      	str	r3, [r4, #8]
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	701e      	strb	r6, [r3, #0]
 8007340:	6963      	ldr	r3, [r4, #20]
 8007342:	3001      	adds	r0, #1
 8007344:	4283      	cmp	r3, r0
 8007346:	d004      	beq.n	8007352 <__swbuf_r+0x62>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	07db      	lsls	r3, r3, #31
 800734c:	d506      	bpl.n	800735c <__swbuf_r+0x6c>
 800734e:	2e0a      	cmp	r6, #10
 8007350:	d104      	bne.n	800735c <__swbuf_r+0x6c>
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f933 	bl	80075c0 <_fflush_r>
 800735a:	b988      	cbnz	r0, 8007380 <__swbuf_r+0x90>
 800735c:	4638      	mov	r0, r7
 800735e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <__swbuf_r+0x9c>)
 8007362:	429c      	cmp	r4, r3
 8007364:	d101      	bne.n	800736a <__swbuf_r+0x7a>
 8007366:	68ac      	ldr	r4, [r5, #8]
 8007368:	e7cf      	b.n	800730a <__swbuf_r+0x1a>
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <__swbuf_r+0xa0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	bf08      	it	eq
 8007370:	68ec      	ldreq	r4, [r5, #12]
 8007372:	e7ca      	b.n	800730a <__swbuf_r+0x1a>
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 f81e 	bl	80073b8 <__swsetup_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	d0cb      	beq.n	8007318 <__swbuf_r+0x28>
 8007380:	f04f 37ff 	mov.w	r7, #4294967295
 8007384:	e7ea      	b.n	800735c <__swbuf_r+0x6c>
 8007386:	bf00      	nop
 8007388:	08007910 	.word	0x08007910
 800738c:	08007930 	.word	0x08007930
 8007390:	080078f0 	.word	0x080078f0

08007394 <_write_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	; (80073b4 <_write_r+0x20>)
 8007398:	4604      	mov	r4, r0
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fa fadb 	bl	800195e <_write>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_write_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_write_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20000280 	.word	0x20000280

080073b8 <__swsetup_r>:
 80073b8:	4b32      	ldr	r3, [pc, #200]	; (8007484 <__swsetup_r+0xcc>)
 80073ba:	b570      	push	{r4, r5, r6, lr}
 80073bc:	681d      	ldr	r5, [r3, #0]
 80073be:	4606      	mov	r6, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	b125      	cbz	r5, 80073ce <__swsetup_r+0x16>
 80073c4:	69ab      	ldr	r3, [r5, #24]
 80073c6:	b913      	cbnz	r3, 80073ce <__swsetup_r+0x16>
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7ff fb1b 	bl	8006a04 <__sinit>
 80073ce:	4b2e      	ldr	r3, [pc, #184]	; (8007488 <__swsetup_r+0xd0>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d10f      	bne.n	80073f4 <__swsetup_r+0x3c>
 80073d4:	686c      	ldr	r4, [r5, #4]
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073dc:	0719      	lsls	r1, r3, #28
 80073de:	d42c      	bmi.n	800743a <__swsetup_r+0x82>
 80073e0:	06dd      	lsls	r5, r3, #27
 80073e2:	d411      	bmi.n	8007408 <__swsetup_r+0x50>
 80073e4:	2309      	movs	r3, #9
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	e03e      	b.n	8007472 <__swsetup_r+0xba>
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <__swsetup_r+0xd4>)
 80073f6:	429c      	cmp	r4, r3
 80073f8:	d101      	bne.n	80073fe <__swsetup_r+0x46>
 80073fa:	68ac      	ldr	r4, [r5, #8]
 80073fc:	e7eb      	b.n	80073d6 <__swsetup_r+0x1e>
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <__swsetup_r+0xd8>)
 8007400:	429c      	cmp	r4, r3
 8007402:	bf08      	it	eq
 8007404:	68ec      	ldreq	r4, [r5, #12]
 8007406:	e7e6      	b.n	80073d6 <__swsetup_r+0x1e>
 8007408:	0758      	lsls	r0, r3, #29
 800740a:	d512      	bpl.n	8007432 <__swsetup_r+0x7a>
 800740c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800740e:	b141      	cbz	r1, 8007422 <__swsetup_r+0x6a>
 8007410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007414:	4299      	cmp	r1, r3
 8007416:	d002      	beq.n	800741e <__swsetup_r+0x66>
 8007418:	4630      	mov	r0, r6
 800741a:	f000 f991 	bl	8007740 <_free_r>
 800741e:	2300      	movs	r3, #0
 8007420:	6363      	str	r3, [r4, #52]	; 0x34
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	2300      	movs	r3, #0
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f043 0308 	orr.w	r3, r3, #8
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	b94b      	cbnz	r3, 8007452 <__swsetup_r+0x9a>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007448:	d003      	beq.n	8007452 <__swsetup_r+0x9a>
 800744a:	4621      	mov	r1, r4
 800744c:	4630      	mov	r0, r6
 800744e:	f000 f92b 	bl	80076a8 <__smakebuf_r>
 8007452:	89a0      	ldrh	r0, [r4, #12]
 8007454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007458:	f010 0301 	ands.w	r3, r0, #1
 800745c:	d00a      	beq.n	8007474 <__swsetup_r+0xbc>
 800745e:	2300      	movs	r3, #0
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	6963      	ldr	r3, [r4, #20]
 8007464:	425b      	negs	r3, r3
 8007466:	61a3      	str	r3, [r4, #24]
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b943      	cbnz	r3, 800747e <__swsetup_r+0xc6>
 800746c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007470:	d1ba      	bne.n	80073e8 <__swsetup_r+0x30>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	0781      	lsls	r1, r0, #30
 8007476:	bf58      	it	pl
 8007478:	6963      	ldrpl	r3, [r4, #20]
 800747a:	60a3      	str	r3, [r4, #8]
 800747c:	e7f4      	b.n	8007468 <__swsetup_r+0xb0>
 800747e:	2000      	movs	r0, #0
 8007480:	e7f7      	b.n	8007472 <__swsetup_r+0xba>
 8007482:	bf00      	nop
 8007484:	20000010 	.word	0x20000010
 8007488:	08007910 	.word	0x08007910
 800748c:	08007930 	.word	0x08007930
 8007490:	080078f0 	.word	0x080078f0

08007494 <_close_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d06      	ldr	r5, [pc, #24]	; (80074b0 <_close_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fa faa6 	bl	80019f0 <_close>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_close_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_close_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000280 	.word	0x20000280

080074b4 <__sflush_r>:
 80074b4:	898a      	ldrh	r2, [r1, #12]
 80074b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ba:	4605      	mov	r5, r0
 80074bc:	0710      	lsls	r0, r2, #28
 80074be:	460c      	mov	r4, r1
 80074c0:	d458      	bmi.n	8007574 <__sflush_r+0xc0>
 80074c2:	684b      	ldr	r3, [r1, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dc05      	bgt.n	80074d4 <__sflush_r+0x20>
 80074c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dc02      	bgt.n	80074d4 <__sflush_r+0x20>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	d0f9      	beq.n	80074ce <__sflush_r+0x1a>
 80074da:	2300      	movs	r3, #0
 80074dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e0:	682f      	ldr	r7, [r5, #0]
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	d032      	beq.n	800754c <__sflush_r+0x98>
 80074e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	075a      	lsls	r2, r3, #29
 80074ec:	d505      	bpl.n	80074fa <__sflush_r+0x46>
 80074ee:	6863      	ldr	r3, [r4, #4]
 80074f0:	1ac0      	subs	r0, r0, r3
 80074f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074f4:	b10b      	cbz	r3, 80074fa <__sflush_r+0x46>
 80074f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f8:	1ac0      	subs	r0, r0, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	4602      	mov	r2, r0
 80074fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	4628      	mov	r0, r5
 8007504:	47b0      	blx	r6
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	d106      	bne.n	800751a <__sflush_r+0x66>
 800750c:	6829      	ldr	r1, [r5, #0]
 800750e:	291d      	cmp	r1, #29
 8007510:	d82c      	bhi.n	800756c <__sflush_r+0xb8>
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <__sflush_r+0x108>)
 8007514:	40ca      	lsrs	r2, r1
 8007516:	07d6      	lsls	r6, r2, #31
 8007518:	d528      	bpl.n	800756c <__sflush_r+0xb8>
 800751a:	2200      	movs	r2, #0
 800751c:	6062      	str	r2, [r4, #4]
 800751e:	04d9      	lsls	r1, r3, #19
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	d504      	bpl.n	8007530 <__sflush_r+0x7c>
 8007526:	1c42      	adds	r2, r0, #1
 8007528:	d101      	bne.n	800752e <__sflush_r+0x7a>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	b903      	cbnz	r3, 8007530 <__sflush_r+0x7c>
 800752e:	6560      	str	r0, [r4, #84]	; 0x54
 8007530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007532:	602f      	str	r7, [r5, #0]
 8007534:	2900      	cmp	r1, #0
 8007536:	d0ca      	beq.n	80074ce <__sflush_r+0x1a>
 8007538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800753c:	4299      	cmp	r1, r3
 800753e:	d002      	beq.n	8007546 <__sflush_r+0x92>
 8007540:	4628      	mov	r0, r5
 8007542:	f000 f8fd 	bl	8007740 <_free_r>
 8007546:	2000      	movs	r0, #0
 8007548:	6360      	str	r0, [r4, #52]	; 0x34
 800754a:	e7c1      	b.n	80074d0 <__sflush_r+0x1c>
 800754c:	6a21      	ldr	r1, [r4, #32]
 800754e:	2301      	movs	r3, #1
 8007550:	4628      	mov	r0, r5
 8007552:	47b0      	blx	r6
 8007554:	1c41      	adds	r1, r0, #1
 8007556:	d1c7      	bne.n	80074e8 <__sflush_r+0x34>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0c4      	beq.n	80074e8 <__sflush_r+0x34>
 800755e:	2b1d      	cmp	r3, #29
 8007560:	d001      	beq.n	8007566 <__sflush_r+0xb2>
 8007562:	2b16      	cmp	r3, #22
 8007564:	d101      	bne.n	800756a <__sflush_r+0xb6>
 8007566:	602f      	str	r7, [r5, #0]
 8007568:	e7b1      	b.n	80074ce <__sflush_r+0x1a>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	e7ad      	b.n	80074d0 <__sflush_r+0x1c>
 8007574:	690f      	ldr	r7, [r1, #16]
 8007576:	2f00      	cmp	r7, #0
 8007578:	d0a9      	beq.n	80074ce <__sflush_r+0x1a>
 800757a:	0793      	lsls	r3, r2, #30
 800757c:	680e      	ldr	r6, [r1, #0]
 800757e:	bf08      	it	eq
 8007580:	694b      	ldreq	r3, [r1, #20]
 8007582:	600f      	str	r7, [r1, #0]
 8007584:	bf18      	it	ne
 8007586:	2300      	movne	r3, #0
 8007588:	eba6 0807 	sub.w	r8, r6, r7
 800758c:	608b      	str	r3, [r1, #8]
 800758e:	f1b8 0f00 	cmp.w	r8, #0
 8007592:	dd9c      	ble.n	80074ce <__sflush_r+0x1a>
 8007594:	6a21      	ldr	r1, [r4, #32]
 8007596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007598:	4643      	mov	r3, r8
 800759a:	463a      	mov	r2, r7
 800759c:	4628      	mov	r0, r5
 800759e:	47b0      	blx	r6
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dc06      	bgt.n	80075b2 <__sflush_r+0xfe>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e78e      	b.n	80074d0 <__sflush_r+0x1c>
 80075b2:	4407      	add	r7, r0
 80075b4:	eba8 0800 	sub.w	r8, r8, r0
 80075b8:	e7e9      	b.n	800758e <__sflush_r+0xda>
 80075ba:	bf00      	nop
 80075bc:	20400001 	.word	0x20400001

080075c0 <_fflush_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	690b      	ldr	r3, [r1, #16]
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b913      	cbnz	r3, 80075d0 <_fflush_r+0x10>
 80075ca:	2500      	movs	r5, #0
 80075cc:	4628      	mov	r0, r5
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	b118      	cbz	r0, 80075da <_fflush_r+0x1a>
 80075d2:	6983      	ldr	r3, [r0, #24]
 80075d4:	b90b      	cbnz	r3, 80075da <_fflush_r+0x1a>
 80075d6:	f7ff fa15 	bl	8006a04 <__sinit>
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <_fflush_r+0x6c>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	d11b      	bne.n	8007618 <_fflush_r+0x58>
 80075e0:	686c      	ldr	r4, [r5, #4]
 80075e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ef      	beq.n	80075ca <_fflush_r+0xa>
 80075ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075ec:	07d0      	lsls	r0, r2, #31
 80075ee:	d404      	bmi.n	80075fa <_fflush_r+0x3a>
 80075f0:	0599      	lsls	r1, r3, #22
 80075f2:	d402      	bmi.n	80075fa <_fflush_r+0x3a>
 80075f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f6:	f7ff faa3 	bl	8006b40 <__retarget_lock_acquire_recursive>
 80075fa:	4628      	mov	r0, r5
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7ff ff59 	bl	80074b4 <__sflush_r>
 8007602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007604:	07da      	lsls	r2, r3, #31
 8007606:	4605      	mov	r5, r0
 8007608:	d4e0      	bmi.n	80075cc <_fflush_r+0xc>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	059b      	lsls	r3, r3, #22
 800760e:	d4dd      	bmi.n	80075cc <_fflush_r+0xc>
 8007610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007612:	f7ff fa96 	bl	8006b42 <__retarget_lock_release_recursive>
 8007616:	e7d9      	b.n	80075cc <_fflush_r+0xc>
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <_fflush_r+0x70>)
 800761a:	429c      	cmp	r4, r3
 800761c:	d101      	bne.n	8007622 <_fflush_r+0x62>
 800761e:	68ac      	ldr	r4, [r5, #8]
 8007620:	e7df      	b.n	80075e2 <_fflush_r+0x22>
 8007622:	4b04      	ldr	r3, [pc, #16]	; (8007634 <_fflush_r+0x74>)
 8007624:	429c      	cmp	r4, r3
 8007626:	bf08      	it	eq
 8007628:	68ec      	ldreq	r4, [r5, #12]
 800762a:	e7da      	b.n	80075e2 <_fflush_r+0x22>
 800762c:	08007910 	.word	0x08007910
 8007630:	08007930 	.word	0x08007930
 8007634:	080078f0 	.word	0x080078f0

08007638 <_lseek_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	; (8007658 <_lseek_r+0x20>)
 800763c:	4604      	mov	r4, r0
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	2200      	movs	r2, #0
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7fa f9f9 	bl	8001a3e <_lseek>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_lseek_r+0x1e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_lseek_r+0x1e>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20000280 	.word	0x20000280

0800765c <__swhatbuf_r>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	460e      	mov	r6, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	2900      	cmp	r1, #0
 8007666:	b096      	sub	sp, #88	; 0x58
 8007668:	4614      	mov	r4, r2
 800766a:	461d      	mov	r5, r3
 800766c:	da08      	bge.n	8007680 <__swhatbuf_r+0x24>
 800766e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	061a      	lsls	r2, r3, #24
 8007678:	d410      	bmi.n	800769c <__swhatbuf_r+0x40>
 800767a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767e:	e00e      	b.n	800769e <__swhatbuf_r+0x42>
 8007680:	466a      	mov	r2, sp
 8007682:	f000 f8bb 	bl	80077fc <_fstat_r>
 8007686:	2800      	cmp	r0, #0
 8007688:	dbf1      	blt.n	800766e <__swhatbuf_r+0x12>
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007690:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007694:	425a      	negs	r2, r3
 8007696:	415a      	adcs	r2, r3
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	e7ee      	b.n	800767a <__swhatbuf_r+0x1e>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	2000      	movs	r0, #0
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	b016      	add	sp, #88	; 0x58
 80076a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080076a8 <__smakebuf_r>:
 80076a8:	898b      	ldrh	r3, [r1, #12]
 80076aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076ac:	079d      	lsls	r5, r3, #30
 80076ae:	4606      	mov	r6, r0
 80076b0:	460c      	mov	r4, r1
 80076b2:	d507      	bpl.n	80076c4 <__smakebuf_r+0x1c>
 80076b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	2301      	movs	r3, #1
 80076be:	6163      	str	r3, [r4, #20]
 80076c0:	b002      	add	sp, #8
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	ab01      	add	r3, sp, #4
 80076c6:	466a      	mov	r2, sp
 80076c8:	f7ff ffc8 	bl	800765c <__swhatbuf_r>
 80076cc:	9900      	ldr	r1, [sp, #0]
 80076ce:	4605      	mov	r5, r0
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff fa57 	bl	8006b84 <_malloc_r>
 80076d6:	b948      	cbnz	r0, 80076ec <__smakebuf_r+0x44>
 80076d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076dc:	059a      	lsls	r2, r3, #22
 80076de:	d4ef      	bmi.n	80076c0 <__smakebuf_r+0x18>
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	e7e3      	b.n	80076b4 <__smakebuf_r+0xc>
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <__smakebuf_r+0x7c>)
 80076ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	6020      	str	r0, [r4, #0]
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	6163      	str	r3, [r4, #20]
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	6120      	str	r0, [r4, #16]
 8007702:	b15b      	cbz	r3, 800771c <__smakebuf_r+0x74>
 8007704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007708:	4630      	mov	r0, r6
 800770a:	f000 f889 	bl	8007820 <_isatty_r>
 800770e:	b128      	cbz	r0, 800771c <__smakebuf_r+0x74>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	89a0      	ldrh	r0, [r4, #12]
 800771e:	4305      	orrs	r5, r0
 8007720:	81a5      	strh	r5, [r4, #12]
 8007722:	e7cd      	b.n	80076c0 <__smakebuf_r+0x18>
 8007724:	0800699d 	.word	0x0800699d

08007728 <__malloc_lock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_lock+0x8>)
 800772a:	f7ff ba09 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	20000274 	.word	0x20000274

08007734 <__malloc_unlock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_unlock+0x8>)
 8007736:	f7ff ba04 	b.w	8006b42 <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	20000274 	.word	0x20000274

08007740 <_free_r>:
 8007740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007742:	2900      	cmp	r1, #0
 8007744:	d044      	beq.n	80077d0 <_free_r+0x90>
 8007746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774a:	9001      	str	r0, [sp, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f1a1 0404 	sub.w	r4, r1, #4
 8007752:	bfb8      	it	lt
 8007754:	18e4      	addlt	r4, r4, r3
 8007756:	f7ff ffe7 	bl	8007728 <__malloc_lock>
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <_free_r+0x94>)
 800775c:	9801      	ldr	r0, [sp, #4]
 800775e:	6813      	ldr	r3, [r2, #0]
 8007760:	b933      	cbnz	r3, 8007770 <_free_r+0x30>
 8007762:	6063      	str	r3, [r4, #4]
 8007764:	6014      	str	r4, [r2, #0]
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800776c:	f7ff bfe2 	b.w	8007734 <__malloc_unlock>
 8007770:	42a3      	cmp	r3, r4
 8007772:	d908      	bls.n	8007786 <_free_r+0x46>
 8007774:	6825      	ldr	r5, [r4, #0]
 8007776:	1961      	adds	r1, r4, r5
 8007778:	428b      	cmp	r3, r1
 800777a:	bf01      	itttt	eq
 800777c:	6819      	ldreq	r1, [r3, #0]
 800777e:	685b      	ldreq	r3, [r3, #4]
 8007780:	1949      	addeq	r1, r1, r5
 8007782:	6021      	streq	r1, [r4, #0]
 8007784:	e7ed      	b.n	8007762 <_free_r+0x22>
 8007786:	461a      	mov	r2, r3
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b10b      	cbz	r3, 8007790 <_free_r+0x50>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d9fa      	bls.n	8007786 <_free_r+0x46>
 8007790:	6811      	ldr	r1, [r2, #0]
 8007792:	1855      	adds	r5, r2, r1
 8007794:	42a5      	cmp	r5, r4
 8007796:	d10b      	bne.n	80077b0 <_free_r+0x70>
 8007798:	6824      	ldr	r4, [r4, #0]
 800779a:	4421      	add	r1, r4
 800779c:	1854      	adds	r4, r2, r1
 800779e:	42a3      	cmp	r3, r4
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	d1e0      	bne.n	8007766 <_free_r+0x26>
 80077a4:	681c      	ldr	r4, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	4421      	add	r1, r4
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	e7da      	b.n	8007766 <_free_r+0x26>
 80077b0:	d902      	bls.n	80077b8 <_free_r+0x78>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	e7d6      	b.n	8007766 <_free_r+0x26>
 80077b8:	6825      	ldr	r5, [r4, #0]
 80077ba:	1961      	adds	r1, r4, r5
 80077bc:	428b      	cmp	r3, r1
 80077be:	bf04      	itt	eq
 80077c0:	6819      	ldreq	r1, [r3, #0]
 80077c2:	685b      	ldreq	r3, [r3, #4]
 80077c4:	6063      	str	r3, [r4, #4]
 80077c6:	bf04      	itt	eq
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	6054      	str	r4, [r2, #4]
 80077ce:	e7ca      	b.n	8007766 <_free_r+0x26>
 80077d0:	b003      	add	sp, #12
 80077d2:	bd30      	pop	{r4, r5, pc}
 80077d4:	20000278 	.word	0x20000278

080077d8 <_read_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	; (80077f8 <_read_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7fa f89c 	bl	8001924 <_read>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_read_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_read_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000280 	.word	0x20000280

080077fc <_fstat_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d07      	ldr	r5, [pc, #28]	; (800781c <_fstat_r+0x20>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	4611      	mov	r1, r2
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	f7fa f8fd 	bl	8001a08 <_fstat>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	d102      	bne.n	8007818 <_fstat_r+0x1c>
 8007812:	682b      	ldr	r3, [r5, #0]
 8007814:	b103      	cbz	r3, 8007818 <_fstat_r+0x1c>
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20000280 	.word	0x20000280

08007820 <_isatty_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d06      	ldr	r5, [pc, #24]	; (800783c <_isatty_r+0x1c>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	f7fa f8fc 	bl	8001a28 <_isatty>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_isatty_r+0x1a>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_isatty_r+0x1a>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000280 	.word	0x20000280

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
